<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dominik's website (Posts about nbody)</title><link>https://stanczakdominik.github.io/</link><description></description><atom:link href="https://stanczakdominik.github.io/categories/nbody.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="https://matrix.to/#/@StanczakDominik:matrix.org"&gt;Dominik Stańczak-Marikin&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="/images/creativecommons.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Wed, 04 Jan 2023 19:03:41 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Better Numba calculation of inter-particle distance matrices</title><link>https://stanczakdominik.github.io/posts/distance-matrix-numba/</link><dc:creator>Dominik Stańczak-Marikin</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Recently, I've been looking for efficient ways to compute a &lt;a href="https://en.wikipedia.org/wiki/Distance_matrix"&gt;distance matrix&lt;/a&gt; in Python. I'm deliberately trying to implement a naive n-body simulation so as to find optimized ways of calculating those, as practice. Let's do that using Numba.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stanczakdominik.github.io/posts/distance-matrix-numba/" class="btn btn-outline-secondary"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>nbody</category><category>numba</category><category>python</category><category>simulation</category><guid>https://stanczakdominik.github.io/posts/distance-matrix-numba/</guid><pubDate>Thu, 25 Jul 2019 06:00:00 GMT</pubDate></item><item><title>CuPy speedup of naive N-Body vectorized force calculation</title><link>https://stanczakdominik.github.io/posts/cupy-nbody-direct-force-calculation/</link><dc:creator>Dominik Stańczak-Marikin</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;I had intended to write a post about speeding up our &lt;a href="https://stanczakdominik.github.io/posts/parallelizable-numpy-implementation-of-2d-ising-model"&gt;Numpy Ising implementation&lt;/a&gt;, which we &lt;a href="https://stanczakdominik.github.io/posts/quantitative-data-analysis-of-the-2d-ising-model"&gt;found out gave reasonable numerical values&lt;/a&gt;, though the small grids we were able to use limited the accuracy a fair bit. However, a few difficulties came up, so I thought instead (to keep writing these a habit!) I would write a little bit about using CuPy to speed up force calculations in N-body simulations. This might be a point I'll come back to later on this blog, as I have an ongoing project implementing that.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://stanczakdominik.github.io/posts/cupy-nbody-direct-force-calculation/" class="btn btn-outline-secondary"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>cupy</category><category>gpu</category><category>nbody</category><category>python</category><guid>https://stanczakdominik.github.io/posts/cupy-nbody-direct-force-calculation/</guid><pubDate>Mon, 04 Mar 2019 17:00:00 GMT</pubDate></item></channel></rss>