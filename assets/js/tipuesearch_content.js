var tipuesearch = {
  "pages": [
    {
      "title": "index",
      "text": "Dominik Sta\u0144czak-Marikin\n        Python software developer\n        Plasma physicist\n        Punsmith\n        Pole",
      "tags": "",
      "url": "https://stanczakdominik.github.io/"
    },
    {
      "title": "About",
      "text": "Hi there! My name's Dominik Sta\u0144czak-Marikin and I'm currently a software\ndeveloper working with data processing pipelines for\nneurodegenerative disease research at a large pharmaceutical company.\nI previously worked at the Institute of Plasma Physics and Laser\nMicrofusion in Warsaw, Poland as a research\nsoftware engineer, where I helped analyse data from Wendelstein 7-X,\nthe currently (2023) largest stellarator in\nthe world. I consider myself a recovering plasma physicist.\nWhat I do in my spare time\n\nhelp out with open source software projects such as PlasmaPy\ntinker, script and automate\nread books and learn lots\nplay games - classic RTSes made me who I am now. StarCraft II was a huge part of my life, but nowadays I mostly play Factorio with my wife and Heroes of the Storm to fulfill my competitive needs.\ntake care of our dog\nwrite on my blog (see Posts on the left) to help people out and scratch the teaching itch\ndo some light biking and mountain hiking\n\n\n\n\n\n\n\nWhere to find me\n\nYou can always email me at stanczakdominik@gmail.com.\nI do most of my work on GitHub.\nI'm on Linked for professional purposes.\nI'm also on Mastodon.\nOn Matrix, I'm @StanczakDominik:matrix.org. This is probably the fastest way to reach me via text chat.\n\nIn fact, if you've found this\nblog at all useful or enjoyable, there's no better way to express that (and make\nmy day, too!) than to tell me about it!",
      "tags": "",
      "url": "https://stanczakdominik.github.io/about/"
    },
    {
      "title": "A pandemic story, or, what I learned working with nuclear fusion",
      "text": "As promised, here's a post on the story of my time at IPPLM - the Institute of Plasma Physics and Laser Microfusion, where I worked for the last almost-three-years. Past tense, because since September I've successfully found remote work as a Python software developer at a large pharmaceutical company. Speaking of... I don't think I can say as much as I'd hoped about the projects we're working on, but, suffice to say, I think they have some real potential for helping people with neurodegenerative diseases. So I'm still trying to tackle one of the Large Problems, just... another one, and more so from a backend/support angle.\nWhile writing this, I realized that this story was also deeply intertwined with the story of the global COVID-19 pandemic, because that turned the whole situation on its head. I thought about separating the two, but decided instead to embrace it and tell it whole rather than in pieces. So, beware, this is going to get long. To alleviate that, I've broken it up more than usual and have placed the major takeaways in specifically formatted sections throughout.\nWith that disclaimer in place... onto the story!\n\n\nHow I got there\nDuring my undergraduate studies, somewhere maybe during my second year, I realized that\n\nhey, nuclear fusion is this cool project, with lots of potential for humanity, that also fits most of my scientific interests (fluids, electrodynamics, computational physics), and none of my friends seem to be taking care of that. I want it to get done; I'll go do it.\n~ Dominik, 2014 or so\n\nSo I went ahead and started doing it, using a three-pronged approach:\n\nLearn more about it.\nFind people I can help with it online.\nFind people I can help with it locally.\n\nI started grabbing books and courses about plasma and fusion, so that was avenue #1 covered.\nTo deal with #2, since I was a budding dev at the time, with basically a single computational physics book of extra-curricular experience in my toolbelt (which also exposed me to the idea of open source) and a metric ton of optimism, I tried searching on GitHub for openly developed plasma physics projects.  That's how I found PlasmaPy, and I should really write a post on my history with that project sometime, as it's been one of the most impactful decisions of my life.\nI think there's a lesson to be learned here:\n\nTakeaway number one: the Internet really shortens the distance between cool projects and useful volunteers looking to make a difference while gaining experience. This is a resource you could be using today. Go ahead!\n\nStill, at the time it was a small project, a suite of generic tools, and I felt the gaping hole of my plasma physics inexperience was a hindrance. I wanted to get some hands on experience with actual nuclear fusion.\nThe road to IPPLM\nI still had #3, though - reaching out to people locally who were already involved with fusion - and that's how I found IPPLM. I initially signed up there for an apprenticeship, which was spent mostly helping out a senior researcher with debugging and visualization for a simulation he was running for a plasma focus system. That was neat and I learned a lot during that (I also wrote some code that I still shudder to think about!), but I didn't get as much hands on experience with actual nuclear fusion, the cool machines and experiments, the twisted geometries of tokamaks and stellarators.\nDuring that time, I learned about the particle-in-cell method and figured I wanted to try doing something in that area. My supervisor put me in contact with professor Jab\u0142o\u0144ski, who's absolutely one of the literal Best People on the planet and can also play a mean acoustic guitar. He guided me through the process of writing a particle in cell code in Python. I've told that story before. Still... it was a little... far from actual nuclear fusion, the cool machines and experiments, etc etc, you know the drill.\nSo in late 2019, having spent nine months with natural language translation at Samsung, having decided I'd go back to doing science because natural language translation seemed to be getting the help it needed and fusion less so, I went back to IPPLM and started working there, first part-time, then full time. For the first time I'd have hands on experience with nuclear fusion, etc etc!\nI spent maybe four months there before COVID-19 exploded in Asia and then globally.\nAnd then it got worse, but also better\nIt didn't look like much initially, though I think I got initial glimpses faster than most - three of my friends at IPPLM went to Japan's LHD at the time and went on medical leave straight after coming back. I still suspect I also caught a relatively mild form from them - which could be why I managed to go through the pandemic relatively unscathed. Of course, getting vaccinated ASAP later also helped!\nStill, at the time, things were deteriorating pretty rapidly. Back then, nobody knew how this thing spread, how lethal it was and how you could tell you had it. There was a period where everyone was paranoid about disinfecting surfaces, such as door knobs, because we didn't know it transmitted via the respiratory system. So we got sent to remote work basically overnight, and rumors of lockdowns kept popping out.\nI was extremely lucky and already had an opportunity to move out with my then-fiancee-now-wife lined up, which we seized literally right before the lockdown hit. We thought, hey, whatever happens it's going to be easier to handle it together. So we grabbed the dog and ran in early April.\n\n\nMy pair programming buddy. He sometimes barks at antipatterns. Well, he also sometimes barks at patterns, or maybe it's all just the pigeons outside, but I believe he's trying to help, all the same.\n\nAnd the next few months, spent working remotely, I actually enjoyed quite a lot.\nWorking from home\nBecause it turns out that hey, as a massive introvert I actually do some of my best work on my own terms. Locked up tight in a tiny room with no interruptions but the work in front of me? Sign me up! Getting up before the sun and racing it to knock down one more bug before dawn? Hell yes! Writing code without trousers? Well let me tell you, I've written some of my worst code with trousers on and I do not think that a mere coincidence!1\nProfessionally, this was a weird time because I was assisting with one computational project and investigating my first master's thesis attempt. I was lucky to be able to do the thesis as part of work, but it didn't happen to pan out. The first attempt - because we basically had a massive miscommunication and didn't reach out to the folks in Germany early enough. We vastly underestimated the difficulty of developing a Bayesian model for Thomson scattering and didn't have enough experience with the subject to de-scope it into a \"minimum thesis-able product\".\nThe latter was a re-implementation of an existing code and, well, let's just say it was sufficiently unexciting and un-useful that I had trouble motivating myself to finish it. I had more important stuff to do! Through that time, I also worked on parsing LHD spectroscopic data and identifying spectral lines in it; backward inference of PHA data using IPPLM's forward model for impurities; and essentially a ray-tracing parallelized algorithm for the CO-Monitor diagnostic, which I hear is coming online soon. I really enjoyed all of these.\nAll that taught me two things:\n\nTakeaway number two: it's awesome to get results, but the total impact of the results gotten by all the people you help - even by simply writing tools - can often be far greater.2\n\nOf course, this may be a purely personal thing - some folks just prefer writing tools! In fact, while my official job title at IPPLM was \"Pracownik badawczo-techniczny\" (Technical/research worker/specialist, I guess?), there's an increasingly popular term \"Research Software Engineer\", or RSE, that describes the sort of job I did. In fact I'll leave you with the RSE community's website and jump straight to the next lesson learned:\n\nTakeaway number three: Research Software Engineers, or people straddling the boundary of science and software development, are extremely important. Scientists alone, without practical experience in software dev, have an incredibly rough road to good results in this digital age. But you can't just point software devs at a tokamak and expect to get working fusion out of it, either. If you are proficient in both areas, even enough to know who to ask in each, this may be a good path you can take.\n\nOf course I'm not saying it's impossible for \"pure\" scientists, physicists in my case, to get results - but the code they write is often obscure, inefficient and non-generalizable, so it takes a lot of time to rewrite it from one experiment to another. I'm not saying my code's all that much better, far from it - I'm just pointing out a problem in the system.\nAll in all, though, the first two waves of the pandemic were actually a good period for me and my then-fiancee. Of course, we dodged a bunch of bullets - heavy infections, losses of people close to us... \nAnd then it got better, but also worse\nWhat got better was the pandemic. Well, relatively speaking - we had vaccines, but a lot of people were being unreasonable and refused to do their part for societal immunity. Still, by mid 2021 we \"mostly\" \"had a handle on it\", or at least that's what our government... I can't tell if they honestly thought that. I personally smelled bullshit and was validated afterwards, because, basically...\n\n\nWe were here. \"Coronavirus in retreat\", as per Polish PM Morawiecki, July 1st. Plot as per Worldometers.info.\n\nOn, if I remember correctly, July 1st, 2021, a Thursday, we all got an email from the Director from the Institute, saying that we'd be returning to stationary work... on July 2nd, a Friday.\n\n\nmy section of the IPPLM, July 1st (colorized)\n\nNow I'm not saying the Director was in a comfortable position here, IPPLM being a national institute at all and likely under pressure from the same dorks in government whose ineptitude got us waves #3, #4. Or maybe it's that it's hard to get remote work working for experimentalists, and while folks like me who mostly whack away at a keyboard and prep data analysis for the next W7X campaign were seeing crazy high efficiency, work on the experimental part stalled. I honestly don't know.\nWhatever the reason, in my little area, this has been widely seen as an utterly shit move. Due to decisions made above our heads and without giving us any say in, we were now forced to:\n\nrisk catching COVID, which of course flared up again soon in full force after summer vacation ended for schoolchildren\nspend valuable time commuting, which in my case came to 2h30m a day, which is... draining, to say the least\nwork less efficiently, because now you're tired from the commute and you're constantly paying\nwork in constant distraction, because there's only so much blasting Rammstein on headphones can help you block out, and I don't think I was being any less helpful to everyone who needed it\nachieve less progress, so it becomes harder to motivate yourself when you're not getting the results you'd like\nspend the 5.5 hours left in the day (assuming 8 hours work, 8 hours sleep, 2h30m commute) trying to fit meal prep, regenerating just enough to survive the next day\nwrite code while wearing trousers\n\nAnd, as I heard, I don't know if it was just middle management playing bad cop, but this would be a permanent arrangement.\nAnd, well, I lasted roughly a year before slowly coming to the conclusion that the strain all this was putting on my personal life, on my mental health, on my other projects (remember PlasmaPy?)... wasn't worth it. So, since my contract was running out at the end of summer 2022, I decided, welp, guess I'm not finishing this master's thesis that's not going to help anyone just so I can work in conditions I don't enjoy, and didn't seek an extension.\nSo here's my last lesson learned at IPPLM!\n\nTakeaway number four: work at home, for work that can be done remotely and for people who can successfully adapt to it is such a gamechanger that workplaces must adapt to it themselves. Workplaces that don't miss out on a whole lot of potential.\n\nI'm not saying it's an easy transition. Organizing remote work is a whole 'nother game. Still, I'm pretty sure that, despite whatever you might hear from, for example, Bezos-owned media, it's the way to go for people like me.\nThe end of this chapter, and how it's getting better again\nHere's a disclaimer: I absolutely don't want to dunk on IPPLM! I It's a good place, with a lot of great people that I have a lot of respect and gratitude for, and some damn cool projects. Still, the pandemic made me realize that I personally am not a good fit for it. I wish I could have been, and with more flexibility from the management side I might have been. I would still recommend the workplace, but be realistic about how much you'd like to endure for work and try to find an environment that's a good fit for you. Sample. Try things.\nAnd that's it for this story. COVID is now likely a permanent fixture in our lives, unfortunately. But even if it were extinguished, I don't think I'm likely to come back to office work. I'm extremely happy with how things are going now, with my fully remote setup. I'm now:\n\nhealthier, both mentally and physically\nhappily doing stuff like spending more time with my wonderful wow-I-still-can't-believe-she's-my wife, writing, both code and blog posts, as you can see here!\nworking efficiently, in conditions I find optimal (5 AM start? Sure!)\nlearning a lot about how industry does Python\nactually managing to have a social life\nhelping nuclear fusion the way I like, writing tools that actually help a lot of people, on my own terms\nactually moving my life along!\n\nSo... yeah! If you got here, thanks for sticking through it, I hope you found it interesting and/or helpful. I certainly found writing it helpful in processing the last two crazy years. If you didn't, while I can't exactly return you the time you've spent reading, I can get you a dog photo that might be more your thing. Get in touch if you'd like to take me up on that offer :)\n\n\n\n\nI can neither confirm nor deny trousers were worn while writing this post. Honestly, it's been in draft for a while so I can't actually remember. I'd estimate like 40% trouserless, which may be why it's gotten so lengthy.\u00a0\u21a9\n\n\nDisclaimer: whether the scientific research system we have now is set up to promote and reward writing tools is arguable. In fact I'll argue for an emphatic no and just point you towards the announcement of JOSS for more on that.\u00a0\u21a9",
      "tags": "fusion,ipplm,status,work",
      "url": "https://stanczakdominik.github.io/posts/ipplm-post-mortem/"
    },
    {
      "title": "Mid-2022 Update",
      "text": "I thought I'd give a quick update on some recent happenings.\n\nFirstly, and most importantly, and I'm still a little shocked that this actually happened - we got married! :)\n\nWith that, and since there's nothing more beautiful in life than symmetry, we've decided to both take a combo surname. Thus, the About page has had a minor text update :)\n\n\n\nSecondly \u2015 and I'm also in shock about this \u2015 it's happened twice recently that folks (Readers, I should call them!) wrote to me that they liked this very blog and found what I write here helpful.\nI'd like to take this opportunity to say: if you like what I write here, giving me a heads up about that is the best way to ensure more gets written here! Shout-out to Diogo, who demonstrated that principle today :)\n\nIn \"Update on the year 2019\", I wrote:\n\nAt the start of December, I started a research software job at the Institute for Plasma Physics and Laser Microfusion here in Warsaw, Poland! This is also where I'll be writing and developing my master's thesis, related to Bayesian inference for plasma diagnostics on Wendelstein 7-x, using Python and more specifically PyMC3. A step forwards for modern, open, reproducible and maintainable science software! At least, I hope so. :)\n\nand it's nice to see how hopeful I was in 2019, right before the pandemic year hit! I'll sum up what I learned at IPPLM in my next post, but for now I have to say that with the end of August 2022, I've decided to quit the Institute and return to software development. The key factor in that decision was... remote work, or rather, lack thereof.\nI still intend to support the fusion project, but I intend to do so on my own time, the way I do best - by creating, improving upon and generally helping out with openly available tools in that ecosystem.\nI'm still finalizing my new job, so I don't want to say much just yet, but expect the next posts to introduce the projects happening there.\n\nAll right, that should wrap things up for now. Expect to see another update sooner than later :)",
      "tags": "ipplm,marriage,status,work",
      "url": "https://stanczakdominik.github.io/posts/mid-2022-update/"
    },
    {
      "title": "S\u0142awa Ukrainie!",
      "text": "There's very little to be said about this, but it needs to be said nonetheless.",
      "tags": "status,world",
      "url": "https://stanczakdominik.github.io/posts/slawa-ukrainie/"
    },
    {
      "title": "The importance of good notation",
      "text": "I've just spent the last four weeks hunting for a bug in my thesis code that\nI've mentioned last time.  Since then, I've given up on\nthe paper I'm reimplementing more times than I can count.  Well... Can you\nguess how that went?\n\n\nIt turns out I missed the fact that $S_{pT}{ai}$ is very much not the same as\n$S_{pT\\theta}{ai}$, where the difference is conceptually a rescaling\n$S_{pT\\theta}{ai} \\sim \\mu S_{pT}{ai}$, $\\mu$ being a viscosity-like object.\nSo, that happened.\n\nI suspect I'm sort of writing this as a reminder to future!myself that hey,\nsmall details are crucial and deserve attention, unless you want to waste\nyour own time.\nAt the same time, here's my plea to you - when writing, especially when writing\nscientific literature (which, like your code, is going to be read many more\ntimes than the one time you're writing it), pay attention to the notation\nyou're using for your concepts. Think ahead of how it might contribute to the\nreader's understanding of what you're trying to communicate, or hinder it.\nAnd maybe, just maybe, make use of the wide arsenal of typography you've\ngot available and don't reuse symbols for concepts that are different even\njust by their dimensionality!\n\nAt the same time, I'm really happy to be past this. This bug was really\ngnawing at me.\nAlso, I think this is a great testament to the power of physical unit packages\nin scientific computing. I wasted 4 weeks on this, sure - but without\nastropy.units notifying me that\n\"your units are off, mate\" on every test run, I have no idea how many weeks I\nwould spend on it later on in the development process, with my results in\ndisagreement with previous results!",
      "tags": "masters thesis,mathjax,science,status",
      "url": "https://stanczakdominik.github.io/posts/the-importance-of-good-notation/"
    },
    {
      "title": "I aten't dead",
      "text": "Here's a quick status update; I have been meaning to post these more often.\n\n\nThesis\nI'm tinkering away and playing bug whack-a-mole with\nPlasmaPy #1059, the pull\nrequest that's going to become my masters thesis. Basically, it implements\nneoclassical transport calculations - solves for particle and heat flows -\nin axisymmetric plasma configurations. It's rather basic, but it's a start.\n\nHere's a sample flux surface - I will soon-ish write a note that explains this concept.\nIn a nutshell, though - I'm splitting the domain (a 2D slice through a tokamak)\ninto these circular flux surfaces, a radial grid:\n\nAnd then I calculate how much flow there is between them.  I still have a good\nbunch of problems with it:\n\nI'm using astropy.units, from which I infer that my formulae have issues, as\n    each flux comes out with a different physical unit attached. And I'm still\n    not quite sure why.\nI still have to figure out a decently nice way to input the quantities\n    (density and temperature) that, together with the magnetic field, determine\n    this transport.\nI don't understand differential geometry yet, and it really would have been\n    useful here. But I'm picking it up, slowly.\n\nThe rest\nWhoops, I'm writing this on a timer as an exercise and that one's rapidly\nrunning away. Okay, here goes.\n\nPart 2 of the series on fusion is coming soon; I'm using\n    it as a way to cobble together a first draft of my actual thesis introduction.\nPlasmaPy's coming along nicely, though I'm mostly knee deep in the neoclassics\n    PR. There have been some cool new developments with documentation and\n    speeding up our formulary functions. We're also trying to figure out how\n    to host essentially a hackathon. Tips appreciated!\nI've been getting back into reading books, recently, and really enjoying it.\n    I'll do a write up of my current system (because of course I have a\n    system, for it, what did you expect?) in a few weeks.\nSpeaking of systems, we recently sat down together with Paulina, realized our\n    way of consistently keeping the flat clean... wasn't at all consistent, and\n    figured out a system based on a python script and a shared yaml file with\n    dates of when we last did X thing (say, vacuuming) vs how often do we\n    want to do that particular X. The ratio of time since last occurrence to\n    expected period is then a metric than we can actually try to keep down. As\n    you have probably guessed by now - write up coming up! But probably not\n    soon.\n\nAll right, that's in for this week! I will try to be back here next week with\nanother status update, if I don't actually manage to get fusion2 out. Time will\ntell! In the meantime, stay safe!",
      "tags": "status",
      "url": "https://stanczakdominik.github.io/posts/i-atent-dead/"
    },
    {
      "title": "PlasmaPy v0.6.0 release!",
      "text": "I'll take the opportunity to cross-post this one from the PlasmaPy website; I'm pretty happy about how this went.\n\nPlasmaPy 0.6.0\nWe're really happy to announce that we've just released PlasmaPy version\n0.6.0! \n\n\nWe'd like to thank the wonderful people who have contributed to this release:\n\nAnthony Vo\nDhawal Modi *\nDominik Sta\u0144czak\nDrozdov David *\nErik Everson\nKevin Montes *\nNick Murphy\nPeter Heuer\nRamiz Qudsi\nTiger Du\n\nWhere a * indicates their first contribution to PlasmaPy.\nNote also that this release drops Python 3.6 support; we now\nrequire Python 3.7, following NumPy's NEP\n29.\nThe cool new features\nNote: these are my (Dominik's) personal highlights. There's more, but these make the\nprettiest plots right now.\nTwo-fluid dispersion relations\n\n\n\nIn PR #932 Ramiz Qudsi\nimplemented P. M. Bellan's 2012 full two-fluid dispersion relation for any\nelectron-ion system. Take a look at the notebook introducing\nthat.\nProton radiography\n\n\n\nPeter Heuer designed and implemented a framework for synthetic proton\nradiography. This is a multi-PR tour de force that simulates particles moving\nthrough EM fields and hitting a detector plane, generating histograms such as\nthe above. I'd point you to the notebook on that, but there's three right\nnow.\nAnalysis & Diagnostic framework; Langmuir probes\n\n\n\nErik Everson is spearheading work on our analysis & diagnostic\nframework.  As the\nfirst example, we've got a new and improved set of tools for swept Langmuir\nanalysis.\nWhat's next?\nFor this year, we're planning to have a roughly 3-month cadence for releases. Thus,\nthe next release is anticipated around mid June.\nIt should contain a refactored particle tracker, support for neoclassical\ntransport coefficient calculations for axisymmetric devices along with our\nfirst forays into tools for fusion.\nOne final note: we're discussing transitioning to some form of Calendar\nVersioning. If you have thoughts on that, we'd be happy\nto hear them!  Come join the discussion on our Matrix\nchatroom.",
      "tags": "plasmapy,projects,python,release",
      "url": "https://stanczakdominik.github.io/posts/plasmapy-v060-release/"
    },
    {
      "title": "Fusion 1/4: Nuclear power as of 2021",
      "text": "Hi! In the new year, as promised, you'll see more actual science discussions on this page. I have - I think, for the first time since I started writing here - a plan for the next four posts. The first will discuss nuclear power and its place in the world. The second will tell you a little about its most interesting future alternative - fusion power. Next up, we'll discuss its history a little and where I predict it'll head in the near future; and in the fourth, I'll try to discuss a little about what we're actually doing with it in terms of research work. I can't wait to get to the fourth part, so that should be at least motivating. Let's get to it!\n\n\n\nLet's start with a disclaimer: I am not a nuclear physicist, the closest I've come to nuclear power is a trip to \u015awierk and a few too many hours in Factorio. If this post disagrees with nuclear physicists, you should most likely trust them over me. This is not meant to be reference material in any way; it's a knowledge dump of where I'm coming from, so you can understand where I'll go to in later posts.\nAlso, I rarely write these, as I think this kind of message should be implicit in just about everything you read on the Internet; but I feel it's worth the reminder here, and I thought saying this \"out loud\" might stop me from procrastinating on writing this. And now, without further ado...\n\nI shall not bore you with the details of nuclear fission's use for power generations. Many have written on that before, and I don't think I can add much to that. Basically, though, and in great simplification - take the following diagram of, essentially, how much energy, per atomic nucleus, you need to break up an atom:\n  \nnotice that the most stable nuclei are at the \"Fe peak\" (which, coincidentally, you could also call the \"iron hill\", and which, also coincidentally, is where most matter in the universe might reach steady state, and in other words, where time would seem to stand still, which sure puts a new, er, spin on that song). Once you've noticed that, you realize that if you can find some way to split heavy elements into light elements, you would probably release that energy (going by the plot alone, about 1MeV from U238 to stable Fe56) and could harness it. Hit some particularly heavy nuclei with enough neutrons...\nand you've got nuclear power, in a nutshell! Simple, right? Simple to the point of throwing out the actual science. I completely neglected a lot of factors: the fact that you want the neutrons to hit the nuclei slowly enough not to cause a runaway chain reaction chief among them. But this is meant to be a simple view, and that neglect is a tragedy we'll have to live with. Anyway! We all know the pros and cons for nuclear, but, to recap:\n\nNo carbon emissions\nHigh energy density of fuel means logistics become easier\nStable base load capability\nRisk of proliferation of fissile materials\nNuclear waste needs to be stored\n\nThat last point is, actually, usually blown out of proportion. Something I've learned about recently is that all nuclear waste, since the origin of nuclear power until today, stored comfortably, safely and up to proper regulations, would fill a football field. Does that sound like a lot? Does it, still, when I tell you that our Polish Be\u0142chat\u00f3w coal power plant's coal ash storage area takes up 416 ha (which translates to ~590 football fields), and that was already 60% filled up by the 2000?\nYeah, didn't think so.\nBase load\nBut I'd like to focus on the base load, here, and say a little more about that. Base load power is power that must be generated constantly, that is needed by e.g. refrigerators, hospitals, water processing plants, monitoring - processes that cannot really be turned on and off.\nBase load is sort of the antithesis of most renewable energy sources. The most popular are wind and solar, and the conditions attached to them are in the name. They're variable power sources, and while I think they're absolutely great, their variability makes them ill-suited to fill out our entire power demand.\nLet's take a look at an example. Let's go to electricitymap.org and check a few European countries. Note that we'll be, technically, looking at power consumption, rather than production; but it doesn't make that much of a difference. As I'm writing this, it's 17:20 CET, a cold and cloudy Saturday. How's my home country of Poland doing?\nPoland\n\nWell... badly, as usual. We're taking some baby steps in transitioning away from coal as our main power source, and our government hasn't really been all that helpful with promoting the growth of solar or inland wind power. There is talk of adding 6 GW of nuclear power in the next decade(s), but not much to brag about right now.\nThis is, basically, the darkest scenario of \"fossil fuels for base load, little renewable energy\".\nGermany\nLet's go to our western neighbor, Germany. Germany, under the leadership of CDU with major Green influences, has been a big proponent of renewable energy. That's certainly a fine idea, but let's see how it's going for them:\n\nWell, they sure have a lot of capacity (maximum power they could, given optimal conditions, generate) for solar and wind! It's a truly awesome (as in, I'm awed right now) set up - they have more wind power capacity than the entire power capacity of Poland, from what I can see.\nBut as you can see, it's a cloudy winter day and it's not all that windy. So, all that capacity gives them squat Thus, coal and gas usage both spike up, which is less than ideal when you're trying to limit the amount of CO2 that goes up into the atmosphere.\nNote that Germany did have a sizable amount of nuclear power generated, but, under the same CDU/Green leadership, closed them down. I don't want to go into debate on the arguments made by both sides, whether those were made in good faith or not, whether they took all relevant factors into account or not; but, purely from a \"let's stop climate change\" perspective, doesn't look like it's been a good call for them.\nIn contrast, let's go further west:\nFrance\n\nAnd this is the best example I know of what happens, in two similar countries, if one decides to close their nuclear and one does not. Notice how they still burn some natural gas. \"Natural gas\" is a nice name for what is still a fossil fuel, still emits CO2, less so than coal, but still - but even with that, you emit a way less CO2 than Germany. \nTakeaways from a winter day\n\nRenewables are awesome, but they don't work under all conditions. You need that base load power, for sub-optimal conditions which pure renewables don't cover; and the less carbon intensive that base load you can make, the better for you and for the world.\nThere is a clear need for non-CO2-emitting power sources that can produce base load power.\nPeople are closing nuclear power plants and it seems that they're wrong to do so. If it were up to me, I would declare an instant moratorium on any action that harms the continued operation and each and every nuclear power plant - if they're already up, keep them up and don't touch them. Each of them is a vital weapon against climate change.\n\n\nThere is, of course, renewables + storage; but I don't want to make this post too long, so, in short: the technology really isn't there just yet, nor does it scale enough. Eventually, given breakthroughs in material science - could be. But once again, it's not going to be the alpha and omega of power generation; just an element of the energy mix.\n\nSo, this is where we are in 2021.\nNext week, hopefully, I'll be able to tell you - with fewer simplifications! - about an alternative scheme that accomplishes the same goals as current nuclear. Have a great time until then!",
      "tags": "fusion,popular science",
      "url": "https://stanczakdominik.github.io/posts/fusion1/"
    },
    {
      "title": "Now with comments through utteranc.es!",
      "text": "As promised, I've switched the site's comment system from Disqus to\nutteranc.es. It ended up being pretty simple to\ndo in Nikola. If I'm correct about how this is supposed to work, comments on the site will now appear as issues on the site's repo. Of course, I would love to test out how this works :)\n\n\nThe reason I switched away from Disqus was their pretty horrid privacy record, for which a quick websearch will provide ample sources. Utterances is cleverly built around GitHub issues, and while it does require a GitHub account, I think it really is the lesser evil in this case.\nAdmittedly, I do still feel a little queasy about this. While GitHub does provide repositories for various, definitely programming lite repositories, I can't help but think that this takes advantage of a resource given freely in ways that are not entirely as-intended-by-providers.\nTake Travis CI, for example. It was a great service, the first project I'm aware of that worked with a \"completely free online testing, for every commit, for every open source project out there\" model. And, well, they got bought out a few years ago; last year was the year when the new owners (as I suspect) tried to plug the money sink and introduce crippling limits, and a lot of open source projects had to migrate away. I don't know of a single one that still uses Travis, and I fully expect the paid version to go out of business soon.\nTragedy of the commons, a little?\nBut you can't solve all problems everywhere at the same time, or at least I haven't yet found a way to. So, for now, utteranc.es it is!",
      "tags": "blogging,status",
      "url": "https://stanczakdominik.github.io/posts/utterances/"
    },
    {
      "title": "The plan for 2021",
      "text": "And good riddance to 2020!\n\n\nHow things went\nWell, 13 posts throughout the year ain't too bad! I did fall off hard in the latter part of the year, as things went sour in multiple ways.\nLet's see... I had to rapidly switch up my master's thesis topic, due to infeasibility of the previous idea; someone close to me got diagnosed with depression and I landed a support role; and on top of that, our government decided that hey, it's going to be a wonderful idea to take the opportunity and hit women in their reproductive rights while people are stuck at home, nobody's going to come out and protest, right?\nWell... \nthat didn't work out for them.\n\nSo, as it turned out, 2020 also ended up being the year I got tear gassed and chased by fascists for the first time. Who knew.\nWe attended a bunch of those protests - we were able to self-isolate pretty tightly through most of the pandemic, and neither me nor my partner are in a particularly risky group; and we felt that enough was enough. There's a lot of misinformation going on about Antifa on the internets; turns out they're wonderful as a marching band.\nI should share some pictures on here... I'll do that as soon as I figure out how to.\n\nBut hey, for the first time ever I got signs that people actually read and enjoy some of this, which is nice! ;)\n\nAnd there were plenty of bright moments in all this gloom and darkness; I gave my first conference talk (on PlasmaPy!), started limiting and quitting social media, got - I think - better at reading in an organized way, started reconnecting and reaching out to people while dog walking... I can't say 2020 hit me particularly hard, personally. I survived; not everyone was so lucky.\nPlans for 2021\nA while ago, this blog was named \"Plasma non-stop\". Hey, I was going through a Hamilton phase, don't judge. I later changed that name, deciding that hey, I write here mostly about programming; there's little plasma/fusion content and I feel kind of bad about overpromising with the name.\nWell, that's changing. I've been explaining nuclear/fusion/plasma to enough people recently that I feel like it's going to be worth it to write all that down. Have an up-to-date reference I can link to in discussions, so to speak. And besides that... I do love popularising science, and have Thoughts on why that's an important thing to be doing.\nI would also like to make my notes public, once again; I used to use vimwiki, which made that easy, but now, with Joplin, I don't yet know how to do it nicely. Once I do figure it out, they'll be accessible from here.\nThe blog will be going through a visual redesign; I think I'm going to get off Disqus and go with something more opensource/privacy-minded.\nLast but definitely not least, I do have a master's thesis to write, and I expect I'll be able to more reliably keep you all updated on that. More on that soon.\n\nAnd for now... have a better new year! :)",
      "tags": "personal,status,yearly",
      "url": "https://stanczakdominik.github.io/posts/2021/"
    },
    {
      "title": "SymPy for physics homework in 2020",
      "text": "I've been doing my university physics homework in SymPy and Jupyter for a little bit, and I thought I could share a little about the workflow I've developed for it. It might come useful for you.\n\n\n\n\n\n\n\n\nLet's go through with an abridged example of plasma physics homework with that toolset, and then go over the tricks used as they come up. I'll put text that I'd put in the homework solution in quotes.\n\n\n\n\n\n\n\n\nFor electrostatic electron waves in unmagnetized plasma, calculate the correction to the frequency due to the ion motion.\u00b6\n\n\n\n\n\n\n\nWe'll set up our SymPy namespace first. We'll dump it all into the main namespace; not the best habit for libraries, but here we want to write less code, so it'll do.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n%config InteractiveShell.ast_node_interactivity = 'last_expr_or_assign'\nfrom sympy import *\ninit_printing()\n\n\n    \n\n\n\n\n\n\n\nI also added a little IPython magic in there. This is a little behavior I picked up from working in Julia, where the value last expression or assignment in a cell is displayed.\n\n\n\n\n\n\n\n\nWe take the linearized forms in Fourier space of the following fluid equations:\n\nequation of motion, for ions, with temperature\nequation of motion, for electrons, with temperature\nmass conservation for ions\nmass conservation for electrons\nPoisson's equation\n\n\nNow, let's define our variables and the set of equations we care about. Note how we'll liberally use unicode characters to shorten our code. In Jupyter, you can enter $\\omega$ in code cells by simply writing the LaTeX for it and hitting TAB afterwards: \\omega<TAB>\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nm_i, m_e, \u03b3, T, n_0, e, \u03f5 = symbols('m_i m_e gamma T n_0 e varepsilon_0', positive=True)\n\u03c9, k = symbols('omega k', positive=True)\nv_i, v_e, n_i, n_e = symbols('v_i v_e n_i n_e')  # to be understood as fourier modes\n\nequations = [\n    Eq(-I * \u03c9 * m_i * n_0 * v_i, +e * n_0 * E - I * k * \u03b3 * T * n_i),\n    Eq(-I * \u03c9 * m_e * n_0 * v_e, -e * n_0 * E - I * k * \u03b3 * T * n_e),\n    Eq(-I * \u03c9 * n_i + I * k * n_0 * v_i, 0),\n    Eq(-I * \u03c9 * n_e + I * k * n_0 * v_e, 0),\n    Eq(I * k * E , e * (n_i - n_e) / \u03f5)\n]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n$\\displaystyle \\left[ - i m_{i} n_{0} \\omega v_{i} = - i T \\gamma k n_{i} + e e n_{0}, \\  - i m_{e} n_{0} \\omega v_{e} = - i T \\gamma k n_{e} - e e n_{0}, \\  i k n_{0} v_{i} - i n_{i} \\omega = 0, \\  i k n_{0} v_{e} - i n_{e} \\omega = 0, \\  e i k = \\frac{e \\left(- n_{e} + n_{i}\\right)}{\\varepsilon_{0}}\\right]$\n\n\n\n\n\n\n\n\n\n\n\nSee? That's output right there. Neat! Anyway,\n\nWe first solve equations 3 and 4 for the velocities:\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nv_i_e_solutions = solve(equations[2:4], [v_i, v_e])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n$\\displaystyle \\left\\{ v_{e} : \\frac{n_{e} \\omega}{k n_{0}}, \\  v_{i} : \\frac{n_{i} \\omega}{k n_{0}}\\right\\}$\n\n\n\n\n\n\n\n\n\n\n\n\nWe then insert the velocities into the equations of motion:\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nmotion_equations = [eq.subs(v_i_e_solutions) for eq in equations[0:2]]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n$\\displaystyle \\left[ - \\frac{i m_{i} n_{i} \\omega{2}}{k} = - i T \\gamma k n_{i} + e e n_{0}, \\  - \\frac{i m_{e} n_{e} \\omega{2}}{k} = - i T \\gamma k n_{e} - e e n_{0}\\right]$\n\n\n\n\n\n\n\n\n\n\n\n\nFrom this, it is simple to grab the number densities:\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nn_i_e_solutions = solve(motion_equations, (n_i, n_e))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n$\\displaystyle \\left\\{ n_{e} : \\frac{e i e k n_{0}}{T \\gamma k{2} - m_{e} \\omega{2}}, \\  n_{i} : - \\frac{e i e k n_{0}}{T \\gamma k{2} - m_{i} \\omega{2}}\\right\\}$\n\n\n\n\n\n\n\n\n\n\n\n\nAnd now we can insert those back into the final, Poisson's equation:\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \npoisson_eq = equations[-1].subs(n_i_e_solutions).simplify()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n$\\displaystyle e i k = \\frac{e i e{2} k n_{0} \\left(- 2 T \\gamma k{2} + m_{e} \\omega{2} + m_{i} \\omega{2}\\right)}{\\varepsilon_{0} \\left(T \\gamma k{2} - m_{e} \\omega{2}\\right) \\left(T \\gamma k{2} - m_{i} \\omega{2}\\right)}$\n\n\n\n\n\n\n\n\n\n\n\n\nThis we can solve for the $\\omega2$:\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n\u03c92_solutions = solve(poisson_eq, \u03c9**2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n$\\displaystyle \\left[ \\frac{\\left(m_{e} + m_{i}\\right) \\left(T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0}\\right) - \\sqrt{T{2} \\gamma{2} k{4} m_{e}{2} \\varepsilon_{0}{2} - 2 T{2} \\gamma{2} k{4} m_{e} m_{i} \\varepsilon_{0}{2} + T{2} \\gamma{2} k{4} m_{i}{2} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} m_{e}{2} n_{0} \\varepsilon_{0} - 4 T e{2} \\gamma k{2} m_{e} m_{i} n_{0} \\varepsilon_{0} + 2 T e{2} \\gamma k{2} m_{i}{2} n_{0} \\varepsilon_{0} + e{4} m_{e}{2} n_{0}{2} + 2 e{4} m_{e} m_{i} n_{0}{2} + e{4} m_{i}{2} n_{0}{2}}}{2 m_{e} m_{i} \\varepsilon_{0}}, \\  \\frac{\\left(m_{e} + m_{i}\\right) \\left(T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0}\\right) + \\sqrt{T{2} \\gamma{2} k{4} m_{e}{2} \\varepsilon_{0}{2} - 2 T{2} \\gamma{2} k{4} m_{e} m_{i} \\varepsilon_{0}{2} + T{2} \\gamma{2} k{4} m_{i}{2} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} m_{e}{2} n_{0} \\varepsilon_{0} - 4 T e{2} \\gamma k{2} m_{e} m_{i} n_{0} \\varepsilon_{0} + 2 T e{2} \\gamma k{2} m_{i}{2} n_{0} \\varepsilon_{0} + e{4} m_{e}{2} n_{0}{2} + 2 e{4} m_{e} m_{i} n_{0}{2} + e{4} m_{i}{2} n_{0}{2}}}{2 m_{e} m_{i} \\varepsilon_{0}}\\right]$\n\n\n\n\n\n\n\n\n\n\n\n\nWhich is the complete analytical answer. as a sanity check, we can take the limit $m_i \\to \\infty$. Starting with the first one:\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nlimit1 = limit(\u03c92_solutions[0], m_i, oo)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n$\\displaystyle \\frac{T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0} - \\sqrt{T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}}}{2 m_{e} \\varepsilon_{0}}$\n\n\n\n\n\n\n\n\n\n\n\n\nWhich, if we help SymPy a little (it didn't quite notice a pattern in the square root):\n\nThis is, unfortunately, a problem that SymPy tends to run into - this kind of issue needs some tinkering sometimes:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nnumerator, denominator = limit1.as_numer_denom()\nsum(arg.factor() for arg in numerator.args) / denominator\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n$\\displaystyle 0$\n\n\n\n\n\n\n\n\n\n\n\n\nWhich is not particularly interesting, corresponding to no oscillation at all. Applying the same procedure to the other solution:\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nlimit2 = limit(\u03c92_solutions[1], m_i, oo).simplify()\nnumerator, denominator = limit2.as_numer_denom()\nlimit2_corrected = (sum(arg.factor() for arg in numerator.args) / denominator).simplify()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n$\\displaystyle \\frac{T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0}}{m_{e} \\varepsilon_{0}}$\n\n\n\n\n\n\n\n\n\n\n\n\nWhich is the existing result for the electrostatic electron oscillation for warm electrons. Good! We're sane. Now, we have an analytic expression, but if we want to grab just the first order correction, we can apply some trickery.\nLet's define\n$$M = m_e / m_i$$This is a small quantity, and we an expand our $\\omega2$ solutions in a power series in that.\nWe'll then replace $m_i$ in the second $\\omega2$ solution using $M$:\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nMratio = symbols(\"M\", positive=True)\nseries_expansion = (\u03c92_solutions[1]).subs(m_i, m_e / Mratio).expand().series(Mratio, n = 2);\n\n\n    \n\n\n\n\n\n\n\nNote how I'm using ; at the end to stop this from displaying.\n\nWe once again apply some SymPy magic to make the series expansion bearable for the eyes:\n\nThis took a bunch of StackOverflow searching, which, if you're on a deadline, may admittedly not be the most productive thing to do:\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nsimplified_series_expansion = collect(series_expansion.removeO(), Mratio, simplify);\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n$\\displaystyle \\frac{M \\left(T{3} \\gamma{3} k{6} \\varepsilon_{0}{3} + 3 T{2} e{2} \\gamma{2} k{4} n_{0} \\varepsilon_{0}{2} - T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} \\sqrt{T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}} + 3 T e{4} \\gamma k{2} n_{0}{2} \\varepsilon_{0} - 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} \\sqrt{T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}} + e{6} n_{0}{3} + e{4} n_{0}{2} \\sqrt{T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}}\\right)}{2 m_{e} \\varepsilon_{0} \\left(T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}\\right)} + \\frac{T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0} + \\sqrt{T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}}}{2 m_{e} \\varepsilon_{0}}$\n\n\n\n\n\n\n\n\n\n\n\n\nApplying some further simplification for the square root:\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nsquareroot = numer(simplified_series_expansion.args[0]).args[0]\nvery_simplified_series_expansion = simplified_series_expansion.subs(squareroot, squareroot.factor()).simplify()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n$\\displaystyle \\frac{M e{4} n_{0}{2} + T{2} \\gamma{2} k{4} \\varepsilon_{0}{2} + 2 T e{2} \\gamma k{2} n_{0} \\varepsilon_{0} + e{4} n_{0}{2}}{m_{e} \\varepsilon_{0} \\left(T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0}\\right)}$\n\n\n\n\n\n\n\n\n\n\n\n\nAnd we arrive at the known and expected first order (in $m_e/m_i$) correction, substituting our definition of $M$ back in here:\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nion_correction = (very_simplified_series_expansion - limit2_corrected).simplify().subs(Mratio, m_e / m_i)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n$\\displaystyle \\frac{e{4} n_{0}{2}}{m_{i} \\varepsilon_{0} \\left(T \\gamma k{2} \\varepsilon_{0} + e{2} n_{0}\\right)}$\n\n\n\n\n\n\n\n\n\n\n\nAnd that's that!\n\n\n\n\n\n\n\nResults and thoughts\u00b6For some pros and cons:\nPositives\u00b6\nYou get to skip out on algebraic errors.\nYou get beautiful LaTeX display, at no effort, for each step. This helps a ton if your handwriting is dreadful, like mine is.\nYou can resort to first-order corrections etc if you need a check, but you actually get full analytical solutions a lot of the time.\n\nNeutrals\u00b6\nYou really need to watch your assumptions when you define your variables, as SymPy is pretty conservative with its simplifications. This is, of course, both a blessing and a curse.\nThe learning curve is a bit steep, but you can accomplish plenty with just a little knowledge; for the rest, you can google. I've been putting off picking up its physics subpackage for way too long now.\n\nNegatives\u00b6\nThere are kinks, as you undoubtedly saw; it can be tough to tell SymPy \"look at that square root! Look at it!\". It'll miss some seemingly obvious stuff, and it can take a fair bit of googling to get it to work properly.\nRuntimes can get steep-ish; it's not really suited for live work. I'll %timeit the two lines that caused a little trouble here. Admittedly, symbolic math is hard, so I'm not too surprised. Turns out I could only timeit the first line in reasonable time...\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n%timeit series_expansion = (\u03c92_solutions[1]).subs(m_i, m_e / Mratio).expand().series(Mratio, n = 2);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n24.3 s \u00b1 351 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\n\n\n\n\n\n\n\n\n\n\nStill, all in all, I think it has plenty of potential. If it's not there yet, it's getting there! I'm likely to keep using it and if I come up with any further handy tools, I'll get back here.",
      "tags": "python,sympy",
      "url": "https://stanczakdominik.github.io/posts/sympy-for-physics-homework-in-2020/"
    },
    {
      "title": "Anger, disinformation, populism, the sorry state of the world right now... and truth",
      "text": "This post should be seen through the lens of self therapeutic writing, as I\nangrily work through a few ideas on my mind.\n\nAnd now, for something completely different.\n\n\n\n\nA colleague posted a link to a Breitbart story on Discord, and it got me\nthinking.\nThe story in question concerned Facebook, Twitter and Google allegedly\ncensoring a viral video of doctors speaking out about alleged disinformation\nabout COVID-19.\nYou've probably heard all about that video by now - how the silly thing here is\nthat the actual disinformation was... that exact video.\nIt's funny how, if you're being criticized by Breitbart, you're probably doing\nsomething right with your life - and I honestly believe that the companies\nmentioned above did the right thing by taking the video off. \nI promptly mentioned that in a \"why the hell are you posting Breitbart crap\nhere\" and that would have been the end of it, but I keep thinking about this\nwhole issue.\n\nBy now, I don't think there's any actual doubt among reasonable people that\nthere's something deeply wrong with the world right now. This wrongness finds\nmany expressions - Breitbart, the rise of populism, PiS here in Poland and\nTrump in the States, Brexit and such being the most visible. Related are\nantivaxxers, flat-earthers, people openly violating mask wearing restrictions\nand COVID-19 quarantine. Even more troubling are those issues that lurk behind,\nin the shadows and poised to deal critical damage to our entire existence -\nglobal warming, the growing disconnect between science and the actual decisions\nbeing made on behalf of us all, growing inequality, human rights eroding...\nAnd I'm starting to think that you can't consistently fight one of them without\nfighting all of them.\nBreitbart has, time and time again, proven itself to have a loose relationship\nwith truth. To what end but the pathological, I don't know. Would you risk\ndistorting the world view of so many, with all the consequences that entails,\nfor ad revenue money? I wouldn't, and perhaps that's what separates \"us\" and\n\"them\".\n\nI used to think a scientist should not see the world in an us and them\nperspective. I think of myself as a scientist, regardless of whether or not my\nimpostor syndrome suggests that I'm a programmer who thinks he's a scientist\nsometimes.\n(If you've heard me say that, you've met my impostor syndrome, and I'm sure\nit was happy to meet you.)\nI used to think the job of the scientist was to slowly, meticulously pick\nbetween different hypotheses by probing their system of interest with carefully\nthought out questions. Of course, that might have been true in an ideal world.\nHow are you liking 2020 as an instance of one?\nOn the I don't think the issue at hand requires all of scientists' skill at\nsorting through different hypotheses.\nThe choices here are truth and untruth. Truth and lies. Truth and, as it is\ncommonly know, bullshit.\n\n\nThe first duty of every Starfleet officer is to the Truth! Scientific truth,\nor historical truth, or personal truth.\n\nWhen you look at the common factors between Breitbart, PiS, Trump, Brexiteers,\nantivaxxers, flat-earthers, anti-mask idiots, organized religion etc., one\ncommonality that pops out is the propensity to bullshit. A complete disconnect\nbetween their statements and reality.\nAnd I think that's the issue we need to start addressing. The difference here\nis between branches in history that lead to actual self destruction of\nhumanity, and those where we might just be able to save ourselves.\nThis is a job for which scientists - anyone with an interest in science, really\n- for which we are uniquely suited. Science is the way we figure things out and\nthe only reliable method we have right now that actually reliably produces\napproximation closer to truth than our base states. We know how it works.  What\nwe - in a lot of cases - haven't been doing is conveying that knowledge to the\nwider public. Nobody's going to do that in our place, so I do think it's our\nresponsibility.\nSo I don't think it's on us to give Breitbart a fair and visible platform.\nThey're adept at finding that themselves and don't need our help. We've got\nbigger issues to address, and the time we have is limited. Let's spend that\ntime fighting for Truth, not worrying whether we're dealing fairly with those\nwho have firmly planted themselves on the other side for whatever reason.\nLet's get to it like our lives depended on it. They do.",
      "tags": "status,world",
      "url": "https://stanczakdominik.github.io/posts/anger-disinformation-populism-truth/"
    },
    {
      "title": "Julia - the magic of composability",
      "text": "I've been getting into the Julia ecosystem a little (turns out there's a lot of tutorials you get to watch when doing the dishes), and I've been meaning to get some hands on experience. Today, I'd like to reproduce Mos\u00e8 Giordano's gist example, which I first saw in this JuliaCon talk by Stefan Karpinski. I think it really illustrates Alan Edelman's points on Julia's composability from the talk I linked last time.\nWhat we'll do today is combine a simple example of an ODE solution with an uncertainty package, and see how easy or difficult it becomes using Julia.\n\n\n\n\n\n\n\n\nDifferential equations\u00b6Let's try to use Julia's DifferentialEquations.jl package to solve the simple system:\n\n\n\n\n\n\n\n$$\\frac{du}{dt} = \\alpha u$$\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nusing DifferentialEquations\n\n\u03b1 = 1.01\nu0 = 1/2             # initial value\ntspan = (0.0, 1.0)   # range of values\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n(0.0, 1.0)\n\n\n\n\n\n\n\n\n\n\n\nSimple enough! Let's define the derivative function. Note that it seems like the derivative's signature as accepted by DifferentialEquations.ODEProblem has changed since Mos\u00e8 Giordano wrote his gist.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nf(u, p, t) = \u03b1 * u\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nf (generic function with 1 method)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nprob = ODEProblem(f, u0, tspan)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\nODEProblem with uType Float64 and tType Float64. In-place: false\ntimespan: (0.0, 1.0)\nu0: 0.5\n\n\n\n\n\n\n\n\n\n\n\nThese explicit reprs are pretty darn cool, to be honest. Let's get to solving it, as seen in the example:\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nsol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\nretcode: Success\nInterpolation: specialized 4th order \"free\" interpolation\nt: 17-element Array{Float64,1}:\n 0.0\n 0.012407826196308189\n 0.04250125658161484\n 0.08178046092620397\n 0.12887379439591745\n 0.18409790041494495\n 0.24627449404376492\n 0.3147928829168652\n 0.38859624030646006\n 0.46686165530000767\n 0.5487159959104151\n 0.6334345501790717\n 0.7203628343994752\n 0.8089578125953629\n 0.8987653123338385\n 0.9894159840028138\n 1.0\nu: 17-element Array{Float64,1}:\n 0.5\n 0.5063053789114713\n 0.5219304636285521\n 0.5430526974619144\n 0.5695067474049924\n 0.6021743238204087\n 0.6412025113764279\n 0.687147458356146\n 0.7403257567387032\n 0.8012222468290549\n 0.8702767411264873\n 0.9480213225441934\n 1.0350184806191094\n 1.131902913018661\n 1.239373221095387\n 1.3582036259485553\n 1.3728005076225749\n\n\n\n\n\n\n\n\n\n\n\nAnd now we can use Plots.jl to plot the solution. I adapted the docs for DifferentialEquations to do that.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nusing Plots\nplot(sol,linewidth=5,title=\"Solution to the linear ODE with a thick line\",\n     xaxis=\"Time (t)\",yaxis=\"u(t)\",label=\"Numerical solution\")\nplot!(sol.t, t->0.5*exp(1.01t),lw=3,ls=:dash,label=\"True Solution!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd that's all neat. On to the main course!\n\n\n\n\n\n\n\nOnce more, with uncertainty!\u00b6For convenience (and practice!), we'll wrap our previous computation in a function:\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfunction compute(\u03b1, u0, tspan)\n    f(u, p, t) = \u03b1 * u\n    noisy_prob = ODEProblem(f, u0, tspan)\n    noisy_sol = solve(noisy_prob, Tsit5(), reltol=1e-8, abstol=1e-8)\n    noisy_sol             # Julia returns the last statement in a function\nend\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\ncompute (generic function with 1 method)\n\n\n\n\n\n\n\n\n\n\n\nAnd now we'll add Measurements.jl and input a slightly noisy value for the $\\alpha$ constant, using $\\pm$ (typed in Jupyter as \\pm<TAB>):\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nusing Measurements\nnoisy_sol =compute(1.01 \u00b1 0.1,\n    1/2 \u00b1 0,  # this had to be the same type, or we'd get an exception:\n    (0.0, 1.0)\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nretcode: Success\nInterpolation: specialized 4th order \"free\" interpolation\nt: 17-element Array{Float64,1}:\n 0.0\n 0.012407826196308189\n 0.042501278333560696\n 0.0817804940926822\n 0.12887384498704435\n 0.18409796286152927\n 0.24627457447456758\n 0.31479297816557983\n 0.3885963515160237\n 0.4668617724420117\n 0.5487161305960653\n 0.6334346972152323\n 0.7203630000154827\n 0.808957991167541\n 0.8987655040395068\n 0.9894161889652783\n 1.0\nu: 17-element Array{Measurement{Float64},1}:\n     0.5 \u00b1 0.0\n 0.50631 \u00b1 0.00063\n  0.5219 \u00b1 0.0022\n  0.5431 \u00b1 0.0044\n  0.5695 \u00b1 0.0073\n   0.602 \u00b1 0.011\n   0.641 \u00b1 0.016\n   0.687 \u00b1 0.022\n    0.74 \u00b1 0.029\n   0.801 \u00b1 0.037\n    0.87 \u00b1 0.048\n   0.948 \u00b1 0.06\n   1.035 \u00b1 0.075\n   1.132 \u00b1 0.092\n    1.24 \u00b1 0.11\n    1.36 \u00b1 0.13\n    1.37 \u00b1 0.14\n\n\n\n\n\n\n\n\n\n\n\nAnd you can already see the uncertainties propagate onwards! The further in time, the more effect that slight discrepancy in the value of $\\alpha$ (or $R_0$, these days...) will have. That makes sense!\nThe amazing thing is that I can stick noisy_sol right into the plot command of Plots.jl:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nplot(noisy_sol, lab=\"Numerical with uncertainty\",\n     linewidth=5, xaxis=\"Time (t)\",yaxis=\"u(t)\",\n)\nplot!(sol.t, t->0.5*exp(1.01t),lw=3,ls=:dash,label=\"True Solution!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJust like that! And that's just a little magical to me.\nWe can also put an uncertainty on the initial condition - we rarely know those with perfect accuracy.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nnoisy_sol =compute(1.01,   # interestingly the constant can be a \"precise\" float\n    1/2 \u00b1 0.3,\n    (0.0, 1.0)\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\nretcode: Success\nInterpolation: specialized 4th order \"free\" interpolation\nt: 17-element Array{Float64,1}:\n 0.0\n 0.012407826196308189\n 0.042501278333560696\n 0.0817804940926822\n 0.12887384498704435\n 0.18409796286152927\n 0.24627457447456758\n 0.31479297816557983\n 0.3885963515160237\n 0.4668617724420117\n 0.5487161305960653\n 0.6334346972152323\n 0.7203630000154827\n 0.808957991167541\n 0.8987655040395068\n 0.9894161889652783\n 1.0\nu: 17-element Array{Measurement{Float64},1}:\n  0.5 \u00b1 0.3\n 0.51 \u00b1 0.3\n 0.52 \u00b1 0.31\n 0.54 \u00b1 0.33\n 0.57 \u00b1 0.34\n  0.6 \u00b1 0.36\n 0.64 \u00b1 0.38\n 0.69 \u00b1 0.41\n 0.74 \u00b1 0.44\n  0.8 \u00b1 0.48\n 0.87 \u00b1 0.52\n 0.95 \u00b1 0.57\n 1.04 \u00b1 0.62\n 1.13 \u00b1 0.68\n 1.24 \u00b1 0.74\n 1.36 \u00b1 0.81\n 1.37 \u00b1 0.82\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nplot(noisy_sol, lab=\"Numerical with uncertainty\",\n     linewidth=5, xaxis=\"Time (t)\",yaxis=\"u(t)\",\n)\nplot!(sol.t, t->0.5*exp(1.01t),lw=3,ls=:dash,label=\"True Solution!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also combine the uncertainties to our heart's content! I'm choosing to run this with a very large uncertainty on the constant, to illustrate the point.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nnoisy_sol =compute(1.01 \u00b1 0.8,\n    1/2 \u00b1 0.3,\n    (0.0, 1.0)\n    )\nplot(noisy_sol, lab=\"Numerical with uncertainty\",\n     linewidth=5, xaxis=\"Time (t)\",yaxis=\"u(t)\",\n)\nplot!(sol.t, t->0.5*exp(1.01t),lw=3,ls=:dash,label=\"True Solution!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComposability\u00b6And here's the point I wanted to make.\nNobody wrote uncertainty support for DifferentialEquations.jl. Here's a search for references to measurements in that package - nil. It just popped out of Julia's composable type system.\nThe plotting part is admittedly custom and can be found here. But still - imagine, in Python, combining scipy.integrate.odeint, uncertainties and maybe even astropy.units or pint, or what have you.\nHere it \"just works\". Magic!\nActually, speaking of unit packages...\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nusing Unitful\n1u\"s\"  3\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n1 s3\n\n\n\n\n\n\n\n\n\n\n\nAnd if we try...\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n0.5u\"m\" \u00b1 40u\"cm\"\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n0.5 \u00b1 0.4 m\n\n\n\n\n\n\n\n\n\n\n\nWell, maybe...\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n1.01u\"1/s\" \u00b1 0.1u\"1/s\"\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n1.01 \u00b1 0.1 s-1\n\n\n\n\n\n\n\n\n\n\n\nMaybe, maybe, maybe...\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nnoisy_sol =compute(1.01u\"1/s\",\n    0.5u\"m\" \u00b1 40u\"cm\",  # I had to cheat a little here\n    (0.0u\"s\", 1.0u\"s\"),\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nMethodError: no method matching Float64(::Measurement{Float64})\nClosest candidates are:\n  Float64(::Real, !Matched::RoundingMode) where T<:AbstractFloat at rounding.jl:200\n  Float64(::T) where T<:Number at boot.jl:715\n  Float64(!Matched::Int8) at float.jl:60\n  ...\n\nStacktrace:\n [1] convert(::Type{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}}, ::Quantity{Measurement{Float64},\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}) at /home/dominik/.julia/packages/Unitful/MOEUx/src/conversion.jl:110\n [2] ode_determine_initdt(::Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}}, ::Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}, ::Float64, ::Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}, ::Float64, ::Float64, ::typeof(DiffEqBase.ODE_DEFAULT_NORM), ::ODEProblem{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}},false,DiffEqBase.NullParameters,ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::OrdinaryDiffEq.ODEIntegrator{Tsit5,false,Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Nothing,Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},ODESolution{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1,Array{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1},Nothing,Nothing,Array{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},1},Array{Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},1},ODEProblem{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}},false,DiffEqBase.NullParameters,ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},Tsit5,OrdinaryDiffEq.InterpolationData{ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1},Array{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},1},Array{Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}},DiffEqBase.DEStats},ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DataStructures.LessThan},DataStructures.BinaryHeap{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},Measurement{Float64},Nothing,OrdinaryDiffEq.DefaultInit}) at /home/dominik/.julia/packages/OrdinaryDiffEq/NsugH/src/initdt.jl:148\n [3] auto_dt_reset! at /home/dominik/.julia/packages/OrdinaryDiffEq/NsugH/src/integrators/integrator_interface.jl:297 [inlined]\n [4] handle_dt!(::OrdinaryDiffEq.ODEIntegrator{Tsit5,false,Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Nothing,Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DiffEqBase.NullParameters,Float64,Float64,Float64,Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},ODESolution{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1,Array{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1},Nothing,Nothing,Array{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},1},Array{Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},1},ODEProblem{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}},false,DiffEqBase.NullParameters,ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem},Tsit5,OrdinaryDiffEq.InterpolationData{ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Array{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},1},Array{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},1},Array{Array{Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},1},1},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64}},DiffEqBase.DEStats},ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},OrdinaryDiffEq.Tsit5ConstantCache{Float64,Float64},OrdinaryDiffEq.DEOptions{Float64,Float64,Float64,Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},typeof(DiffEqBase.ODE_DEFAULT_NORM),typeof(LinearAlgebra.opnorm),CallbackSet{Tuple{},Tuple{}},typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN),typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE),typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK),DataStructures.BinaryHeap{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DataStructures.LessThan},DataStructures.BinaryHeap{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},DataStructures.LessThan},Nothing,Nothing,Int64,Tuple{},Tuple{},Tuple{}},Quantity{Measurement{Float64},\ud835\udc0b \ud835\udc13-1,Unitful.FreeUnits{(m, s-1),\ud835\udc0b \ud835\udc13-1,nothing}},Measurement{Float64},Nothing,OrdinaryDiffEq.DefaultInit}) at /home/dominik/.julia/packages/OrdinaryDiffEq/NsugH/src/solve.jl:450\n [5] __init(::ODEProblem{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}},false,DiffEqBase.NullParameters,ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Bool, callback::Nothing, dense::Bool, calck::Bool, dt::Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}, dtmin::Nothing, dtmax::Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Float64, reltol::Float64, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /home/dominik/.julia/packages/OrdinaryDiffEq/NsugH/src/solve.jl:413\n [6] #__solve#360 at /home/dominik/.julia/packages/OrdinaryDiffEq/NsugH/src/solve.jl:4 [inlined]\n [7] solve_call(::ODEProblem{Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}},Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}},false,DiffEqBase.NullParameters,ODEFunction{false,var\"#f#9\"{Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}},LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},DiffEqBase.StandardODEProblem}, ::Tsit5; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol,Float64,Tuple{Symbol,Symbol},NamedTuple{(:reltol, :abstol),Tuple{Float64,Float64}}}) at /home/dominik/.julia/packages/DiffEqBase/uSSHl/src/solve.jl:92\n [8] #solve_up#459 at /home/dominik/.julia/packages/DiffEqBase/uSSHl/src/solve.jl:114 [inlined]\n [9] #solve#458 at /home/dominik/.julia/packages/DiffEqBase/uSSHl/src/solve.jl:102 [inlined]\n [10] compute(::Quantity{Float64,\ud835\udc13-1,Unitful.FreeUnits{(s-1,),\ud835\udc13-1,nothing}}, ::Quantity{Measurement{Float64},\ud835\udc0b,Unitful.FreeUnits{(m,),\ud835\udc0b,nothing}}, ::Tuple{Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}},Quantity{Float64,\ud835\udc13,Unitful.FreeUnits{(s,),\ud835\udc13,nothing}}}) at ./In[6]:4\n [11] top-level scope at In[15]:1\n\n\n\n\n\n\n\n\n\n\nAaaaand I guess that's our weekly reminder that Julia's multiple dispatch system is not magic, and doesn't solve every problem for us!\nIf you do have an idea about how to actually run that, please say so in the comments! In the meantime, I hope you enjoyed this short read! :)\n\n\n\n\n\n\n\n{\"state\": {}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "julia",
      "url": "https://stanczakdominik.github.io/posts/julia-composability/"
    },
    {
      "title": "Short updates: Bayes, Master's, PlasmaPy, Protoss, Julia",
      "text": "No real new material today, as I'm still in the thick of it. A few updates:\n\n\n\nThe Bayesian analysis of starcraft data is a bit stuck. I've been trying to\nfigure out adding time dependence by using gaussian processes. My first real\nreport note from that is... They're difficult. I mean, they're awesome and\npretty simple conceptually, but picking priors for them is tough, at least for\nme and at least for now. I do have some reading to do, there.\nThere are also a few more projects I want to do in that space. Adding maps to\nthe split race model is the easiest on that part, but I feel like I don't yet\nknow enough about model comparison to competently do that. I'm working on\namending that, though.\n\nMy master's thesis is slowly seeing some progress! I've used\nhypothesis for testing some of the more\ndubious parts of code and it's helped me find a good number of bugs. I might\nhave more on that to report on in the near future.\n\nWe're going to be releasing PlasmaPy 0.4 soon ish! We're\nopting for more time based regular updates rather than based on cool new\nfeatures, which are in the works, but not yet for this release. There's been\na bunch of new stuff since January, though!\n\nIn procrastinatory news, I've been meaning to contribute back to the Starcraft\n2 Protoss community a little more, and I figured I'd launch a website to\naggregate current quality educational content in an open and peer reviewed\nmanner. I'd link it here, but I'm going to be changing its URL and name - I\ninitially wanted it to be tightly coupled to the r/AllThingsProtoss\nsubreddit and Discord, but...\nlet's just say not everyone is as much of a fan of open source culture as I am,\nso the website is going to be standalone. I'll still need to work on gathering\nreviewers and contributors.\n\nJulia the programming language is really, really, really cool. I've been\nthinking about it more since (e)attending a seminar by Alan Edelman and, if I\nwasn't flooded by projects already, I'd be writing something up for this place\nalready. For now, three recommendations:\n\nThis anecdote from the seminar is amazing and really stuck with me:  \n\n\n\n\nThis example from a great talk on Julia is pretty darn cool:  \n\n\n\n\nAnd this write-up on comparing different ODE solver\n   packages\n   has made me give up on using Python for that. I've been trying to use\n   scipy's odeint to efficiently solve stuff for a while now; but one thing I\n   hadn't considered is that defining derivatives through Python functions and\n   then having your solver call them the myriad of times required to integrate\n   an ODE might... not be the best idea. PV has in fact called it the worst\n   case scenario for python, and when you think about it, it makes sense,\n   doesn't it?\n\nAs a bonus, diffeqpy is a workaround for\nthat python problem! So I'm not abandoning Python as a high level language, but\nthe numerics I'll probably do in Julia from now on.\n\nAnd that's all this week; thanks for reading!",
      "tags": "bayes,julia,masters thesis,plasmapy,status",
      "url": "https://stanczakdominik.github.io/posts/short-updates-bayes-masters-plasmapy-protoss-julia/"
    },
    {
      "title": "Parsing SC2 replays for later analysis",
      "text": "I've realized I owe you an explanation on how to parse your own SC2 replays for the series of posts on Bayesian SC2 replay data analysis. Let's go through it here!\n\nWe'll use ZephyrBlu's zephyrus-sc2-parser library, which you can download via pip install zephyrus-sc2-parser.\n\n\n\n\n\n\n\nParsing the replays\u00b6This process currently dumps a boatload of warnings and exceptions, so I'm choosing to wrap the former in a try-except and simply ignore those, and ignore the thrown warnings with warnings.simplefilter(\"ignore\"). Feel free to disable them on your end; but don't say I didn't warn you!\nNote that this process takes a while, and we'll have to do some wrangling later on, so it makes more sense to parse all the replays first and have them all in memory for later. It might fail for larger datasets.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pathlib\nimport warnings\n\nimport tqdm.auto as tqdm\nimport zephyrus_sc2_parser\n\nREPLAY_DIRECTORY = \"/home/dominik/Links/SC2Reps\"\nPLAYER_NAME = \"Perfi\"\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    replays = list(pathlib.Path(REPLAY_DIRECTORY).glob(\"*.SC2Replay\"))\n    parsed_replays = {}\n    for replay_file in tqdm.tqdm(replays):\n        try:\n            replay = zephyrus_sc2_parser.parse_replay(replay_file, local=True)\n        except Exception as e:\n            print(f\"Failed for {replay_file}: {e}\")\n            continue\n        parsed_replays[replay_file] = replay\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(FloatProgress(value=0.0, max=506.0), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\nFailed for /home/dominik/Links/SC2Reps/Ephemeron LE (27).SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/Triton LE (4).SC2Replay: local variable 'game_length' referenced before assignment\nFailed for /home/dominik/Links/SC2Reps/Winter's Gate LE (4).SC2Replay: local variable 'game_length' referenced before assignment\nFailed for /home/dominik/Links/SC2Reps/Zen LE (4).SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/World of Sleepers LE (48).SC2Replay: local variable 'game_length' referenced before assignment\nFailed for /home/dominik/Links/SC2Reps/Whitewater Line LE.SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/Bone Temple LE.SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/Acropolis LE (19).SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/World of Sleepers LE (15).SC2Replay: 'NoneType' object has no attribute 'race'\nFailed for /home/dominik/Links/SC2Reps/Ephemeron LE (25).SC2Replay: 'NoneType' object has no attribute 'race'\n\n\n\n\n\n\n    \n\n\n\n--- Logging error ---\nTraceback (most recent call last):\n  File \"/home/dominik/.local/lib/python3.8/site-packages/zephyrus_sc2_parser/parser.py\", line 154, in parse_replay\n    players = create_players(player_info, events)\n  File \"/home/dominik/.local/lib/python3.8/site-packages/zephyrus_sc2_parser/utils.py\", line 68, in create_players\n    new_player.race = non_english_races[new_player.race.encode('utf-8')]\nKeyError: b''\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/logging/__init__.py\", line 1081, in emit\n    msg = self.format(record)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/logging/__init__.py\", line 925, in format\n    return fmt.format(record)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/logging/__init__.py\", line 664, in format\n    record.message = record.getMessage()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/logging/__init__.py\", line 369, in getMessage\n    msg = msg % self.args\nTypeError: not all arguments converted during string formatting\nCall stack:\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/runpy.py\", line 193, in _run_module_as_main\n    return _run_code(code, main_globals, None,\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/runpy.py\", line 86, in _run_code\n    exec(code, run_globals)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel_launcher.py\", line 16, in <module>\n    app.launch_new_instance()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/traitlets/config/application.py\", line 664, in launch_instance\n    app.start()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/kernelapp.py\", line 583, in start\n    self.io_loop.start()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/platform/asyncio.py\", line 149, in start\n    self.asyncio_loop.run_forever()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/asyncio/base_events.py\", line 570, in run_forever\n    self._run_once()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/asyncio/base_events.py\", line 1859, in _run_once\n    handle._run()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/asyncio/events.py\", line 81, in _run\n    self._context.run(self._callback, *self._args)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/ioloop.py\", line 690, in <lambda>\n    lambda f: self._run_callback(functools.partial(callback, future))\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/ioloop.py\", line 743, in _run_callback\n    ret = callback()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/gen.py\", line 787, in inner\n    self.run()\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/gen.py\", line 748, in run\n    yielded = self.gen.send(value)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/kernelbase.py\", line 361, in process_one\n    yield gen.maybe_future(dispatch(*args))\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/gen.py\", line 209, in wrapper\n    yielded = next(result)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/kernelbase.py\", line 268, in dispatch_shell\n    yield gen.maybe_future(handler(stream, idents, msg))\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/gen.py\", line 209, in wrapper\n    yielded = next(result)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n    self.do_execute(\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/tornado/gen.py\", line 209, in wrapper\n    yielded = next(result)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/ipkernel.py\", line 300, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/ipykernel/zmqshell.py\", line 536, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2857, in run_cell\n    result = self._run_cell(\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 2886, in _run_cell\n    return runner(coro)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/async_helpers.py\", line 68, in _pseudo_sync_runner\n    coro.send(None)\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3062, in run_cell_async\n    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3254, in run_ast_nodes\n    if (await self.run_code(code, result,  async_=asy)):\n  File \"/progs/miniconda3/envs/py38/lib/python3.8/site-packages/IPython/core/interactiveshell.py\", line 3331, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-1-d51f8f2ea671>\", line 16, in <module>\n    replay = zephyrus_sc2_parser.parse_replay(replay_file, local=True)\n  File \"/home/dominik/.local/lib/python3.8/site-packages/zephyrus_sc2_parser/parser.py\", line 162, in parse_replay\n    logging.critical('A KeyError error occured:', error, 'unreadable file info')\nMessage: 'A KeyError error occured:'\nArguments: (KeyError(b''), 'unreadable file info')\n\n\n\n\n\n\n    \n\n\n\nFailed for /home/dominik/Links/SC2Reps/Eternal Empire LE (20).SC2Replay: local variable 'game_length' referenced before assignment\n\n\n\n\n\n\n\n\n\n\n\n\nAnd I have absolutely no idea how to explain the Logging error. We aren't missing out on many games, though:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nprint(f\"We successfully parsed {len(parsed_replays)} replays, which is {len(parsed_replays)/len(replays):.2%} of the total!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nWe successfully parsed 464 replays, which is 97.68% of the total!\n\n\n\n\n\n\n\n\n\n\n\nThat was the first step; now, we continue to...\n\n\n\n\n\n\n\nPull the interesting data\u00b6Note that this mostly handles 1v1 data; it might be a bit more difficult to filter out stuff such as coop and team games. I would probably recommend filtering them out at an earlier stage, by filename.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# utility function to get our own player ID\ndef grab_player_id(players, name = PLAYER_NAME):\n    for key, player in players.items():\n        if player.name == name:\n            break        \n    else:\n        key = None\n    return key\n\n\nresults = []\nfor replay_file, replay in parsed_replays.items():\n    players, timeline, engagements, summary, meta = replay\n    if all(item is None for item in replay):\n        print(f\"Failed to parse for {replay_file}\")\n        continue\n    my_id = grab_player_id(players, PLAYER_NAME)\n    enemy_id = 1 if (my_id == 2) else 2\n    \n    results.append(\n        dict(\n            replay_file = replay_file,\n            time_played_at = meta['time_played_at'],\n            win = meta[\"winner\"] == my_id,\n            \n            race = players[my_id].race,\n            enemy_race = players[enemy_id].race,\n            \n            mmr = summary['mmr'][my_id],\n            \n            enemy_mmr = summary['mmr'][enemy_id],\n            enemy_nickame = players[enemy_id].name,\n            \n            map_name = meta[\"map\"],\n            duration = meta['game_length'],\n        )\n    )\n\nprint(f\"We successfully pulled data out of {len(results)} replays, which is {len(results)/len(replays):.2%} of the total!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nFailed to parse for /home/dominik/Links/SC2Reps/Ephemeron LE (24).SC2Replay\nFailed to parse for /home/dominik/Links/SC2Reps/Malwarfare.SC2Replay\nWe successfully pulled data out of 462 replays, which is 97.26% of the total!\n\n\n\n\n\n\n\n\n\n\n\nWhat I'm showing you here is the end result, but if you wanted to add some other metrics, you might be interested in the answer to:\n\n\n\n\n\n\n\nHow do I pick the interesting data?\u00b6We'll use the entries from the last replay. Most of them are dictionaries, so it's pretty easy to get access to their contents:\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \nmeta\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[42]:\n\n\n\n\n\n{'time_played_at': datetime.datetime(2020, 4, 30, 18, 34, 1, tzinfo=<UTC>),\n 'map': 'Nightshade LE',\n 'game_length': 1040,\n 'winner': 2}\n\n\n\n\n\n\n\n\n\n\n\nIf you run this notebook locally, IPython has a nice widget to browse this data. If you're reading this on the website, you'll probably unfortunately see only <IPython.core.display.JSON object>:\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nfrom IPython.display import JSON\nJSON(summary)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n<IPython.core.display.JSON object>\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[44]:\n\n    \nsummary.keys()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[44]:\n\n\n\n\n\ndict_keys(['mmr', 'avg_resource_collection_rate', 'avg_unspent_resources', 'apm', 'spm', 'resources_lost', 'resources_collected', 'workers_produced', 'workers_killed', 'workers_lost', 'supply_block', 'sq', 'avg_pac_per_min', 'avg_pac_action_latency', 'avg_pac_actions', 'avg_pac_gap', 'race'])\n\n\n\n\n\n\n\n\n\n\n\nAs you can (possibly) see, there's plenty of interesting data that I might use sometime. Beyond what we're already pulling out:\n\nAverage resource collection rate\nthe spending quotient, a (possibly flawed) measure of macro skill\ntime spent supply blocked\nworkers lost, killed and produced\nper-race statistics:\nOrbital Command energy efficiency and idle time\nlikewise for Nexii (Nexuses?)\nSplash efficiency for Protoss\n\n\n\nI probably wouldn't use Bayesian inference on all of them, though - it gets hard to come up with a model that involves all of them. Maybe a random forest model would be nice?\nEither way, once we've found something interesting it's simple to access the fields:\n\n\n\n\n\n\nIn\u00a0[45]:\n\n    \nsummary['apm'][1]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[45]:\n\n\n\n\n\n151.0\n\n\n\n\n\n\n\n\n\n\n\nIt's a bit more difficult to pull data out of players, as there are dedicated objects storing the data there; we can still make do:\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \nclean_data = {}\nfor player_id, player in players.items():\n    d = player.__dict__.copy()\n    # we have to drop some data that contains custom objects:\n    for dropped_key in [\"current_selection\", \"objects\", \"control_groups\", \"pac_list\", \"current_pac\", \"active_ability\"]:\n        d.pop(dropped_key)\n    clean_data[player_id] = d\nJSON(clean_data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[46]:\n\n\n\n\n\n<IPython.core.display.JSON object>\n\n\n\n\n\n\n\n\n\n\n\nI'll showcase a few:\n\n\n\n\n\n\nIn\u00a0[48]:\n\n    \nplayers[2].upgrades\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[48]:\n\n\n\n\n\n['WarpGateResearch',\n 'ExtendedThermalLance',\n 'Charge',\n 'ProtossGroundWeaponsLevel1',\n 'PsiStormTech',\n 'GraviticDrive',\n 'BlinkTech',\n 'ProtossGroundWeaponsLevel2',\n 'AdeptPiercingAttack',\n 'ProtossGroundArmorsLevel1',\n 'ProtossGroundWeaponsLevel3',\n 'ProtossShieldsLevel1']\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[50]:\n\n    \nplayers[2].supply_block\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[50]:\n\n\n\n\n\n1568\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[52]:\n\n    \nplayers[2].resources_collected\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[52]:\n\n\n\n\n\n{'minerals': 31370, 'gas': 11109}\n\n\n\n\n\n\n\n\n\n\n\nA bunch of these keys, such as unspent_resources, are time data, taken at discrete snapshots during the game. There's more time data, of course, in timeline:\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \nJSON(timeline)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[40]:\n\n\n\n\n\n<IPython.core.display.JSON object>\n\n\n\n\n\n\n\n\n\n\n\nAnd I haven't yet been able to figure this one out:\n\n\n\n\n\n\nIn\u00a0[54]:\n\n    \nengagements\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[54]:\n\n\n\n\n\n[]\n\n\n\n\n\n\n\n\n\n\n\nSaving our results to DataFrame, then to CSV\u00b6We'll also calculate the MMR difference at this step.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nimport pandas as pd\ndf = pd.DataFrame(results)\ndf['mmr_diff'] = df.mmr - df.enemy_mmr\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      enemy_mmr\n      enemy_nickame\n      map_name\n      duration\n      mmr_diff\n    \n  \n  \n    \n      0\n      2020-05-27 10:32:29+00:00\n      True\n      Protoss\n      Terran\n      4004\n      4173\n      giletjaune\n      Nightshade LE\n      601\n      -169\n    \n    \n      1\n      2020-06-09 17:11:15+00:00\n      False\n      Protoss\n      Zerg\n      4186\n      4147\n      djakette\n      Eternal Empire LE\n      420\n      39\n    \n    \n      2\n      2020-02-02 17:27:27+00:00\n      True\n      Protoss\n      Terran\n      3971\n      3913\n      Syocto\n      Ephemeron LE\n      10\n      58\n    \n    \n      3\n      2019-12-20 18:53:00+00:00\n      True\n      Zerg\n      Terran\n      2984\n      3090\n      Jason\n      Simulacrum LE\n      569\n      -106\n    \n    \n      4\n      2019-12-09 20:36:21+00:00\n      True\n      Protoss\n      Zerg\n      4015\n      4024\n      &lt;OGCO\u0421K&gt;<sp/>ShushYo\n      Nightshade LE\n      454\n      -9\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      457\n      2019-11-04 20:53:20+00:00\n      False\n      Protoss\n      Terran\n      3800\n      3883\n      &lt;MiClan&gt;<sp/>MiSHANYA\n      Disco Bloodbath LE\n      396\n      -83\n    \n    \n      458\n      2020-05-04 12:43:06+00:00\n      True\n      Protoss\n      Terran\n      3926\n      3831\n      StaMinA\n      Golden Wall LE\n      784\n      95\n    \n    \n      459\n      2020-02-02 17:15:06+00:00\n      False\n      Protoss\n      Zerg\n      4012\n      4092\n      &lt;0mg&gt;<sp/>Sroljo\n      World of Sleepers LE\n      264\n      -80\n    \n    \n      460\n      2020-04-19 11:48:32+00:00\n      True\n      Protoss\n      Zerg\n      0\n      0\n      shadowofmich\n      Simulacrum LE\n      297\n      0\n    \n    \n      461\n      2020-04-30 18:34:01+00:00\n      True\n      Protoss\n      Terran\n      3964\n      4055\n      &lt;BRs&gt;<sp/>GoodFellas\n      Nightshade LE\n      1040\n      -91\n    \n  \n\n462 rows \u00d7 10 columns\n\n\n\n\n\n\n\n\n\n\n\nAnd we dump that to CSV, and we're done!\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndf.to_csv(\"/home/dominik/Writing/blog/files/replays.csv\")\n\n\n    \n\n\n\n\n\n\n\nTL;DR version\u00b6Feel free to take this script and modify as you see fit!\n\n\n\n\n\n\nIn\u00a0[\u00a0]:\n\n    \nimport pathlib\nimport warnings\n\nimport tqdm.auto as tqdm\nimport zephyrus_sc2_parser\n\nREPLAY_DIRECTORY = \"/home/dominik/Links/SC2Reps\"\nPLAYER_NAME = \"Perfi\"\nOUTPUT_CSV = \"/home/dominik/Writing/blog/files/replays.csv\"\n\nwith warnings.catch_warnings():\n    warnings.simplefilter(\"ignore\")\n    replays = list(pathlib.Path(REPLAY_DIRECTORY).glob(\"*.SC2Replay\"))\n    parsed_replays = {}\n    for replay_file in tqdm.tqdm(replays):\n        try:\n            replay = zephyrus_sc2_parser.parse_replay(replay_file, local=True)\n        except Exception as e:\n            print(f\"Failed for {replay_file}: {e}\")\n            continue\n        parsed_replays[replay_file] = replay\n        \nprint(f\"We successfully pulled data out of {len(results)} replays, which is {len(results)/len(replays):.2%} of the total!\")\n\n# utility function to get our own player ID\ndef grab_player_id(players, name = PLAYER_NAME):\n    for key, player in players.items():\n        if player.name == name:\n            break        \n    else:\n        key = None\n    return key\n\n\nresults = []\nfor replay_file, replay in parsed_replays.items():\n    players, timeline, engagements, summary, meta = replay\n    if all(item is None for item in replay):\n        print(f\"Failed to parse for {replay_file}\")\n        continue\n    my_id = grab_player_id(players, PLAYER_NAME)\n    enemy_id = 1 if (my_id == 2) else 2\n    \n    mmr = summary['mmr'][my_id]\n\n    enemy_mmr = summary['mmr'][enemy_id]\n    results.append(\n        dict(\n            replay_file = replay_file,\n            time_played_at = meta['time_played_at'],\n            win = meta[\"winner\"] == my_id,\n            mmr=mmr,\n            enemy_mmr=enemy_mmr,\n            mmr_diff = mmr - enemy_mmr\n            race = players[my_id].race,\n            enemy_race = players[enemy_id].race,\n            enemy_nickame = players[enemy_id].name,\n            map_name = meta[\"map\"],\n            duration = meta['game_length'],\n        )\n    )\n\nprint(f\"We successfully pulled data out of {len(results)} replays, which is {len(results)/len(replays):.2%} of the total!\")\n\nimport pandas as pd\ndf = pd.DataFrame(results)\ndf['mmr_diff'] = df.mmr - df.enemy_mmr\ndf.to_csv(OUTPUT_CSV)\n\n\n    \n\n\n\n\n\n\n\nIf you have questions about this sort of thing, I'll be happy to help - ask away! :)\n\n\n\n\n\n\n\n{\"state\": {}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "python,starcraft",
      "url": "https://stanczakdominik.github.io/posts/sc2-parse-replays/"
    },
    {
      "title": "Learning my per-matchup MMR in Starcraft II through PyMC3",
      "text": "In this post we'll continue our SC2 replay research, started last time. You may want to go back to that and pick up on the terminology!\nTo recap: we used replay data from my SC2 games over 2019 to estimate a \"true MMR\" value and infer the size of per-game fluctuations. This time, we'll redo that analysis, except to get something more useful: we'll look at the three matchups I played and infer separate MMR values for each of those. Let's dig into it!\n\nI'll redo the basic data cleaning steps here. If any of this is confusing, reviewing the previous post might really be a good idea - or you could ask a question below, as always!\nIf you take a close look, you might also find a teaser for one of the next posts in this series here :)\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \nimport pandas as pd\nimport altair\n\ndef MMR_winrate(diff):\n    return 1 / (1 + 10**(-diff/880))\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/StanczakDominik/stanczakdominik.github.io/src/files/replays.csv\", index_col=0)\ndf['time_played_at'] = pd.to_datetime(df.time_played_at)\ndf = df.sort_values('time_played_at')\nfor column in ['race', 'enemy_race', 'map_name']:\n    df[column] = pd.Categorical(df[column])\ndf['enemy_mmr'] = df['mmr'] - df['mmr_diff']\ndf['expected_winrate'] = MMR_winrate(df.mmr_diff)\nall_data = df[(df.mmr > 0) & (df.enemy_mmr > 0) & (df.race == \"Protoss\") & (df.duration > 10)]\nall_data = all_data.rename({\"enemy_nickame\": \"enemy_nickname\"}, axis=1) # whoops\ndata = all_data[(all_data['time_played_at'] > '2019-01-01') & (all_data['time_played_at'] < '2020-01-01')]\ndata\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[42]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickname\n      map_name\n      duration\n      enemy_mmr\n      expected_winrate\n    \n  \n  \n    \n      8\n      2019-10-06 12:36:36+00:00\n      True\n      Protoss\n      Protoss\n      3826\n      78\n      vasea\n      World of Sleepers LE\n      743\n      3748\n      0.550847\n    \n    \n      325\n      2019-10-08 19:33:28+00:00\n      False\n      Protoss\n      Protoss\n      3893\n      -53\n      Wavelength\n      Ephemeron LE\n      254\n      3946\n      0.465386\n    \n    \n      54\n      2019-10-10 07:41:27+00:00\n      False\n      Protoss\n      Zerg\n      3828\n      26\n      PereiRa\n      Winter's Gate LE\n      45\n      3802\n      0.517001\n    \n    \n      346\n      2019-10-10 07:55:19+00:00\n      True\n      Protoss\n      Zerg\n      3760\n      -56\n      &lt;PROOO&gt;<sp/>Jesperpro\n      Thunderbird LE\n      801\n      3816\n      0.463433\n    \n    \n      138\n      2019-10-10 20:42:11+00:00\n      True\n      Protoss\n      Protoss\n      3827\n      126\n      Pippuri\n      Acropolis LE\n      697\n      3701\n      0.581684\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      391\n      2019-12-27 20:24:27+00:00\n      False\n      Protoss\n      Zerg\n      3933\n      -100\n      HiveMind\n      World of Sleepers LE\n      262\n      4033\n      0.434956\n    \n    \n      25\n      2019-12-27 20:40:39+00:00\n      True\n      Protoss\n      Zerg\n      3914\n      0\n      Racin\n      Nightshade LE\n      911\n      3914\n      0.500000\n    \n    \n      208\n      2019-12-27 21:24:06+00:00\n      True\n      Protoss\n      Terran\n      3936\n      -41\n      &lt;DemuCl&gt;<sp/>Jazzz\n      Nightshade LE\n      1277\n      3977\n      0.473206\n    \n    \n      59\n      2019-12-28 20:58:25+00:00\n      True\n      Protoss\n      Terran\n      3959\n      22\n      rOoSter\n      Simulacrum LE\n      76\n      3937\n      0.514387\n    \n    \n      364\n      2019-12-28 21:06:48+00:00\n      True\n      Protoss\n      Zerg\n      3980\n      -260\n      contremaitre\n      Nightshade LE\n      478\n      4240\n      0.336192\n    \n  \n\n138 rows \u00d7 11 columns\n\n\n\n\n\n\n\n\n\n\n\nLet's visualize the games on a per-matchup MMR vs enemy MMR basis. I added some fancy Altair selection magic, so you can look at winrates in specific MMR ranges.\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nbrush = altair.selection(type='interval')\nscatter = altair.Chart(data).mark_circle().encode(\n    altair.X('enemy_mmr',\n             scale=altair.Scale(zero=False)),\n    altair.Y('mmr',\n             scale=altair.Scale(zero=False)),\n    facet='enemy_race',\n    size='expected_winrate',\n    color='win',\n    tooltip='enemy_nickname',\n).add_selection(brush)\n\nbar = altair.Chart(data).mark_bar().encode(\n    x=altair.X('mean(win):Q', scale=altair.Scale(domain=(0, 1))),\n    y='enemy_race:O',\n).transform_filter(brush)\n\nscatter & bar\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-e9fb6eac8de443fda0ccb1674200a46b\") {\n      outputDiv = document.getElementById(\"altair-viz-e9fb6eac8de443fda0ccb1674200a46b\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"vconcat\": [{\"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"win\"}, \"facet\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"size\": {\"type\": \"quantitative\", \"field\": \"expected_winrate\"}, \"tooltip\": {\"type\": \"nominal\", \"field\": \"enemy_nickname\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"enemy_mmr\", \"scale\": {\"zero\": false}}, \"y\": {\"type\": \"quantitative\", \"field\": \"mmr\", \"scale\": {\"zero\": false}}}, \"selection\": {\"selector011\": {\"type\": \"interval\"}}}, {\"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"aggregate\": \"mean\", \"field\": \"win\", \"scale\": {\"domain\": [0, 1]}}, \"y\": {\"type\": \"ordinal\", \"field\": \"enemy_race\"}}, \"transform\": [{\"filter\": {\"selection\": \"selector011\"}}]}], \"data\": {\"name\": \"data-ce69fcd3d06f7183126b2b55308aef91\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-ce69fcd3d06f7183126b2b55308aef91\": [{\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickname\": \"vasea\", \"map_name\": \"World of Sleepers LE\", \"duration\": 743, \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickname\": \"Wavelength\", \"map_name\": \"Ephemeron LE\", \"duration\": 254, \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickname\": \"PereiRa\", \"map_name\": \"Winter's Gate LE\", \"duration\": 45, \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickname\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"map_name\": \"Thunderbird LE\", \"duration\": 801, \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickname\": \"Pippuri\", \"map_name\": \"Acropolis LE\", \"duration\": 697, \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickname\": \"Supermaru\", \"map_name\": \"Triton LE\", \"duration\": 240, \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickname\": \"&lt;IDLK&gt;<sp/>jasben\", \"map_name\": \"Acropolis LE\", \"duration\": 590, \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickname\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"map_name\": \"Ephemeron LE\", \"duration\": 209, \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickname\": \"NiGHTKiNG\", \"map_name\": \"World of Sleepers LE\", \"duration\": 453, \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickname\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"map_name\": \"Acropolis LE\", \"duration\": 187, \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickname\": \"Zergorix\", \"map_name\": \"Acropolis LE\", \"duration\": 891, \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickname\": \"Tomaso\", \"map_name\": \"World of Sleepers LE\", \"duration\": 684, \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickname\": \"abelian\", \"map_name\": \"Thunderbird LE\", \"duration\": 320, \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickname\": \"abelian\", \"map_name\": \"Thunderbird LE\", \"duration\": 383, \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickname\": \"llllllllllll\", \"map_name\": \"Triton LE\", \"duration\": 758, \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickname\": \"beh\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 288, \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickname\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"map_name\": \"World of Sleepers LE\", \"duration\": 911, \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickname\": \"Paulie\", \"map_name\": \"Ephemeron LE\", \"duration\": 548, \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickname\": \"Tyson\", \"map_name\": \"Acropolis LE\", \"duration\": 49, \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickname\": \"Granaatappel\", \"map_name\": \"Acropolis LE\", \"duration\": 777, \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickname\": \"&lt;IndyK&gt;<sp/>Sven\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 381, \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickname\": \"&lt;NerCC&gt;<sp/>speck\", \"map_name\": \"Triton LE\", \"duration\": 943, \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickname\": \"Ghalib\", \"map_name\": \"Ephemeron LE\", \"duration\": 552, \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickname\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"map_name\": \"Acropolis LE\", \"duration\": 198, \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickname\": \"KKroer\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 585, \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickname\": \"Hazard\", \"map_name\": \"Triton LE\", \"duration\": 256, \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickname\": \"Pleydellia\", \"map_name\": \"Triton LE\", \"duration\": 162, \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickname\": \"lllllll\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 797, \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickname\": \"lllllll\", \"map_name\": \"World of Sleepers LE\", \"duration\": 470, \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickname\": \"&lt;PiGPan&gt;<sp/>Noose\", \"map_name\": \"World of Sleepers LE\", \"duration\": 796, \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickname\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"map_name\": \"Acropolis LE\", \"duration\": 352, \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickname\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"map_name\": \"Triton LE\", \"duration\": 932, \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickname\": \"&lt;FreeHK&gt;<sp/>jellun\", \"map_name\": \"Acropolis LE\", \"duration\": 455, \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickname\": \"North\", \"map_name\": \"Ephemeron LE\", \"duration\": 311, \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickname\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 396, \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickname\": \"IIIIIIIIIIII\", \"map_name\": \"World of Sleepers LE\", \"duration\": 182, \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickname\": \"Fleetz\", \"map_name\": \"World of Sleepers LE\", \"duration\": 777, \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickname\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"map_name\": \"Ephemeron LE\", \"duration\": 426, \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickname\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"map_name\": \"Ephemeron LE\", \"duration\": 259, \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickname\": \"smthFISHYcmg\", \"map_name\": \"World of Sleepers LE\", \"duration\": 546, \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickname\": \"ProtoZZavr\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 551, \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickname\": \"Zend\", \"map_name\": \"World of Sleepers LE\", \"duration\": 944, \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickname\": \"&lt;UATeam&gt;<sp/>click\", \"map_name\": \"Acropolis LE\", \"duration\": 723, \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickname\": \"midhigh\", \"map_name\": \"World of Sleepers LE\", \"duration\": 363, \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickname\": \"Paulie\", \"map_name\": \"World of Sleepers LE\", \"duration\": 1005, \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickname\": \"TrashCanMan\", \"map_name\": \"Triton LE\", \"duration\": 212, \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickname\": \"MightyMurloc\", \"map_name\": \"Ephemeron LE\", \"duration\": 1313, \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickname\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"map_name\": \"Triton LE\", \"duration\": 278, \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickname\": \"\\u0432\\u043b\\u0430\\u0434\", \"map_name\": \"Ephemeron LE\", \"duration\": 845, \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickname\": \"trouth\", \"map_name\": \"Ephemeron LE\", \"duration\": 529, \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickname\": \"OlympusRoyal\", \"map_name\": \"Ephemeron LE\", \"duration\": 540, \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickname\": \"InsighT\", \"map_name\": \"Ephemeron LE\", \"duration\": 44, \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickname\": \"trouth\", \"map_name\": \"Triton LE\", \"duration\": 970, \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickname\": \"Raver\", \"map_name\": \"Acropolis LE\", \"duration\": 341, \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickname\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"map_name\": \"World of Sleepers LE\", \"duration\": 879, \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickname\": \"Cosmobrother\", \"map_name\": \"Acropolis LE\", \"duration\": 909, \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickname\": \"IIIIIIIIIIII\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 780, \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickname\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"map_name\": \"World of Sleepers LE\", \"duration\": 1003, \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickname\": \"Pudgey\", \"map_name\": \"Ephemeron LE\", \"duration\": 183, \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickname\": \"&lt;TDDA&gt;<sp/>EMM\", \"map_name\": \"Ephemeron LE\", \"duration\": 219, \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickname\": \"YvanDuR\\u00eave\", \"map_name\": \"Ephemeron LE\", \"duration\": 1173, \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickname\": \"BuRneR\", \"map_name\": \"Ephemeron LE\", \"duration\": 453, \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickname\": \"&lt;CocoCo&gt;<sp/>Goty\", \"map_name\": \"Triton LE\", \"duration\": 1199, \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickname\": \"&lt;kOzY&gt;<sp/>Dave\", \"map_name\": \"World of Sleepers LE\", \"duration\": 891, \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickname\": \"Crombo\", \"map_name\": \"Disco Bloodbath LE\", \"duration\": 830, \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickname\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"map_name\": \"World of Sleepers LE\", \"duration\": 321, \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickname\": \"Doomweed\", \"map_name\": \"Acropolis LE\", \"duration\": 224, \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickname\": \"SkyFlare\", \"map_name\": \"World of Sleepers LE\", \"duration\": 66, \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickname\": \"Chief\", \"map_name\": \"World of Sleepers LE\", \"duration\": 463, \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickname\": \"Romio\", \"map_name\": \"Triton LE\", \"duration\": 685, \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickname\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"map_name\": \"Eternal Empire LE\", \"duration\": 307, \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickname\": \"&lt;vGL&gt;<sp/>Celestial\", \"map_name\": \"World of Sleepers LE\", \"duration\": 541, \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickname\": \"Inquisition\", \"map_name\": \"World of Sleepers LE\", \"duration\": 721, \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickname\": \"zzTp\", \"map_name\": \"Nightshade LE\", \"duration\": 468, \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickname\": \"zzTp\", \"map_name\": \"World of Sleepers LE\", \"duration\": 384, \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickname\": \"&lt;ERHELM&gt;<sp/>Erik\", \"map_name\": \"Simulacrum LE\", \"duration\": 1015, \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickname\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"map_name\": \"Simulacrum LE\", \"duration\": 575, \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickname\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"map_name\": \"Simulacrum LE\", \"duration\": 685, \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickname\": \"kalarazar\", \"map_name\": \"Nightshade LE\", \"duration\": 1326, \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickname\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"map_name\": \"World of Sleepers LE\", \"duration\": 476, \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickname\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"map_name\": \"Eternal Empire LE\", \"duration\": 328, \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickname\": \"Orian\", \"map_name\": \"World of Sleepers LE\", \"duration\": 817, \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickname\": \"AlexMacedon\", \"map_name\": \"World of Sleepers LE\", \"duration\": 585, \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickname\": \"Niinja\", \"map_name\": \"World of Sleepers LE\", \"duration\": 1308, \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickname\": \"Delaam\", \"map_name\": \"Eternal Empire LE\", \"duration\": 307, \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickname\": \"PeterLax\", \"map_name\": \"Simulacrum LE\", \"duration\": 557, \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickname\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"map_name\": \"Nightshade LE\", \"duration\": 454, \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickname\": \"Heradrass\", \"map_name\": \"Eternal Empire LE\", \"duration\": 122, \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickname\": \"NS\\u0192Faxo\", \"map_name\": \"Eternal Empire LE\", \"duration\": 755, \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickname\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"map_name\": \"Eternal Empire LE\", \"duration\": 552, \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickname\": \"Legionaru\", \"map_name\": \"Eternal Empire LE\", \"duration\": 1090, \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickname\": \"Ciprian\", \"map_name\": \"Eternal Empire LE\", \"duration\": 955, \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickname\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"map_name\": \"Nightshade LE\", \"duration\": 733, \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickname\": \"contremaitre\", \"map_name\": \"World of Sleepers LE\", \"duration\": 772, \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickname\": \"Fraze\", \"map_name\": \"Nightshade LE\", \"duration\": 1163, \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickname\": \"NazelHut\", \"map_name\": \"Simulacrum LE\", \"duration\": 317, \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickname\": \"cloud\", \"map_name\": \"Eternal Empire LE\", \"duration\": 398, \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickname\": \"Xaenor\", \"map_name\": \"Nightshade LE\", \"duration\": 650, \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickname\": \"&lt;snajpu&gt;<sp/>Auddi\", \"map_name\": \"Simulacrum LE\", \"duration\": 356, \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickname\": \"&lt;snajpu&gt;<sp/>Auddi\", \"map_name\": \"Nightshade LE\", \"duration\": 619, \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickname\": \"Vidra\", \"map_name\": \"Nightshade LE\", \"duration\": 765, \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickname\": \"Noobofsc\", \"map_name\": \"Simulacrum LE\", \"duration\": 709, \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickname\": \"&lt;Div303&gt;<sp/>Dupsko\", \"map_name\": \"Simulacrum LE\", \"duration\": 930, \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickname\": \"&lt;IndyK&gt;<sp/>HaPe\", \"map_name\": \"Eternal Empire LE\", \"duration\": 235, \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickname\": \"FrozenZerg\", \"map_name\": \"Simulacrum LE\", \"duration\": 960, \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickname\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"map_name\": \"World of Sleepers LE\", \"duration\": 257, \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickname\": \"utopike\", \"map_name\": \"World of Sleepers LE\", \"duration\": 1112, \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickname\": \"Nyx\", \"map_name\": \"Simulacrum LE\", \"duration\": 329, \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickname\": \"CapSto\", \"map_name\": \"Eternal Empire LE\", \"duration\": 338, \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickname\": \"&lt;TAW&gt;<sp/>Pote\", \"map_name\": \"World of Sleepers LE\", \"duration\": 453, \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickname\": \"Neydark\", \"map_name\": \"Simulacrum LE\", \"duration\": 862, \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickname\": \"Albus\", \"map_name\": \"Simulacrum LE\", \"duration\": 426, \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickname\": \"tiwai\", \"map_name\": \"Eternal Empire LE\", \"duration\": 611, \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickname\": \"tiwai\", \"map_name\": \"Eternal Empire LE\", \"duration\": 730, \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickname\": \"RXX\", \"map_name\": \"Simulacrum LE\", \"duration\": 299, \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickname\": \"xYn\", \"map_name\": \"Simulacrum LE\", \"duration\": 492, \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickname\": \"Stefan\", \"map_name\": \"Eternal Empire LE\", \"duration\": 1009, \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickname\": \"Xenocide\", \"map_name\": \"Simulacrum LE\", \"duration\": 826, \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickname\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"map_name\": \"Eternal Empire LE\", \"duration\": 107, \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickname\": \"Bingo\", \"map_name\": \"Nightshade LE\", \"duration\": 182, \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickname\": \"Jungla\", \"map_name\": \"Eternal Empire LE\", \"duration\": 472, \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickname\": \"DeepMind\", \"map_name\": \"World of Sleepers LE\", \"duration\": 175, \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickname\": \"DeepMind\", \"map_name\": \"Nightshade LE\", \"duration\": 159, \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickname\": \"Nyxeu\", \"map_name\": \"Eternal Empire LE\", \"duration\": 895, \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickname\": \"IntrinsiCat\", \"map_name\": \"Eternal Empire LE\", \"duration\": 870, \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickname\": \"\\u00e6\\u00e6\\u00e6\", \"map_name\": \"Eternal Empire LE\", \"duration\": 17, \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickname\": \"Listig\", \"map_name\": \"Nightshade LE\", \"duration\": 1132, \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickname\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"map_name\": \"Simulacrum LE\", \"duration\": 629, \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickname\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"map_name\": \"Eternal Empire LE\", \"duration\": 283, \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickname\": \"ARCMAN\", \"map_name\": \"Simulacrum LE\", \"duration\": 971, \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickname\": \"Vakhtang\", \"map_name\": \"Eternal Empire LE\", \"duration\": 771, \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickname\": \"Vakhtang\", \"map_name\": \"Nightshade LE\", \"duration\": 1004, \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickname\": \"PPO\", \"map_name\": \"World of Sleepers LE\", \"duration\": 920, \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickname\": \"HiveMind\", \"map_name\": \"World of Sleepers LE\", \"duration\": 262, \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickname\": \"Racin\", \"map_name\": \"Nightshade LE\", \"duration\": 911, \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickname\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"map_name\": \"Nightshade LE\", \"duration\": 1277, \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickname\": \"rOoSter\", \"map_name\": \"Simulacrum LE\", \"duration\": 76, \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickname\": \"contremaitre\", \"map_name\": \"Nightshade LE\", \"duration\": 478, \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nSeparate matchup MMRs\u00b6This is where the magic starts. Where, before, we had a single MMR estimation, we'll now have three, one for each matchup:\n$$\\mun \\sim \\text{Normal}(4000, 300) \\text{ for } n \\text{ in } \\{1, 2, 3\\}$$\nAnd likewise for the fluctuation value:\n$$\\sigman \\sim \\text{HalfNormal}(100)$$\nAnd that, honestly, is about it! When I realized it, I wanted to title this post \"How Can It Be That Simple, Like, What The Hell\". But I did have to tinker with the model for a good while to find out the optimal way of doing things. It turns out the first idea I had was optimal. Who knew.\n\n\n\n\n\n\n\nWe'll use some fancy new PyMC3 3.9 and ArviZ 0.8.3 functionality to replace the old shapes arguments with dims, for cleaner code.\nNote: to reproduce, use the GitHub master release of ArviZ for now.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nimport pymc3 as pm\nimport arviz as az\n\n# fancy new functionality for xarray output - I'll explain later!\ncoords = {\n    \"replay\": data.index,\n    \"race\": [\"Terran\", \"Protoss\", \"Zerg\"],\n}\n\n\n    \n\n\n\n\n\n\n\nWe now assign the new priors for $\\mun$ and $\\sigman$, three of each - and then we'll add a helper variable for each of the replays. Note how\nthe new syntax is a good bit cleaner than hardcoding the shapes in.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nwith pm.Model(coords=coords) as split_model:\n    mmr_\u03bc_matchup = pm.Normal('\u03bc', 4000, 300, dims='race')\n    mmr_\u03c3_matchup = pm.HalfNormal('\u03c3', 100, dims='race')\n    mmr_\u03c3_norm = pm.Normal('helper', 0, 1, dims='replay')\n\n\n    \n\n\n\n\n\n\n\nAnd the next change we have to make is indexing the per-race average and fluctuation values based on the enemy races, so that each game in our dataset gets the MMR for its particular matchup.\nWe'll have to assign a numerical index for each possible enemy race. We'll choose zeroes for Terran and two for Zerg, so that, at least in indices, Protoss can be number one.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nrace_encoding ={\"Terran\": 0,\n                \"Protoss\": 1,\n                \"Zerg\": 2} \n\nwith split_model:\n    enemy_races = pm.Data(\"enemy_race\", data.enemy_race.map(race_encoding).astype(int), dims='replay')\n    mmr = pm.Deterministic('MMR', mmr_\u03bc_matchup[enemy_races] + mmr_\u03c3_matchup[enemy_races] * mmr_\u03c3_norm, dims='replay')\n\n\n    \n\n\n\n\n\n\n\nAnd now it's smooth sailing from here on out! I forgot to add it last time, but PyMC3 can create a neat graph for your model using GraphViz.\nIf I had remembered to do so, the only difference between this model and ours would be the 3 for $\\mu, \\sigma$ - since we now have three of each - and adding the enemy_race as pymc3.Data.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nwith split_model:\n    enemy_mmr = pm.Data(\"enemy_mmr\", data.enemy_mmr, dims='replay')\n    diffs = pm.Deterministic('MMR_diff', mmr - enemy_mmr, dims = 'replay')\n    p = pm.Deterministic('winrate', MMR_winrate(diffs), dims = 'replay')\n    wl = pm.Bernoulli('win', p=p, observed=data.win, dims = 'replay')\npm.model_to_graphviz(split_model)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\n\n\n\n\n\n\n\ncluster3\n\n3\n\n\ncluster138\n\n138\n\n\n\n\u03bc\n\n\u03bc\n~\nNormal\n\n\n\nMMR\n\nMMR\n~\nDeterministic\n\n\n\n\u03bc->MMR\n\n\n\n\n\n\u03c3\n\n\u03c3\n~\nHalfNormal\n\n\n\n\u03c3->MMR\n\n\n\n\n\nMMR_diff\n\nMMR_diff\n~\nDeterministic\n\n\n\nMMR->MMR_diff\n\n\n\n\n\nenemy_mmr\n\nenemy_mmr\n~\nData\n\n\n\nenemy_mmr->MMR_diff\n\n\n\n\n\nhelper\n\nhelper\n~\nNormal\n\n\n\nhelper->MMR\n\n\n\n\n\nenemy_race\n\nenemy_race\n~\nData\n\n\n\nenemy_race->MMR\n\n\n\n\n\nwin\n\nwin\n~\nBernoulli\n\n\n\nwinrate\n\nwinrate\n~\nDeterministic\n\n\n\nwinrate->win\n\n\n\n\n\nMMR_diff->winrate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst run\u00b6And now, let's sample! We'll add a predictive prior and posterior sample: this lets us easily see what sort of data we'd see from our initial assumptions and from the fully \"learned\" (\"taught\"?) model.\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \npredictive_var_names = \"win \u03bc \u03c3 winrate\".split()\nwith split_model:\n    trace = pm.sample(2000, tune=2000, chains=4, random_seed=1)\n    output = az.from_pymc3(trace=trace,\n                           prior=pm.sample_prior_predictive(2000 , var_names=predictive_var_names, random_seed=1),\n                           posterior_predictive=pm.sample_posterior_predictive(trace, var_names=predictive_var_names, random_seed=1),\n                          )\noutput\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 2 jobs)\nNUTS: [helper, \u03c3, \u03bc]\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [16000/16000 00:17<00:00 Sampling 4 chains, 7 divergences]\n    \n    \n\n\n\n\n\n    \n\n\n\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 18 seconds.\nThere were 4 divergences after tuning. Increase `target_accept` or reparameterize.\nThere were 3 divergences after tuning. Increase `target_accept` or reparameterize.\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [8000/8000 00:07<00:00]\n    \n    \n\n\n\n\n\n    Out[28]:\n\n\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (6)\u03bc(chain, draw, race)float644.303e+03 3.375e+03 ... 3.955e+03array([[[4302.79553938, 3375.01011989, 4048.86315149],\n        [4323.86457361, 3295.74222841, 3954.05048638],\n        [4239.6739907 , 3448.28894514, 4235.71022401],\n        ...,\n        [4250.95500899, 3592.96680679, 3907.78214913],\n        [4321.36051851, 3657.60296464, 4041.53244852],\n        [4378.58347689, 3680.20202035, 4041.44904971]],\n\n       [[4141.06331072, 3385.94471985, 4135.36324411],\n        [4138.80737046, 3670.4073407 , 4045.58916728],\n        [4194.72695819, 3676.40161761, 3931.11602939],\n        ...,\n        [4066.10358294, 3429.85753425, 4004.41005399],\n        [4049.09082588, 3382.29455772, 3954.15834981],\n        [4422.29348522, 3549.2372973 , 4066.31337586]],\n\n       [[4212.20435522, 3476.71136441, 4104.05998443],\n        [4139.66832504, 3371.93545224, 4198.27086105],\n        [4369.19834033, 3797.3129873 , 3828.50248262],\n        ...,\n        [4320.92217993, 3755.9095065 , 4165.54070368],\n        [4231.08308098, 3713.65002654, 3964.55758405],\n        [4274.41509776, 3407.86141075, 3931.29076179]],\n\n       [[4314.0372303 , 3573.73152574, 4058.10772914],\n        [4114.59770596, 3463.36390945, 4018.74209014],\n        [4464.57525582, 3705.14913054, 4089.96639073],\n        ...,\n        [4504.44403668, 3638.42652115, 3911.16769539],\n        [4256.83526394, 3886.43065114, 3954.52402571],\n        [4256.83526394, 3886.43065114, 3954.52402571]]])helper(chain, draw, replay)float640.7894 0.5491 ... 1.849 -0.6287array([[[ 0.78936952,  0.5490887 ,  0.16650833, ...,  0.08329766,\n         -0.65050062,  0.29929534],\n        [ 1.58545972, -0.65388647, -0.65379105, ...,  1.82456396,\n         -0.19362754,  1.51704283],\n        [-0.95306398,  1.74037107, -1.06139752, ...,  0.49580659,\n         -1.65596289,  0.84096651],\n        ...,\n        [ 0.83862077,  0.72070695,  0.48932378, ..., -0.2039098 ,\n         -1.29151567,  1.33576567],\n        [ 0.36248347,  1.46751904,  2.691205  , ...,  1.45830882,\n         -0.35768443,  2.55530514],\n        [ 1.08745544,  1.27714706,  0.61058664, ...,  1.29672473,\n         -0.50342047,  2.35664708]],\n\n       [[ 1.03478446,  0.34214246, -0.02786286, ..., -1.94344799,\n         -1.74622235,  0.23291672],\n        [-1.13226371,  0.59456024, -0.63842647, ...,  0.36564697,\n         -0.64213818,  1.34387537],\n        [-1.13076226,  0.23707974, -1.6545314 , ..., -0.40823523,\n         -2.01952747,  1.78589938],\n        ...,\n        [ 1.07091423, -0.57066178,  0.11606562, ..., -1.94859916,\n         -0.54562754,  0.47149236],\n        [ 1.73615185, -0.27786063, -0.27283103, ..., -1.55429249,\n         -0.73246607,  0.73910541],\n        [-0.65499351,  1.15010742,  0.65100113, ..., -0.51231793,\n         -0.53271042,  1.44304005]],\n\n       [[ 0.49833716, -0.51620112,  0.13741193, ...,  0.501271  ,\n          1.09108997, -0.73316122],\n        [-0.25632797,  0.70929871, -0.30192588, ...,  0.74061067,\n          0.88777097,  0.1928401 ],\n        [ 0.24746999, -0.78483546,  0.05723709, ..., -0.06153329,\n         -2.12186644,  0.20316985],\n        ...,\n        [ 2.14989454,  1.12821892,  0.49014978, ...,  0.70910716,\n         -0.11305358, -0.26844358],\n        [ 0.79712821, -0.98653506,  0.27999657, ...,  0.02147621,\n          0.45285935, -0.223395  ],\n        [ 1.17281098, -0.88489812,  2.22847395, ...,  0.52398786,\n         -0.19246968,  0.97882991]],\n\n       [[ 0.15828557, -0.38448579, -0.2247607 , ...,  0.09849247,\n         -0.17279176,  0.79657494],\n        [ 0.3954921 , -0.67537986, -0.07942884, ...,  1.00072493,\n         -0.15591947,  0.71581227],\n        [ 2.66366278,  0.60968907, -0.42128861, ..., -0.09888939,\n          0.52831846,  0.29878227],\n        ...,\n        [-0.54199678, -0.4028017 , -1.59414456, ...,  2.31936087,\n          0.07555759,  0.57843756],\n        [ 1.20184084,  0.51496559,  0.73758509, ...,  1.82835713,\n          1.8487901 , -0.62868765],\n        [ 1.20184084,  0.51496559,  0.73758509, ...,  1.82835713,\n          1.8487901 , -0.62868765]]])\u03c3(chain, draw, race)float64140.4 252.7 183.9 ... 72.88 55.78array([[[140.36011672, 252.69076651, 183.8904596 ],\n        [161.51391431,  82.67823509, 212.55352477],\n        [108.91799094,  66.69192358,  88.42575348],\n        ...,\n        [ 31.69679346, 101.09097511,  32.56956811],\n        [148.25558444,  50.48937963, 103.02389557],\n        [170.53973503,  42.45131739,   7.22075687]],\n\n       [[ 81.39860974,  97.00223551,   5.23367679],\n        [ 28.60567987, 120.58701662, 119.74595091],\n        [ 24.85236716,  47.00875165,  62.47517088],\n        ...,\n        [ 27.08894035, 109.52428738,  89.74107174],\n        [101.36114868,  44.00684249,  63.21585206],\n        [ 45.44140301,  42.24565628,  32.21911083]],\n\n       [[ 85.15403518,  72.24973621, 101.9819129 ],\n        [ 69.33515359,  91.23129494, 140.7847575 ],\n        [ 45.56776301, 101.34687473,  65.85446419],\n        ...,\n        [ 39.67975301,  28.28842643,  52.09586543],\n        [227.54401728,  35.04100696,  46.01622763],\n        [141.84401665, 229.02600795,   5.01932257]],\n\n       [[170.73574582,   6.64000168, 256.76699449],\n        [ 77.7241646 ,  58.94863209,  63.38158179],\n        [ 92.43500404,  57.06879911,  99.61428138],\n        ...,\n        [ 34.21264796,  52.28070628, 126.57472452],\n        [179.13659055,  72.88096661,  55.7761304 ],\n        [179.13659055,  72.88096661,  55.7761304 ]]])MMR(chain, draw, replay)float643.574e+03 3.514e+03 ... 3.919e+03array([[[3574.47650843, 3513.75976477, 4079.48244533, ...,\n         4314.48720853, 4211.49119573, 4103.90070894],\n        [3426.82524018, 3241.68004931, 3815.08489516, ...,\n         4618.55704024, 4292.59103243, 4276.50328733],\n        [3384.72727505, 3564.35763932, 4141.85534813, ...,\n         4293.67624891, 4059.3098399 , 4310.07332137],\n        ...,\n        [3677.74379789, 3665.82377497, 3923.71921341, ...,\n         4244.49172209, 4210.01810344, 3951.28746012],\n        [3675.90453027, 3731.69709048, 4318.79087106, ...,\n         4537.56294544, 4268.33180356, 4304.78993801],\n        [3726.36593656, 3734.41859557, 4045.85794741, ...,\n         4599.72656921, 4292.73028387, 4058.46582531]],\n\n       [[3486.32112569, 3419.1333035 , 4135.21741888, ...,\n         3982.86934633, 3998.92323941, 4136.58225494],\n        [3533.87103837, 3742.10358598, 3969.14018261, ...,\n         4149.26695054, 4120.43857122, 4206.51280099],\n        [3623.24589541, 3687.54644032, 3827.74889736, ...,\n         4184.58134634, 4144.53692   , 4042.69039863],\n        ...,\n        [3547.14865165, 3367.35620982, 4014.82590683, ...,\n         4013.31809649, 4051.32311109, 4046.72228372],\n        [3458.69711886, 3370.06678874, 3936.91110358, ...,\n         3891.5459539 , 3974.84722316, 4000.8815279 ],\n        [3521.5666664 , 3597.8243401 , 4087.28805338, ...,\n         4399.01303974, 4398.08637637, 4112.80684303]],\n\n       [[3512.71609283, 3439.41596971, 4118.0735164 , ...,\n         4254.88960386, 4305.11506861, 4029.29080031],\n        [3348.55031945, 3436.64569193, 4155.76429966, ...,\n         4191.01867944, 4201.22206179, 4225.4198078 ],\n        [3822.39329786, 3717.77236616, 3832.27180076, ...,\n         4366.39440592, 4272.50963317, 3841.88212429],\n        ...,\n        [3816.72664015, 3787.82504444, 4191.07548085, ...,\n         4349.0593768 , 4316.43624179, 4151.55590297],\n        [3741.58220182, 3679.08084456, 3977.44197015, ...,\n         4235.96986521, 4334.12851785, 3954.27778896],\n        [3676.46562714, 3205.19672793, 3942.47619137, ...,\n         4348.73963984, 4247.11442498, 3936.20382483]],\n\n       [[3574.78254219, 3571.17853943, 4000.39660036, ...,\n         4330.853415  , 4284.53550087, 4262.64188132],\n        [3486.67762767, 3423.55119059, 4013.70776491, ...,\n         4192.37821489, 4102.47899548, 4064.11140391],\n        [3857.16116685, 3739.94335347, 4048.00002814, ...,\n         4455.43441496, 4513.41037517, 4119.72937191],\n        ...,\n        [3610.09054683, 3617.36776396, 3709.38928727, ...,\n         4583.79551357, 4507.02906206, 3984.38327026],\n        [3974.02197305, 3923.96184115, 3995.66366771, ...,\n         4584.36092651, 4588.0212183 , 3919.4582613 ],\n        [3974.02197305, 3923.96184115, 3995.66366771, ...,\n         4584.36092651, 4588.0212183 , 3919.4582613 ]]])MMR_diff(chain, draw, replay)float64-173.5 -432.2 ... 651.0 -320.5array([[[-173.52349157, -432.24023523,  277.48244533, ...,\n          337.48720853,  274.49119573, -136.09929106],\n        [-321.17475982, -704.31995069,   13.08489516, ...,\n          641.55704024,  355.59103243,   36.50328733],\n        [-363.27272495, -381.64236068,  339.85534813, ...,\n          316.67624891,  122.3098399 ,   70.07332137],\n        ...,\n        [ -70.25620211, -280.17622503,  121.71921341, ...,\n          267.49172209,  273.01810344, -288.71253988],\n        [ -72.09546973, -214.30290952,  516.79087106, ...,\n          560.56294544,  331.33180356,   64.78993801],\n        [ -21.63406344, -211.58140443,  243.85794741, ...,\n          622.72656921,  355.73028387, -181.53417469]],\n\n       [[-261.67887431, -526.8666965 ,  333.21741888, ...,\n            5.86934633,   61.92323941, -103.41774506],\n        [-214.12896163, -203.89641402,  167.14018261, ...,\n          172.26695054,  183.43857122,  -33.48719901],\n        [-124.75410459, -258.45355968,   25.74889736, ...,\n          207.58134634,  207.53692   , -197.30960137],\n        ...,\n        [-200.85134835, -578.64379018,  212.82590683, ...,\n           36.31809649,  114.32311109, -193.27771628],\n        [-289.30288114, -575.93321126,  134.91110358, ...,\n          -85.4540461 ,   37.84722316, -239.1184721 ],\n        [-226.4333336 , -348.1756599 ,  285.28805338, ...,\n          422.01303974,  461.08637637, -127.19315697]],\n\n       [[-235.28390717, -506.58403029,  316.0735164 , ...,\n          277.88960386,  368.11506861, -210.70919969],\n        [-399.44968055, -509.35430807,  353.76429966, ...,\n          214.01867944,  264.22206179,  -14.5801922 ],\n        [  74.39329786, -228.22763384,   30.27180076, ...,\n          389.39440592,  335.50963317, -398.11787571],\n        ...,\n        [  68.72664015, -158.17495556,  389.07548085, ...,\n          372.0593768 ,  379.43624179,  -88.44409703],\n        [  -6.41779818, -266.91915544,  175.44197015, ...,\n          258.96986521,  397.12851785, -285.72221104],\n        [ -71.53437286, -740.80327207,  140.47619137, ...,\n          371.73963984,  310.11442498, -303.79617517]],\n\n       [[-173.21745781, -374.82146057,  198.39660036, ...,\n          353.853415  ,  347.53550087,   22.64188132],\n        [-261.32237233, -522.44880941,  211.70776491, ...,\n          215.37821489,  165.47899548, -175.88859609],\n        [ 109.16116685, -206.05664653,  246.00002814, ...,\n          478.43441496,  576.41037517, -120.27062809],\n        ...,\n        [-137.90945317, -328.63223604,  -92.61071273, ...,\n          606.79551357,  570.02906206, -255.61672974],\n        [ 226.02197305,  -22.03815885,  193.66366771, ...,\n          607.36092651,  651.0212183 , -320.5417387 ],\n        [ 226.02197305,  -22.03815885,  193.66366771, ...,\n          607.36092651,  651.0212183 , -320.5417387 ]]])winrate(chain, draw, replay)float640.3884 0.244 ... 0.846 0.3018array([[[0.38840135, 0.24397871, 0.67393861, ..., 0.70745598,\n         0.67221636, 0.41190061],\n        [0.30145528, 0.13670806, 0.50855856, ..., 0.84272985,\n         0.71716256, 0.52386025],\n        [0.27877826, 0.26921766, 0.70873675, ..., 0.69606027,\n         0.57933223, 0.54571002],\n        ...,\n        [0.45417135, 0.32451442, 0.57895556, ..., 0.66816823,\n         0.67136651, 0.31963761],\n        [0.45297858, 0.36337639, 0.79449259, ..., 0.81256357,\n         0.70411153, 0.5422807 ],\n        [0.485852  , 0.36502532, 0.65431758, ..., 0.83608882,\n         0.71723646, 0.38343406]],\n\n       [[0.33521265, 0.20123624, 0.7051384 , ..., 0.50383932,\n         0.5404183 , 0.43275976],\n        [0.36348169, 0.3696986 , 0.60762375, ..., 0.61081735,\n         0.61774329, 0.47810857],\n        [0.41910992, 0.3370959 , 0.51683711, ..., 0.63254534,\n         0.63251832, 0.37372364],\n        ...,\n        [0.37155715, 0.18033725, 0.6357291 , ..., 0.52373938,\n         0.57423102, 0.37619612],\n        [0.31930178, 0.181388  , 0.58734606, ..., 0.44433253,\n         0.5247373 , 0.34849273],\n        [0.35606613, 0.28678965, 0.67841064, ..., 0.75105153,\n         0.76967316, 0.41755699]],\n\n       [[0.35077423, 0.20990227, 0.69572652, ..., 0.67417267,\n         0.7237621 , 0.36555445],\n        [0.26014989, 0.20870266, 0.71619203, ..., 0.63645155,\n         0.66626863, 0.49046362],\n        [0.54851081, 0.35499039, 0.51979175, ..., 0.73475424,\n         0.70638391, 0.26082117],\n        ...,\n        [0.54483632, 0.39798298, 0.73459157, ..., 0.72582073,\n         0.72964516, 0.4424017 ],\n        [0.49580194, 0.33216402, 0.61279042, ..., 0.66320592,\n         0.73867943, 0.32134157],\n        [0.45334239, 0.12582742, 0.59087079, ..., 0.72565421,\n         0.69241571, 0.31111641]],\n\n       [[0.38859158, 0.27274337, 0.62694182, ..., 0.71623942,\n         0.71286761, 0.51480671],\n        [0.33542055, 0.20310077, 0.63505131, ..., 0.63727424,\n         0.60658696, 0.38693233],\n        [0.57092553, 0.36838244, 0.65558424, ..., 0.7776215 ,\n         0.81879732, 0.42196867],\n        ...,\n        [0.41075375, 0.29736221, 0.43971402, ..., 0.83029583,\n         0.81630679, 0.33875661],\n        [0.64368704, 0.48558788, 0.62404084, ..., 0.83050419,\n         0.84598416, 0.30180419],\n        [0.64368704, 0.48558788, 0.62404084, ..., 0.83050419,\n         0.84598416, 0.30180419]]])Attributes: (6)created_at :2020-06-20T10:35:36.555638arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :18.211029291152954tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  posterior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')Data variables: (4)win(chain, draw, replay)int640 0 1 1 0 0 1 0 ... 1 0 1 0 1 1 1 0array([[[0, 0, 1, ..., 1, 0, 0],\n        [1, 0, 0, ..., 1, 0, 0],\n        [0, 0, 1, ..., 1, 0, 0],\n        ...,\n        [1, 0, 0, ..., 1, 1, 1],\n        [1, 1, 1, ..., 1, 1, 1],\n        [0, 0, 1, ..., 1, 1, 1]],\n\n       [[1, 0, 0, ..., 0, 1, 0],\n        [1, 0, 1, ..., 1, 1, 0],\n        [0, 0, 1, ..., 1, 1, 0],\n        ...,\n        [1, 0, 1, ..., 0, 0, 1],\n        [1, 0, 1, ..., 1, 1, 0],\n        [1, 0, 1, ..., 0, 1, 0]],\n\n       [[1, 1, 0, ..., 0, 0, 0],\n        [1, 0, 1, ..., 1, 1, 0],\n        [0, 1, 0, ..., 1, 1, 1],\n        ...,\n        [1, 0, 0, ..., 1, 1, 0],\n        [0, 1, 1, ..., 1, 1, 0],\n        [1, 0, 0, ..., 1, 1, 0]],\n\n       [[0, 0, 1, ..., 1, 1, 1],\n        [0, 0, 1, ..., 1, 0, 0],\n        [0, 1, 0, ..., 1, 0, 1],\n        ...,\n        [0, 0, 0, ..., 0, 1, 1],\n        [1, 0, 0, ..., 1, 0, 0],\n        [0, 0, 0, ..., 1, 1, 0]]])\u03bc(chain, draw, race)float644.303e+03 3.375e+03 ... 3.955e+03array([[[4302.79553938, 3375.01011989, 4048.86315149],\n        [4323.86457361, 3295.74222841, 3954.05048638],\n        [4239.6739907 , 3448.28894514, 4235.71022401],\n        ...,\n        [4250.95500899, 3592.96680679, 3907.78214913],\n        [4321.36051851, 3657.60296464, 4041.53244852],\n        [4378.58347689, 3680.20202035, 4041.44904971]],\n\n       [[4141.06331072, 3385.94471985, 4135.36324411],\n        [4138.80737046, 3670.4073407 , 4045.58916728],\n        [4194.72695819, 3676.40161761, 3931.11602939],\n        ...,\n        [4066.10358294, 3429.85753425, 4004.41005399],\n        [4049.09082588, 3382.29455772, 3954.15834981],\n        [4422.29348522, 3549.2372973 , 4066.31337586]],\n\n       [[4212.20435522, 3476.71136441, 4104.05998443],\n        [4139.66832504, 3371.93545224, 4198.27086105],\n        [4369.19834033, 3797.3129873 , 3828.50248262],\n        ...,\n        [4320.92217993, 3755.9095065 , 4165.54070368],\n        [4231.08308098, 3713.65002654, 3964.55758405],\n        [4274.41509776, 3407.86141075, 3931.29076179]],\n\n       [[4314.0372303 , 3573.73152574, 4058.10772914],\n        [4114.59770596, 3463.36390945, 4018.74209014],\n        [4464.57525582, 3705.14913054, 4089.96639073],\n        ...,\n        [4504.44403668, 3638.42652115, 3911.16769539],\n        [4256.83526394, 3886.43065114, 3954.52402571],\n        [4256.83526394, 3886.43065114, 3954.52402571]]])\u03c3(chain, draw, race)float64140.4 252.7 183.9 ... 72.88 55.78array([[[140.36011672, 252.69076651, 183.8904596 ],\n        [161.51391431,  82.67823509, 212.55352477],\n        [108.91799094,  66.69192358,  88.42575348],\n        ...,\n        [ 31.69679346, 101.09097511,  32.56956811],\n        [148.25558444,  50.48937963, 103.02389557],\n        [170.53973503,  42.45131739,   7.22075687]],\n\n       [[ 81.39860974,  97.00223551,   5.23367679],\n        [ 28.60567987, 120.58701662, 119.74595091],\n        [ 24.85236716,  47.00875165,  62.47517088],\n        ...,\n        [ 27.08894035, 109.52428738,  89.74107174],\n        [101.36114868,  44.00684249,  63.21585206],\n        [ 45.44140301,  42.24565628,  32.21911083]],\n\n       [[ 85.15403518,  72.24973621, 101.9819129 ],\n        [ 69.33515359,  91.23129494, 140.7847575 ],\n        [ 45.56776301, 101.34687473,  65.85446419],\n        ...,\n        [ 39.67975301,  28.28842643,  52.09586543],\n        [227.54401728,  35.04100696,  46.01622763],\n        [141.84401665, 229.02600795,   5.01932257]],\n\n       [[170.73574582,   6.64000168, 256.76699449],\n        [ 77.7241646 ,  58.94863209,  63.38158179],\n        [ 92.43500404,  57.06879911,  99.61428138],\n        ...,\n        [ 34.21264796,  52.28070628, 126.57472452],\n        [179.13659055,  72.88096661,  55.7761304 ],\n        [179.13659055,  72.88096661,  55.7761304 ]]])winrate(chain, draw, replay)float640.3884 0.244 ... 0.846 0.3018array([[[0.38840135, 0.24397871, 0.67393861, ..., 0.70745598,\n         0.67221636, 0.41190061],\n        [0.30145528, 0.13670806, 0.50855856, ..., 0.84272985,\n         0.71716256, 0.52386025],\n        [0.27877826, 0.26921766, 0.70873675, ..., 0.69606027,\n         0.57933223, 0.54571002],\n        ...,\n        [0.45417135, 0.32451442, 0.57895556, ..., 0.66816823,\n         0.67136651, 0.31963761],\n        [0.45297858, 0.36337639, 0.79449259, ..., 0.81256357,\n         0.70411153, 0.5422807 ],\n        [0.485852  , 0.36502532, 0.65431758, ..., 0.83608882,\n         0.71723646, 0.38343406]],\n\n       [[0.33521265, 0.20123624, 0.7051384 , ..., 0.50383932,\n         0.5404183 , 0.43275976],\n        [0.36348169, 0.3696986 , 0.60762375, ..., 0.61081735,\n         0.61774329, 0.47810857],\n        [0.41910992, 0.3370959 , 0.51683711, ..., 0.63254534,\n         0.63251832, 0.37372364],\n        ...,\n        [0.37155715, 0.18033725, 0.6357291 , ..., 0.52373938,\n         0.57423102, 0.37619612],\n        [0.31930178, 0.181388  , 0.58734606, ..., 0.44433253,\n         0.5247373 , 0.34849273],\n        [0.35606613, 0.28678965, 0.67841064, ..., 0.75105153,\n         0.76967316, 0.41755699]],\n\n       [[0.35077423, 0.20990227, 0.69572652, ..., 0.67417267,\n         0.7237621 , 0.36555445],\n        [0.26014989, 0.20870266, 0.71619203, ..., 0.63645155,\n         0.66626863, 0.49046362],\n        [0.54851081, 0.35499039, 0.51979175, ..., 0.73475424,\n         0.70638391, 0.26082117],\n        ...,\n        [0.54483632, 0.39798298, 0.73459157, ..., 0.72582073,\n         0.72964516, 0.4424017 ],\n        [0.49580194, 0.33216402, 0.61279042, ..., 0.66320592,\n         0.73867943, 0.32134157],\n        [0.45334239, 0.12582742, 0.59087079, ..., 0.72565421,\n         0.69241571, 0.31111641]],\n\n       [[0.38859158, 0.27274337, 0.62694182, ..., 0.71623942,\n         0.71286761, 0.51480671],\n        [0.33542055, 0.20310077, 0.63505131, ..., 0.63727424,\n         0.60658696, 0.38693233],\n        [0.57092553, 0.36838244, 0.65558424, ..., 0.7776215 ,\n         0.81879732, 0.42196867],\n        ...,\n        [0.41075375, 0.29736221, 0.43971402, ..., 0.83029583,\n         0.81630679, 0.33875661],\n        [0.64368704, 0.48558788, 0.62404084, ..., 0.83050419,\n         0.84598416, 0.30180419],\n        [0.64368704, 0.48558788, 0.62404084, ..., 0.83050419,\n         0.84598416, 0.30180419]]])Attributes: (4)created_at :2020-06-20T10:35:37.090348arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  log_likelihood\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000replay: 138Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(chain, draw, replay)float64-0.9457 -0.2797 ... -0.1673 -1.198array([[[-0.94571606, -0.27968575, -1.1206696 , ..., -0.34607987,\n         -0.39717502, -0.88697319],\n        [-1.1991336 , -0.14700236, -0.7104125 , ..., -0.17110883,\n         -0.33245274, -0.64653033],\n        [-1.27733859, -0.31363962, -1.23352778, ..., -0.36231903,\n         -0.54587916, -0.60566754],\n        ...,\n        [-0.78928073, -0.39232348, -0.86501689, ..., -0.40321529,\n         -0.39844008, -1.14056741],\n        [-0.79191044, -0.45157668, -1.58227317, ..., -0.20756113,\n         -0.35081851, -0.61197151],\n        [-0.72185124, -0.45417016, -1.0622348 , ..., -0.17902043,\n         -0.3323497 , -0.95858761]],\n\n       [[-1.09299019, -0.22469005, -1.2212492 , ..., -0.68549787,\n         -0.61541181, -0.83757254],\n        [-1.01202636, -0.46155716, -0.93553407, ..., -0.4929573 ,\n         -0.48168229, -0.73791744],\n        [-0.86962207, -0.41112495, -0.72740143, ..., -0.45800338,\n         -0.4580461 , -0.9842387 ],\n        ...,\n        [-0.99005259, -0.1988623 , -1.00985747, ..., -0.64676108,\n         -0.5547235 , -0.97764469],\n        [-1.1416186 , -0.20014505, -0.88514597, ..., -0.81118206,\n         -0.64485752, -1.0541379 ],\n        [-1.03263881, -0.33797888, -1.13447981, ..., -0.28628102,\n         -0.26178932, -0.87333424]],\n\n       [[-1.04761249, -0.23559864, -1.18982837, ..., -0.39426901,\n         -0.32329253, -1.00634002],\n        [-1.34649731, -0.23408148, -1.25945741, ..., -0.45184699,\n         -0.40606233, -0.71240417],\n        [-0.60054829, -0.43849007, -0.73353543, ..., -0.30821921,\n         -0.34759641, -1.34392027],\n        ...,\n        [-0.60726986, -0.50746956, -1.3264854 , ..., -0.32045223,\n         -0.31519695, -0.81553699],\n        [-0.70157875, -0.40371268, -0.94878918, ..., -0.41066975,\n         -0.30289124, -1.13525063],\n        [-0.7911076 , -0.13447746, -0.89372426, ..., -0.32068168,\n         -0.36756877, -1.16758814]],\n\n       [[-0.9452264 , -0.31847587, -0.98602091, ..., -0.33374078,\n         -0.33845955, -0.66396377],\n        [-1.09237016, -0.22702705, -1.00799851, ..., -0.45055519,\n         -0.49990719, -0.94950547],\n        [-0.56049651, -0.45947119, -1.06590574, ..., -0.25151537,\n         -0.1999187 , -0.86282421],\n        ...,\n        [-0.88976139, -0.35291376, -0.57930794, ..., -0.18597321,\n         -0.20296503, -1.08247338],\n        [-0.44054263, -0.66473054, -0.97827477, ..., -0.1857223 ,\n         -0.16725464, -1.19797685],\n        [-0.44054263, -0.66473054, -0.97827477, ..., -0.1857223 ,\n         -0.16725464, -1.19797685]]])Attributes: (4)created_at :2020-06-20T10:35:37.087198arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000Coordinates: (2)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])Data variables: (10)step_size_bar(chain, draw)float640.4374 0.4374 ... 0.4903 0.4903array([[0.4374115 , 0.4374115 , 0.4374115 , ..., 0.4374115 , 0.4374115 ,\n        0.4374115 ],\n       [0.45402308, 0.45402308, 0.45402308, ..., 0.45402308, 0.45402308,\n        0.45402308],\n       [0.41388167, 0.41388167, 0.41388167, ..., 0.41388167, 0.41388167,\n        0.41388167],\n       [0.49034327, 0.49034327, 0.49034327, ..., 0.49034327, 0.49034327,\n        0.49034327]])energy_error(chain, draw)float64-1.016 0.3132 ... 0.6163 0.0array([[-1.01642236,  0.31318099, -0.14019916, ..., -0.00712864,\n        -0.41741377, -0.08385882],\n       [-0.38042493, -1.50079731, -0.16318778, ..., -0.24735973,\n        -0.2886005 , -0.17678952],\n       [-2.01224887, -0.89066887,  0.47713108, ..., -1.70039887,\n         0.31851951,  0.11482341],\n       [ 1.43938357,  0.2229521 ,  0.32288281, ..., -0.04535445,\n         0.61629039,  0.        ]])step_size(chain, draw)float640.4386 0.4386 ... 0.425 0.425array([[0.43855251, 0.43855251, 0.43855251, ..., 0.43855251, 0.43855251,\n        0.43855251],\n       [0.48249608, 0.48249608, 0.48249608, ..., 0.48249608, 0.48249608,\n        0.48249608],\n       [0.44391835, 0.44391835, 0.44391835, ..., 0.44391835, 0.44391835,\n        0.44391835],\n       [0.42501071, 0.42501071, 0.42501071, ..., 0.42501071, 0.42501071,\n        0.42501071]])max_energy_error(chain, draw)float64-1.287 1.11 -0.4291 ... 1.535 5.196array([[-1.28737009,  1.11007453, -0.42910467, ...,  0.91347544,\n         0.52800764,  0.47859559],\n       [-0.48591337, -1.50079731,  2.16250099, ..., -0.24735973,\n         3.77015272, -0.76572754],\n       [-2.328056  ,  1.01810228,  0.80442549, ..., -1.70039887,\n        -0.55804924, 74.25084326],\n       [38.71084628,  1.20965313,  0.49249056, ...,  1.35746487,\n         1.53478843,  5.19565611]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])depth(chain, draw)int644 3 3 4 4 3 3 3 ... 3 3 3 3 3 3 3 3array([[4, 3, 3, ..., 3, 3, 4],\n       [3, 3, 3, ..., 3, 3, 3],\n       [4, 3, 3, ..., 4, 4, 4],\n       [3, 3, 3, ..., 3, 3, 3]])mean_tree_accept(chain, draw)float640.9054 0.7214 ... 0.4055 0.07633array([[0.90541692, 0.72142566, 0.93134252, ..., 0.85369685, 0.9554831 ,\n        0.86302654],\n       [0.99759711, 0.99963932, 0.88165678, ..., 0.96310244, 0.78523323,\n        0.97673572],\n       [0.99816125, 0.88683585, 0.75217549, ..., 0.96863687, 0.92512264,\n        0.86677524],\n       [0.40260816, 0.83998264, 0.84497975, ..., 0.76832421, 0.4055396 ,\n        0.07633182]])energy(chain, draw)float64356.5 384.7 373.6 ... 368.5 373.4array([[356.54520829, 384.72052031, 373.61948961, ..., 390.95997962,\n        395.89754948, 395.0117275 ],\n       [410.94614041, 383.5146222 , 361.83684381, ..., 373.49242948,\n        364.71453224, 360.19568382],\n       [391.28602749, 376.75745726, 387.21260602, ..., 390.37738103,\n        377.07691302, 389.32502442],\n       [358.39179418, 363.878841  , 377.07222589, ..., 378.63812646,\n        368.46859802, 373.42582631]])lp(chain, draw)float64-302.1 -305.8 ... -302.2 -302.2array([[-302.08558028, -305.77270943, -300.43477915, ..., -320.70266421,\n        -315.38015305, -311.86956419],\n       [-324.9312429 , -298.99886287, -298.64220017, ..., -301.73942136,\n        -301.70998423, -295.83681186],\n       [-310.88193965, -301.57205804, -313.61330102, ..., -309.33294253,\n        -310.28663405, -315.73379124],\n       [-294.91496388, -306.34122894, -309.38563566, ..., -304.01227822,\n        -302.20722956, -302.20722956]])tree_size(chain, draw)float6415.0 7.0 7.0 15.0 ... 7.0 7.0 7.0array([[15.,  7.,  7., ...,  7.,  7., 15.],\n       [ 7.,  7.,  7., ...,  7.,  7.,  7.],\n       [15.,  7.,  7., ..., 15., 15., 15.],\n       [ 7.,  7.,  7., ...,  7.,  7.,  7.]])Attributes: (6)created_at :2020-06-20T10:35:36.562793arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :18.211029291152954tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  prior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (3)\u03bc(chain, draw, race)float644.487e+03 3.816e+03 ... 4.079e+03array([[[4487.3036091 , 3816.4730759 , 3841.54847432],\n        [3678.10941335, 4259.6222888 , 3309.53839094],\n        [4523.44352926, 3771.63792973, 4095.71172882],\n        ...,\n        [3793.7352304 , 3936.80991215, 3897.05804332],\n        [4287.27113474, 4067.38137671, 3856.85673442],\n        [3792.63645476, 3763.38063103, 4079.25539045]]])\u03c3(chain, draw, race)float6410.45 53.54 169.3 ... 210.5 146.2array([[[ 10.45030045,  53.53690568, 169.32540234],\n        [ 23.57617238,  10.93212404,  83.18141646],\n        [125.6331917 ,  94.68059879, 168.58509729],\n        ...,\n        [ 54.01739286, 112.35908554, 107.02562404],\n        [144.26356103,  77.82838645,   9.93539497],\n        [ 81.81960096, 210.54208204, 146.24259794]]])winrate(chain, draw, replay)float640.4452 0.4443 ... 0.4049 0.3675array([[[0.44516586, 0.44432904, 0.49543905, ..., 0.79673329,\n         0.80140205, 0.28212387],\n        [0.7972168 , 0.68737573, 0.21071926, ..., 0.31760374,\n         0.3228919 , 0.08274033],\n        [0.46947403, 0.43159697, 0.78947532, ..., 0.82439068,\n         0.80940984, 0.32718542],\n        ...,\n        [0.74439685, 0.57396175, 0.48594935, ..., 0.37104134,\n         0.37754386, 0.3333573 ],\n        [0.70701564, 0.56655281, 0.54098671, ..., 0.57389202,\n         0.76269576, 0.26823939],\n        [0.59530994, 0.28697282, 0.72372083, ..., 0.36763267,\n         0.40492739, 0.36749525]]])Attributes: (4)created_at :2020-06-20T10:35:37.093692arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  prior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000replay: 138Coordinates: (3)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(chain, draw, replay)int641 1 0 0 1 1 1 0 ... 0 0 0 1 1 0 0 0array([[[1, 1, 0, ..., 1, 1, 0],\n        [1, 1, 0, ..., 0, 0, 0],\n        [1, 0, 0, ..., 1, 1, 0],\n        ...,\n        [1, 1, 0, ..., 0, 0, 0],\n        [1, 1, 0, ..., 1, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0]]])Attributes: (4)created_at :2020-06-20T10:35:37.095318arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 138Coordinates: (1)replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(replay)float641.0 0.0 0.0 1.0 ... 1.0 1.0 1.0 1.0array([1., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1.,\n       1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 0.,\n       0., 0., 1., 0., 1., 1., 1., 1., 1., 1., 1., 0., 1., 0., 1., 0., 1.,\n       0., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,\n       1., 1., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 1., 0., 1., 1., 0.,\n       0., 1., 0., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,\n       1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0., 1., 1., 1.,\n       0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 1.,\n       1., 1.])Attributes: (4)created_at :2020-06-20T10:35:37.096098arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  constant_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 138Coordinates: (1)replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (2)enemy_race(replay)int321 1 2 2 1 1 2 1 ... 2 2 0 2 2 0 0 2array([1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 2,\n       2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 2, 2, 2, 1, 0,\n       0, 1, 0, 2, 2, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2,\n       1, 2, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1,\n       2, 1, 0, 2, 2, 2, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2,\n       0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 1, 2, 2,\n       0, 2, 2, 0, 0, 2], dtype=int32)enemy_mmr(replay)int323748 3946 3802 ... 3977 3937 4240array([3748, 3946, 3802, 3816, 3701, 3861, 3907, 4066, 3757, 4350, 3964,\n       3894, 3932, 3952, 3955, 3912, 3744, 3492, 4642, 3756, 3664, 3769,\n       3871, 3631, 3631, 3685, 3626, 3647, 3626, 3736, 3784, 3856, 3866,\n       3847, 3883, 3761, 3686, 3827, 3771, 3752, 3803, 3922, 3888, 3900,\n       3962, 3992, 3798, 3797, 3790, 3966, 3881, 3823, 3904, 3920, 3907,\n       3961, 3874, 3570, 4359, 4009, 3859, 3988, 3885, 4020, 3935, 3908,\n       4596, 4851, 3941, 3808, 3942, 3854, 3956, 3976, 3998, 3953, 4068,\n       3960, 4016, 4055, 3925, 4104, 3989, 4001, 4237, 4161, 4024, 4108,\n       4125, 4028, 4012, 3992, 4144, 4029, 4051, 4131, 4407, 4037, 3965,\n       3944, 4169, 3882, 4018, 4066, 3828, 3957, 4181, 4160, 3886, 3963,\n       3875, 3956, 3976, 3953, 3757, 4007, 3911, 3967, 4935, 3898, 3880,\n       3927, 3948, 3833, 3894, 3782, 3786, 3845, 3863, 3966, 3864, 3843,\n       3840, 4033, 3914, 3977, 3937, 4240], dtype=int32)Attributes: (4)created_at :2020-06-20T10:35:37.097169arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n              \n            \n             /* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n.xr-wrap{width:700px!important;} \n\n\n\n\n\n\n\n\n\n\nThat InferenceData ArviZ object lets us see everything the model picked up. It's really, really neat.\nWe had a few divergences; not too many, though Let's take a look at how the sampling went:\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \nvar_names = \"\u03bc \u03c3\".split()\naz.plot_trace(output, var_names=var_names);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \naz.summary(output, var_names = var_names)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[35]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      mean\n      sd\n      hdi_3%\n      hdi_97%\n      mcse_mean\n      mcse_sd\n      ess_mean\n      ess_sd\n      ess_bulk\n      ess_tail\n      r_hat\n    \n  \n  \n    \n      \u03bc[0]\n      4275.797\n      116.495\n      4066.919\n      4504.642\n      1.418\n      1.005\n      6750.0\n      6715.0\n      6767.0\n      4891.0\n      1.0\n    \n    \n      \u03bc[1]\n      3625.102\n      122.610\n      3403.476\n      3865.610\n      1.407\n      0.995\n      7597.0\n      7597.0\n      7622.0\n      4916.0\n      1.0\n    \n    \n      \u03bc[2]\n      3984.044\n      105.523\n      3785.491\n      4182.183\n      1.353\n      0.957\n      6082.0\n      6082.0\n      6082.0\n      4802.0\n      1.0\n    \n    \n      \u03c3[0]\n      78.531\n      59.788\n      0.019\n      184.598\n      0.819\n      0.692\n      5331.0\n      3737.0\n      4413.0\n      3198.0\n      1.0\n    \n    \n      \u03c3[1]\n      76.320\n      58.370\n      0.030\n      180.889\n      0.773\n      0.547\n      5699.0\n      5699.0\n      4607.0\n      3176.0\n      1.0\n    \n    \n      \u03c3[2]\n      85.882\n      64.475\n      0.266\n      201.367\n      0.970\n      0.686\n      4420.0\n      4420.0\n      3717.0\n      3351.0\n      1.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \naz.plot_pair(output, var_names='\u03bc', divergences=True);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[32]:\n\n    \naz.plot_pair(output, var_names='\u03c3', divergences=True);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlower sampling\u00b6Once again, we have a few divergences, but they don't seem to say anything concrete as far as I can tell. These could be false positives; we could increase target_accept, which is basically an inverse timestep for the simulation (shorter timesteps usually mean larger accuracy at the cost of more computational time).\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \nwith split_model:\n    trace = pm.sample(2000, tune=2000, chains=4, random_seed=1, target_accept=0.9)\n    output = az.from_pymc3(trace=trace,\n                           prior=pm.sample_prior_predictive(2000 , var_names=predictive_var_names, random_seed=1),\n                           posterior_predictive=pm.sample_posterior_predictive(trace, var_names=predictive_var_names, random_seed=1),\n                          )\noutput\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 2 jobs)\nNUTS: [helper, \u03c3, \u03bc]\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [16000/16000 00:34<00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\n\n\n    \n\n\n\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 34 seconds.\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [8000/8000 00:07<00:00]\n    \n    \n\n\n\n\n\n    Out[38]:\n\n\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (6)\u03bc(chain, draw, race)float644.192e+03 3.663e+03 ... 3.958e+03array([[[4191.82605585, 3662.56685124, 3976.78290968],\n        [4257.97578329, 3613.94126582, 3981.76487183],\n        [4298.83077594, 3669.01287593, 3980.01052311],\n        ...,\n        [4166.91919982, 3629.16545514, 3964.33087075],\n        [4253.24812539, 3840.22261721, 3984.01357522],\n        [4227.20217537, 3489.99729021, 3910.30300021]],\n\n       [[4239.12879032, 3801.8761701 , 4067.56023194],\n        [4217.78015886, 3898.22751246, 3973.50400805],\n        [4484.11725818, 3779.99293822, 4016.31411823],\n        ...,\n        [4258.99732702, 3596.77273898, 4039.48381277],\n        [4274.35096163, 3547.99306416, 4022.58218725],\n        [4212.3466215 , 3574.92200423, 4175.91083343]],\n\n       [[4108.92610165, 3552.9706627 , 3829.50707736],\n        [4384.06283782, 3691.27109238, 4135.1039508 ],\n        [4446.44987489, 3741.85060453, 4086.13686973],\n        ...,\n        [4335.40009373, 3731.15106938, 3962.55328323],\n        [4307.456269  , 3749.69690735, 4120.08021688],\n        [4190.8374136 , 3794.59313277, 4101.57910293]],\n\n       [[4272.61598805, 3719.24049327, 4048.31502213],\n        [4228.36765588, 3600.03935061, 3874.50140572],\n        [4293.21198926, 3603.78459054, 3897.61309849],\n        ...,\n        [4389.92203176, 3410.26310882, 3951.09193896],\n        [4282.64108689, 3725.26346768, 3981.54442129],\n        [4266.90287295, 3532.39900759, 3958.19034856]]])helper(chain, draw, replay)float64-0.3586 -1.85 ... 0.02351 -1.151array([[[-3.58569651e-01, -1.84989802e+00,  2.29563873e-01, ...,\n          9.50090310e-01,  1.56085276e+00,  8.22590552e-01],\n        [ 9.06258881e-01, -5.14902909e-01, -1.04868401e-01, ...,\n         -1.62571690e+00,  6.70900325e-01, -1.51883191e-01],\n        [-6.40631182e-01,  6.12057059e-01,  3.17121019e-01, ...,\n          1.36327897e+00, -1.11966799e+00,  1.72247767e-01],\n        ...,\n        [ 1.20412968e+00, -3.51638910e-01,  5.88442964e-01, ...,\n          9.28011498e-02, -5.64504440e-01, -7.09598482e-01],\n        [-1.96695828e+00, -6.73132651e-01,  4.44071882e-02, ...,\n          3.86901656e-01,  4.41467830e-01,  3.20274641e-01],\n        [ 1.42440822e+00,  6.00126327e-01, -3.94391564e-01, ...,\n         -4.39375166e-01, -4.45562672e-01, -1.77496465e+00]],\n\n       [[ 6.54007611e-01, -8.24447681e-01,  1.05125375e+00, ...,\n          1.17847687e+00, -6.69548837e-01, -1.15841741e+00],\n        [ 1.37685327e+00, -9.87904032e-01, -1.09741324e-02, ...,\n          2.88743415e-01, -1.12658686e+00, -1.38173770e+00],\n        [-3.18193693e-03,  2.41073061e-01, -1.22760501e-01, ...,\n         -7.64371279e-02, -4.78951612e-01,  2.60067221e-01],\n        ...,\n        [-6.27546050e-01,  9.98509713e-01, -1.11550676e+00, ...,\n         -2.26676217e-01, -1.38838943e-01, -9.93353582e-01],\n        [ 5.13204543e-01, -1.58241396e+00, -1.08417712e-01, ...,\n          4.68034271e-01,  3.76969235e-01, -4.04638391e-01],\n        [-1.76788541e-01,  9.32990055e-01,  4.28135341e-05, ...,\n          1.02912759e+00, -3.42634612e-02, -2.14568024e-01]],\n\n       [[ 8.77482038e-01,  5.66063006e-01, -4.11165561e-01, ...,\n          5.01402289e-01, -3.55815931e-02, -8.21029200e-01],\n        [-6.08466799e-01, -1.15355056e+00,  1.68031486e+00, ...,\n         -4.10245950e-01,  4.59513709e-01,  8.49965623e-01],\n        [-7.64269406e-01, -1.05121556e+00,  7.99346402e-01, ...,\n          1.65078612e-01,  1.01143791e+00, -1.84026189e-01],\n        ...,\n        [ 5.68352677e-01, -6.28746748e-01,  7.97804290e-01, ...,\n         -3.36482081e-01,  1.62106906e-01, -2.15009903e+00],\n        [ 1.59171993e+00, -3.55615603e-02,  2.37360931e+00, ...,\n         -1.80848977e+00,  7.13096344e-01, -2.17528450e-01],\n        [ 4.66494945e-01, -2.97893117e-01,  2.06685738e+00, ...,\n         -9.37338897e-01,  1.00084739e+00, -3.86379260e-01]],\n\n       [[ 1.67365693e+00,  7.21526403e-01,  1.06145479e+00, ...,\n          5.28478191e-01,  1.54626828e+00, -5.33971064e-01],\n        [-1.32996411e+00,  4.15343513e-01, -1.47097832e+00, ...,\n         -9.36878676e-01, -1.04900111e+00,  8.36467466e-01],\n        [-1.11769228e-01,  2.42671312e+00, -8.76540192e-01, ...,\n         -2.52865488e-01, -1.46753688e+00, -1.76933513e-01],\n        ...,\n        [ 8.56890908e-02,  2.39181911e-01, -8.68460585e-01, ...,\n         -2.21486333e+00, -1.43487594e-01, -5.96289347e-01],\n        [ 7.22463030e-02, -1.56334275e-01,  5.66600313e-01, ...,\n          2.37982042e+00,  3.10878601e-01,  1.35762265e+00],\n        [-4.91907389e-02,  3.76161952e-01, -6.80508953e-01, ...,\n         -1.94831032e+00,  2.35097946e-02, -1.15050624e+00]]])\u03c3(chain, draw, race)float64204.2 76.8 32.59 ... 31.32 94.91array([[[2.04242226e+02, 7.68008837e+01, 3.25943353e+01],\n        [4.18171668e+01, 7.45761818e+01, 1.19526142e+02],\n        [8.97354023e+01, 6.62820028e+01, 3.64307641e+01],\n        ...,\n        [1.60576390e+02, 2.31497996e+00, 2.58897070e+01],\n        [1.78390681e+01, 8.50597976e+00, 1.68203140e+02],\n        [7.31420294e+01, 1.27927535e+02, 4.83013062e+00]],\n\n       [[1.09849691e+02, 2.82949807e+01, 1.37658429e+02],\n        [1.87770432e+02, 3.34908584e+01, 1.10070610e+02],\n        [3.44636450e+01, 2.64758758e+02, 6.32728066e+01],\n        ...,\n        [1.08545694e+02, 1.90329689e+02, 7.53971341e+00],\n        [9.69128164e+01, 1.47267519e+02, 4.71936992e+01],\n        [3.24385154e+01, 1.87935685e+02, 1.02406167e+02]],\n\n       [[2.49993613e+02, 7.63470122e+01, 1.28194539e+02],\n        [1.22753266e+02, 1.00566005e+02, 1.26635005e+01],\n        [3.82276057e+01, 5.74721016e+01, 1.87588800e+01],\n        ...,\n        [4.63901695e+01, 1.47619023e+00, 1.38726849e+02],\n        [2.26734894e+02, 5.42758590e+01, 2.25301282e+01],\n        [5.77676739e+01, 1.64411686e+02, 8.20206053e+01]],\n\n       [[5.11084577e+01, 2.58581172e+02, 6.86281538e+01],\n        [1.08308154e+02, 2.44693323e-01, 1.58790827e+02],\n        [1.99750479e+02, 1.51796727e+00, 9.00794021e+01],\n        ...,\n        [6.66429227e+01, 1.34972643e+02, 9.20364312e+01],\n        [1.06224961e+02, 3.81711978e+01, 9.23637668e+01],\n        [4.57938897e+01, 3.13248774e+01, 9.49120778e+01]]])MMR(chain, draw, replay)float643.635e+03 3.52e+03 ... 3.849e+03array([[[3635.02838514, 3520.49304836, 3984.26539153, ...,\n         4385.87461587, 4510.6180973 , 4003.59470195],\n        [3681.5265929 , 3575.54177283, 3969.2303564 , ...,\n         4189.99290857, 4286.03093408, 3963.61085993],\n        [3626.55055818, 3709.58124363, 3991.56348415, ...,\n         4421.16516306, 4198.35691828, 3986.28564086],\n        ...,\n        [3631.95299122, 3628.35141811, 3979.56548664, ...,\n         4181.82087345, 4076.27311465, 3945.95957399],\n        [3823.49170987, 3834.49696451, 3991.48300371, ...,\n         4260.15009037, 4261.12350006, 4037.88477541],\n        [3672.21832284, 3566.76997226, 3908.39803744, ...,\n         4195.06538405, 4194.6128173 , 3901.72968909]],\n\n       [[3820.3813028 , 3778.54843892, 4212.27417155, ...,\n         4368.58411007, 4165.57905776, 3908.09431138],\n        [3944.33951023, 3865.14175844, 3972.2960786 , ...,\n         4271.99763448, 4006.24045846, 3821.41529706],\n        [3779.15049255, 3843.81914225, 4008.54671677, ...,\n         4481.48295614, 4467.61083985, 4032.76930122],\n        ...,\n        [3477.33209465, 3786.8187819 , 4031.07321149, ...,\n         4234.3925996 , 4243.92695754, 4031.99421144],\n        [3623.57142381, 3314.95488652, 4017.46555434, ...,\n         4319.70948106, 4310.88411195, 4003.48580472],\n        [3541.69712857, 3750.26412962, 4175.9152178 , ...,\n         4245.72999278, 4211.23516568, 4153.93774455]],\n\n       [[3619.96379451, 3596.18788193, 3776.79789789, ...,\n         4234.27347158, 4100.03093064, 3724.25561768],\n        [3630.08001753, 3575.26312196, 4156.3826188 , ...,\n         4333.70380745, 4440.4696466 , 4145.86749087],\n        [3697.92643555, 3681.43503719, 4101.13171294, ...,\n         4452.76043496, 4485.11472444, 4082.68474453],\n        ...,\n        [3731.99006605, 3730.22291957, 4073.23015874, ...,\n         4319.79063297, 4342.92026057, 3664.27681853],\n        [3836.08887366, 3747.76677311, 4173.55793881, ...,\n         3897.40853377, 4469.14009285, 4115.17927302],\n        [3871.290353  , 3745.61602321, 4271.10399599, ...,\n         4136.6895259 , 4248.65403921, 4069.88804217]],\n\n       [[4152.01666383, 3905.81363602, 4121.16070472, ...,\n         4299.62569332, 4351.64337494, 4011.66957382],\n        [3599.71391728, 3600.1409824 , 3640.92354229, ...,\n         4126.8960557 , 4114.7522814 , 4007.32476636],\n        [3603.61492851, 3607.46826165, 3818.6548821 , ...,\n         4242.70198684, 4000.07079332, 3881.67503342],\n        ...,\n        [3421.82879184, 3442.54612337, 3871.1619261 , ...,\n         4242.31706615, 4380.35959915, 3896.21159555],\n        [3728.0211956 , 3719.29600116, 4033.87776046, ...,\n         4535.43741766, 4315.66415412, 4106.93956281],\n        [3530.85811372, 3544.18223464, 3893.60182986, ...,\n         4177.68216515, 4267.9794779 , 3848.99341069]]])MMR_diff(chain, draw, replay)float64-113.0 -425.5 ... 331.0 -391.0array([[[-112.97161486, -425.50695164,  182.26539153, ...,\n          408.87461587,  573.6180973 , -236.40529805],\n        [ -66.4734071 , -370.45822717,  167.2303564 , ...,\n          212.99290857,  349.03093408, -276.38914007],\n        [-121.44944182, -236.41875637,  189.56348415, ...,\n          444.16516306,  261.35691828, -253.71435914],\n        ...,\n        [-116.04700878, -317.64858189,  177.56548664, ...,\n          204.82087345,  139.27311465, -294.04042601],\n        [  75.49170987, -111.50303549,  189.48300371, ...,\n          283.15009037,  324.12350006, -202.11522459],\n        [ -75.78167716, -379.23002774,  106.39803744, ...,\n          218.06538405,  257.6128173 , -338.27031091]],\n\n       [[  72.3813028 , -167.45156108,  410.27417155, ...,\n          391.58411007,  228.57905776, -331.90568862],\n        [ 196.33951023,  -80.85824156,  170.2960786 , ...,\n          294.99763448,   69.24045846, -418.58470294],\n        [  31.15049255, -102.18085775,  206.54671677, ...,\n          504.48295614,  530.61083985, -207.23069878],\n        ...,\n        [-270.66790535, -159.1812181 ,  229.07321149, ...,\n          257.3925996 ,  306.92695754, -208.00578856],\n        [-124.42857619, -631.04511348,  215.46555434, ...,\n          342.70948106,  373.88411195, -236.51419528],\n        [-206.30287143, -195.73587038,  373.9152178 , ...,\n          268.72999278,  274.23516568,  -86.06225545]],\n\n       [[-128.03620549, -349.81211807,  -25.20210211, ...,\n          257.27347158,  163.03093064, -515.74438232],\n        [-117.91998247, -370.73687804,  354.3826188 , ...,\n          356.70380745,  503.4696466 ,  -94.13250913],\n        [ -50.07356445, -264.56496281,  299.13171294, ...,\n          475.76043496,  548.11472444, -157.31525547],\n        ...,\n        [ -16.00993395, -215.77708043,  271.23015874, ...,\n          342.79063297,  405.92026057, -575.72318147],\n        [  88.08887366, -198.23322689,  371.55793881, ...,\n          -79.59146623,  532.14009285, -124.82072698],\n        [ 123.290353  , -200.38397679,  469.10399599, ...,\n          159.6895259 ,  311.65403921, -170.11195783]],\n\n       [[ 404.01666383,  -40.18636398,  319.16070472, ...,\n          322.62569332,  414.64337494, -228.33042618],\n        [-148.28608272, -345.8590176 , -161.07645771, ...,\n          149.8960557 ,  177.7522814 , -232.67523364],\n        [-144.38507149, -338.53173835,   16.6548821 , ...,\n          265.70198684,   63.07079332, -358.32496658],\n        ...,\n        [-326.17120816, -503.45387663,   69.1619261 , ...,\n          265.31706615,  443.35959915, -343.78840445],\n        [ -19.9788044 , -226.70399884,  231.87776046, ...,\n          558.43741766,  378.66415412, -133.06043719],\n        [-217.14188628, -401.81776536,   91.60182986, ...,\n          200.68216515,  330.9794779 , -391.00658931]]])winrate(chain, draw, replay)float640.4266 0.2472 ... 0.7039 0.2644array([[[0.4266338 , 0.24724307, 0.61701816, ..., 0.74456852,\n         0.81771078, 0.35010631],\n        [0.45662615, 0.2750138 , 0.60768   , ..., 0.63583029,\n         0.71366787, 0.32669033],\n        [0.42121652, 0.3500983 , 0.62152047, ..., 0.7617306 ,\n         0.6645996 , 0.33987251],\n        ...,\n        [0.42466653, 0.30340175, 0.61410799, ..., 0.63086488,\n         0.59010958, 0.31661356],\n        [0.54922247, 0.42757404, 0.62147094, ..., 0.67718895,\n         0.70016698, 0.37078528],\n        [0.4505897 , 0.2704613 , 0.56915351, ..., 0.63889797,\n         0.66241233, 0.29212013]],\n\n       [[0.54720674, 0.39218202, 0.74526436, ..., 0.73586936,\n         0.64522013, 0.29557572],\n        [0.62568207, 0.44730353, 0.60959075, ..., 0.68392811,\n         0.54516971, 0.25062949],\n        [0.52036562, 0.4335544 , 0.63191587, ..., 0.78918453,\n         0.80033389, 0.36766795],\n        ...,\n        [0.3299917 , 0.39735231, 0.64551605, ..., 0.66228347,\n         0.69063659, 0.36719657],\n        [0.4193173 , 0.16095004, 0.63732707, ..., 0.71027596,\n         0.72676986, 0.35004148],\n        [0.36823254, 0.37468792, 0.72678602, ..., 0.66888622,\n         0.67206874, 0.44393964]],\n\n       [[0.41702061, 0.28591462, 0.48352018, ..., 0.66221375,\n         0.6050573 , 0.20595485],\n        [0.4234696 , 0.27486845, 0.71652076, ..., 0.71775279,\n         0.78874307, 0.43873325],\n        [0.46729148, 0.33353189, 0.68626179, ..., 0.77640925,\n         0.8075522 , 0.39852206],\n        ...,\n        [0.48952874, 0.36248454, 0.67033349, ..., 0.71031966,\n         0.74309555, 0.18146961],\n        [0.55736901, 0.37315816, 0.72555955, ..., 0.44812312,\n         0.80097255, 0.41906748],\n        [0.57995735, 0.37184275, 0.77337113, ..., 0.60296614,\n         0.69327302, 0.39052391]],\n\n       [[0.74214352, 0.47373655, 0.69743382, ..., 0.69934358,\n         0.74742865, 0.35492881],\n        [0.40419849, 0.28803111, 0.39616541, ..., 0.59681559,\n         0.61422381, 0.35233025],\n        [0.40665901, 0.2919787 , 0.51089296, ..., 0.66712911,\n         0.54116397, 0.28138867],\n        ...,\n        [0.29870941, 0.2112638 , 0.54511876, ..., 0.66690541,\n         0.76134783, 0.28914344],\n        [0.48693397, 0.35590376, 0.64719344, ..., 0.81171504,\n         0.72924646, 0.41382809],\n        [0.3616597 , 0.25895906, 0.55963552, ..., 0.62833948,\n         0.70391943, 0.26442445]]])Attributes: (6)created_at :2020-06-20T14:25:20.065376arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :34.35768222808838tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  posterior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')Data variables: (4)win(chain, draw, replay)int640 0 1 1 0 0 1 0 ... 1 0 1 0 0 1 1 0array([[[0, 0, 1, ..., 1, 1, 0],\n        [1, 1, 1, ..., 1, 0, 1],\n        [0, 0, 1, ..., 1, 0, 1],\n        ...,\n        [1, 0, 0, ..., 1, 1, 1],\n        [0, 1, 1, ..., 1, 1, 0],\n        [0, 0, 1, ..., 1, 1, 1]],\n\n       [[0, 0, 0, ..., 1, 1, 0],\n        [0, 0, 1, ..., 1, 1, 0],\n        [1, 0, 1, ..., 1, 1, 0],\n        ...,\n        [1, 0, 1, ..., 0, 0, 1],\n        [1, 0, 1, ..., 1, 1, 0],\n        [1, 0, 1, ..., 0, 1, 0]],\n\n       [[1, 1, 1, ..., 0, 0, 0],\n        [1, 0, 1, ..., 1, 1, 0],\n        [1, 1, 0, ..., 1, 1, 1],\n        ...,\n        [0, 0, 0, ..., 1, 1, 0],\n        [1, 1, 1, ..., 0, 1, 0],\n        [0, 1, 1, ..., 1, 1, 0]],\n\n       [[1, 1, 1, ..., 1, 1, 0],\n        [0, 0, 0, ..., 1, 0, 0],\n        [1, 1, 0, ..., 1, 0, 1],\n        ...,\n        [0, 0, 1, ..., 0, 1, 1],\n        [0, 0, 0, ..., 1, 0, 0],\n        [1, 0, 0, ..., 1, 1, 0]]])\u03bc(chain, draw, race)float644.192e+03 3.663e+03 ... 3.958e+03array([[[4191.82605585, 3662.56685124, 3976.78290968],\n        [4257.97578329, 3613.94126582, 3981.76487183],\n        [4298.83077594, 3669.01287593, 3980.01052311],\n        ...,\n        [4166.91919982, 3629.16545514, 3964.33087075],\n        [4253.24812539, 3840.22261721, 3984.01357522],\n        [4227.20217537, 3489.99729021, 3910.30300021]],\n\n       [[4239.12879032, 3801.8761701 , 4067.56023194],\n        [4217.78015886, 3898.22751246, 3973.50400805],\n        [4484.11725818, 3779.99293822, 4016.31411823],\n        ...,\n        [4258.99732702, 3596.77273898, 4039.48381277],\n        [4274.35096163, 3547.99306416, 4022.58218725],\n        [4212.3466215 , 3574.92200423, 4175.91083343]],\n\n       [[4108.92610165, 3552.9706627 , 3829.50707736],\n        [4384.06283782, 3691.27109238, 4135.1039508 ],\n        [4446.44987489, 3741.85060453, 4086.13686973],\n        ...,\n        [4335.40009373, 3731.15106938, 3962.55328323],\n        [4307.456269  , 3749.69690735, 4120.08021688],\n        [4190.8374136 , 3794.59313277, 4101.57910293]],\n\n       [[4272.61598805, 3719.24049327, 4048.31502213],\n        [4228.36765588, 3600.03935061, 3874.50140572],\n        [4293.21198926, 3603.78459054, 3897.61309849],\n        ...,\n        [4389.92203176, 3410.26310882, 3951.09193896],\n        [4282.64108689, 3725.26346768, 3981.54442129],\n        [4266.90287295, 3532.39900759, 3958.19034856]]])\u03c3(chain, draw, race)float64204.2 76.8 32.59 ... 31.32 94.91array([[[2.04242226e+02, 7.68008837e+01, 3.25943353e+01],\n        [4.18171668e+01, 7.45761818e+01, 1.19526142e+02],\n        [8.97354023e+01, 6.62820028e+01, 3.64307641e+01],\n        ...,\n        [1.60576390e+02, 2.31497996e+00, 2.58897070e+01],\n        [1.78390681e+01, 8.50597976e+00, 1.68203140e+02],\n        [7.31420294e+01, 1.27927535e+02, 4.83013062e+00]],\n\n       [[1.09849691e+02, 2.82949807e+01, 1.37658429e+02],\n        [1.87770432e+02, 3.34908584e+01, 1.10070610e+02],\n        [3.44636450e+01, 2.64758758e+02, 6.32728066e+01],\n        ...,\n        [1.08545694e+02, 1.90329689e+02, 7.53971341e+00],\n        [9.69128164e+01, 1.47267519e+02, 4.71936992e+01],\n        [3.24385154e+01, 1.87935685e+02, 1.02406167e+02]],\n\n       [[2.49993613e+02, 7.63470122e+01, 1.28194539e+02],\n        [1.22753266e+02, 1.00566005e+02, 1.26635005e+01],\n        [3.82276057e+01, 5.74721016e+01, 1.87588800e+01],\n        ...,\n        [4.63901695e+01, 1.47619023e+00, 1.38726849e+02],\n        [2.26734894e+02, 5.42758590e+01, 2.25301282e+01],\n        [5.77676739e+01, 1.64411686e+02, 8.20206053e+01]],\n\n       [[5.11084577e+01, 2.58581172e+02, 6.86281538e+01],\n        [1.08308154e+02, 2.44693323e-01, 1.58790827e+02],\n        [1.99750479e+02, 1.51796727e+00, 9.00794021e+01],\n        ...,\n        [6.66429227e+01, 1.34972643e+02, 9.20364312e+01],\n        [1.06224961e+02, 3.81711978e+01, 9.23637668e+01],\n        [4.57938897e+01, 3.13248774e+01, 9.49120778e+01]]])winrate(chain, draw, replay)float640.4266 0.2472 ... 0.7039 0.2644array([[[0.4266338 , 0.24724307, 0.61701816, ..., 0.74456852,\n         0.81771078, 0.35010631],\n        [0.45662615, 0.2750138 , 0.60768   , ..., 0.63583029,\n         0.71366787, 0.32669033],\n        [0.42121652, 0.3500983 , 0.62152047, ..., 0.7617306 ,\n         0.6645996 , 0.33987251],\n        ...,\n        [0.42466653, 0.30340175, 0.61410799, ..., 0.63086488,\n         0.59010958, 0.31661356],\n        [0.54922247, 0.42757404, 0.62147094, ..., 0.67718895,\n         0.70016698, 0.37078528],\n        [0.4505897 , 0.2704613 , 0.56915351, ..., 0.63889797,\n         0.66241233, 0.29212013]],\n\n       [[0.54720674, 0.39218202, 0.74526436, ..., 0.73586936,\n         0.64522013, 0.29557572],\n        [0.62568207, 0.44730353, 0.60959075, ..., 0.68392811,\n         0.54516971, 0.25062949],\n        [0.52036562, 0.4335544 , 0.63191587, ..., 0.78918453,\n         0.80033389, 0.36766795],\n        ...,\n        [0.3299917 , 0.39735231, 0.64551605, ..., 0.66228347,\n         0.69063659, 0.36719657],\n        [0.4193173 , 0.16095004, 0.63732707, ..., 0.71027596,\n         0.72676986, 0.35004148],\n        [0.36823254, 0.37468792, 0.72678602, ..., 0.66888622,\n         0.67206874, 0.44393964]],\n\n       [[0.41702061, 0.28591462, 0.48352018, ..., 0.66221375,\n         0.6050573 , 0.20595485],\n        [0.4234696 , 0.27486845, 0.71652076, ..., 0.71775279,\n         0.78874307, 0.43873325],\n        [0.46729148, 0.33353189, 0.68626179, ..., 0.77640925,\n         0.8075522 , 0.39852206],\n        ...,\n        [0.48952874, 0.36248454, 0.67033349, ..., 0.71031966,\n         0.74309555, 0.18146961],\n        [0.55736901, 0.37315816, 0.72555955, ..., 0.44812312,\n         0.80097255, 0.41906748],\n        [0.57995735, 0.37184275, 0.77337113, ..., 0.60296614,\n         0.69327302, 0.39052391]],\n\n       [[0.74214352, 0.47373655, 0.69743382, ..., 0.69934358,\n         0.74742865, 0.35492881],\n        [0.40419849, 0.28803111, 0.39616541, ..., 0.59681559,\n         0.61422381, 0.35233025],\n        [0.40665901, 0.2919787 , 0.51089296, ..., 0.66712911,\n         0.54116397, 0.28138867],\n        ...,\n        [0.29870941, 0.2112638 , 0.54511876, ..., 0.66690541,\n         0.76134783, 0.28914344],\n        [0.48693397, 0.35590376, 0.64719344, ..., 0.81171504,\n         0.72924646, 0.41382809],\n        [0.3616597 , 0.25895906, 0.55963552, ..., 0.62833948,\n         0.70391943, 0.26442445]]])Attributes: (4)created_at :2020-06-20T14:25:20.600612arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  log_likelihood\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000replay: 138Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(chain, draw, replay)float64-0.8518 -0.284 ... -0.3511 -1.33array([[[-0.85182925, -0.28401291, -0.9597677 , ..., -0.2949504 ,\n         -0.20124657, -1.04951843],\n        [-0.78389028, -0.32160266, -0.93567745, ..., -0.45282359,\n         -0.33733759, -1.11874255],\n        [-0.86460828, -0.43093415, -0.9715933 , ..., -0.27216232,\n         -0.40857053, -1.07918469],\n        ...,\n        [-0.85645105, -0.36154643, -0.95219772, ..., -0.46066357,\n         -0.52744702, -1.1500733 ],\n        [-0.5992517 , -0.55787188, -0.97146243, ..., -0.38980495,\n         -0.35643643, -0.99213215],\n        [-0.79719812, -0.31534286, -0.84200343, ..., -0.44801051,\n         -0.41186706, -1.23059016]],\n\n       [[-0.6029286 , -0.49787982, -1.36752899, ..., -0.30670267,\n         -0.43816374, -1.21883022],\n        [-0.46891291, -0.59294631, -0.94055973, ..., -0.37990247,\n         -0.60665814, -1.38377958],\n        [-0.6532236 , -0.56837423, -0.99944377, ..., -0.23675511,\n         -0.22272627, -1.00057507],\n        ...,\n        [-1.10868777, -0.50642252, -1.03709221, ..., -0.41206162,\n         -0.37014152, -1.00185797],\n        [-0.86912737, -0.17548503, -1.01425387, ..., -0.3421017 ,\n         -0.31914541, -1.04970362],\n        [-0.99904063, -0.46950443, -1.2975    , ..., -0.40214131,\n         -0.39739466, -0.81206668]],\n\n       [[-0.87461964, -0.33675275, -0.66071906, ..., -0.4121669 ,\n         -0.50243211, -1.58009829],\n        [-0.85927356, -0.32140219, -1.26061639, ..., -0.33163007,\n         -0.23731465, -0.82386367],\n        [-0.76080206, -0.40576299, -1.15919636, ..., -0.25307552,\n         -0.21374759, -0.91999242],\n        ...,\n        [-0.71431211, -0.45017676, -1.10967372, ..., -0.34204019,\n         -0.29693065, -1.70666705],\n        [-0.58452777, -0.46706102, -1.29302097, ..., -0.80268726,\n         -0.2219286 , -0.86972333],\n        [-0.54480071, -0.46496474, -1.48444153, ..., -0.50589424,\n         -0.36633139, -0.94026608]],\n\n       [[-0.29821263, -0.64195333, -1.19545525, ..., -0.35761313,\n         -0.29111643, -1.03583805],\n        [-0.90584921, -0.33972107, -0.50445498, ..., -0.51614711,\n         -0.48739591, -1.04318632],\n        [-0.89978025, -0.3452811 , -0.71517392, ..., -0.40477168,\n         -0.61403296, -1.26801841],\n        ...,\n        [-1.20828404, -0.23732337, -0.7877189 , ..., -0.40510705,\n         -0.27266496, -1.2408324 ],\n        [-0.71962675, -0.43990713, -1.04183536, ..., -0.20860593,\n         -0.31574353, -0.88230464],\n        [-1.01705156, -0.2996994 , -0.82015253, ..., -0.46467469,\n         -0.35109138, -1.33019969]]])Attributes: (4)created_at :2020-06-20T14:25:20.597504arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000Coordinates: (2)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])Data variables: (10)step_size_bar(chain, draw)float640.294 0.294 0.294 ... 0.2907 0.2907array([[0.29398781, 0.29398781, 0.29398781, ..., 0.29398781, 0.29398781,\n        0.29398781],\n       [0.32832862, 0.32832862, 0.32832862, ..., 0.32832862, 0.32832862,\n        0.32832862],\n       [0.3100242 , 0.3100242 , 0.3100242 , ..., 0.3100242 , 0.3100242 ,\n        0.3100242 ],\n       [0.29071728, 0.29071728, 0.29071728, ..., 0.29071728, 0.29071728,\n        0.29071728]])energy_error(chain, draw)float64-1.165 0.1154 ... 0.2452 -0.1032array([[-1.16545649,  0.11543079,  0.05534909, ..., -0.02356721,\n         0.01416864,  0.22002702],\n       [-0.27486769,  0.46115983,  0.41228911, ..., -0.07802792,\n         0.1259835 , -0.33367031],\n       [-1.04578413,  0.16843381,  0.26006434, ..., -0.22386483,\n        -0.24002094,  0.22646569],\n       [-0.079549  ,  0.96347628,  0.0941145 , ...,  0.06526721,\n         0.24516089, -0.10319888]])step_size(chain, draw)float640.2628 0.2628 ... 0.3427 0.3427array([[0.26275736, 0.26275736, 0.26275736, ..., 0.26275736, 0.26275736,\n        0.26275736],\n       [0.32445057, 0.32445057, 0.32445057, ..., 0.32445057, 0.32445057,\n        0.32445057],\n       [0.33329653, 0.33329653, 0.33329653, ..., 0.33329653, 0.33329653,\n        0.33329653],\n       [0.34267612, 0.34267612, 0.34267612, ..., 0.34267612, 0.34267612,\n        0.34267612]])max_energy_error(chain, draw)float64-1.165 0.2965 ... 0.5785 -0.4783array([[-1.16545649,  0.2964833 , -0.21895137, ...,  0.48664513,\n         0.40310784, -0.67851845],\n       [ 0.67112042,  0.55722514,  0.41228911, ..., -0.28722158,\n         0.20634744, -0.3871516 ],\n       [ 1.49793689,  0.32854877,  0.92926063, ...,  1.32199749,\n         7.60500613,  1.06863903],\n       [-0.32793756,  3.07300588,  3.39102021, ...,  0.42629728,\n         0.57845417, -0.47834955]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])depth(chain, draw)int644 4 4 4 4 4 4 4 ... 4 4 4 4 4 4 4 4array([[4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4]])mean_tree_accept(chain, draw)float640.9887 0.9228 ... 0.7224 0.9945array([[0.9886637 , 0.92280831, 0.97142841, ..., 0.8910868 , 0.88488932,\n        0.93672292],\n       [0.90066886, 0.80011353, 0.90867509, ..., 0.99015461, 0.92949944,\n        0.99230292],\n       [0.95258493, 0.82788819, 0.61444807, ..., 0.95654644, 0.9694625 ,\n        0.6588462 ],\n       [0.99969745, 0.35548557, 0.94576827, ..., 0.83801927, 0.72241791,\n        0.99445689]])energy(chain, draw)float64372.8 372.4 379.1 ... 383.8 366.4array([[372.76445605, 372.4047956 , 379.13879775, ..., 388.4625056 ,\n        379.20274373, 363.47543194],\n       [364.17887204, 357.96746207, 377.37892682, ..., 370.05542217,\n        371.67089236, 364.45527508],\n       [376.65409707, 351.05076247, 380.10629174, ..., 389.53229808,\n        377.4382392 , 382.51445418],\n       [390.21491721, 407.90760972, 391.36807296, ..., 382.1347993 ,\n        383.81306147, 366.41006492]])lp(chain, draw)float64-301.0 -307.2 ... -306.8 -301.5array([[-300.95481382, -307.18827597, -308.94357562, ..., -307.24068004,\n        -299.47974489, -306.848432  ],\n       [-288.68782192, -302.46946337, -313.96012231, ..., -305.47765428,\n        -306.96534549, -299.15644208],\n       [-292.01283788, -290.82367657, -296.9325567 , ..., -309.11026093,\n        -303.66544734, -307.93238498],\n       [-311.48221322, -321.23575274, -318.54558226, ..., -303.81632684,\n        -306.83830943, -301.48182129]])tree_size(chain, draw)float6415.0 15.0 15.0 ... 15.0 15.0 15.0array([[15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.]])Attributes: (6)created_at :2020-06-20T14:25:20.072749arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :34.35768222808838tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  prior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000race: 3replay: 138Coordinates: (4)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (3)\u03bc(chain, draw, race)float644.487e+03 3.816e+03 ... 4.079e+03array([[[4487.3036091 , 3816.4730759 , 3841.54847432],\n        [3678.10941335, 4259.6222888 , 3309.53839094],\n        [4523.44352926, 3771.63792973, 4095.71172882],\n        ...,\n        [3793.7352304 , 3936.80991215, 3897.05804332],\n        [4287.27113474, 4067.38137671, 3856.85673442],\n        [3792.63645476, 3763.38063103, 4079.25539045]]])\u03c3(chain, draw, race)float6410.45 53.54 169.3 ... 210.5 146.2array([[[ 10.45030045,  53.53690568, 169.32540234],\n        [ 23.57617238,  10.93212404,  83.18141646],\n        [125.6331917 ,  94.68059879, 168.58509729],\n        ...,\n        [ 54.01739286, 112.35908554, 107.02562404],\n        [144.26356103,  77.82838645,   9.93539497],\n        [ 81.81960096, 210.54208204, 146.24259794]]])winrate(chain, draw, replay)float640.4452 0.4443 ... 0.4049 0.3675array([[[0.44516586, 0.44432904, 0.49543905, ..., 0.79673329,\n         0.80140205, 0.28212387],\n        [0.7972168 , 0.68737573, 0.21071926, ..., 0.31760374,\n         0.3228919 , 0.08274033],\n        [0.46947403, 0.43159697, 0.78947532, ..., 0.82439068,\n         0.80940984, 0.32718542],\n        ...,\n        [0.74439685, 0.57396175, 0.48594935, ..., 0.37104134,\n         0.37754386, 0.3333573 ],\n        [0.70701564, 0.56655281, 0.54098671, ..., 0.57389202,\n         0.76269576, 0.26823939],\n        [0.59530994, 0.28697282, 0.72372083, ..., 0.36763267,\n         0.40492739, 0.36749525]]])Attributes: (4)created_at :2020-06-20T14:25:20.604059arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  prior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000replay: 138Coordinates: (3)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(chain, draw, replay)int641 1 0 0 1 1 1 0 ... 0 0 0 1 1 0 0 0array([[[1, 1, 0, ..., 1, 1, 0],\n        [1, 1, 0, ..., 0, 0, 0],\n        [1, 0, 0, ..., 1, 1, 0],\n        ...,\n        [1, 1, 0, ..., 0, 0, 0],\n        [1, 1, 0, ..., 1, 0, 0],\n        [0, 0, 0, ..., 0, 0, 0]]])Attributes: (4)created_at :2020-06-20T14:25:20.605812arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 138Coordinates: (1)replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (1)win(replay)float641.0 0.0 0.0 1.0 ... 1.0 1.0 1.0 1.0array([1., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1.,\n       1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 0.,\n       0., 0., 1., 0., 1., 1., 1., 1., 1., 1., 1., 0., 1., 0., 1., 0., 1.,\n       0., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,\n       1., 1., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 1., 0., 1., 1., 0.,\n       0., 1., 0., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,\n       1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0., 1., 1., 1.,\n       0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 1.,\n       1., 1.])Attributes: (4)created_at :2020-06-20T14:25:20.606613arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  constant_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 138Coordinates: (1)replay(replay)int648 325 54 346 138 ... 25 208 59 364array([  8, 325,  54, 346, 138, 405,  20, 129, 104,  46, 302, 408, 101, 219,\n       316, 126,  98, 231, 241, 385, 193, 198,  90, 329, 137, 200,  80, 355,\n       317,  33,  64, 213, 368,  49, 435, 134, 254, 330,  60,  39, 218, 109,\n       301, 133, 328, 181, 156, 395,  43, 249,  27, 153, 211, 420, 366, 186,\n       163,  63, 202,  45,  69,  31, 167, 177,  95, 151, 392, 387,  18, 286,\n       102, 290, 195, 428, 403,  97, 406, 412, 374, 263, 371,  41, 212,  52,\n       238, 345,   4, 117, 407,  56, 103, 118, 319,  57, 128, 294,  15, 273,\n       327, 281, 378, 121, 113, 284, 422, 389, 216,  58, 418, 309, 123, 116,\n       222, 122,  11, 361, 179, 255, 239, 225, 381, 424, 343, 287, 341, 184,\n       380, 196, 174, 306, 252, 148, 416, 391,  25, 208,  59, 364])Data variables: (2)enemy_race(replay)int321 1 2 2 1 1 2 1 ... 2 2 0 2 2 0 0 2array([1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 2, 2, 1, 1, 0, 2, 2, 0, 0, 2, 0, 2,\n       2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 2, 2, 2, 1, 0,\n       0, 1, 0, 2, 2, 2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 2, 2, 2, 2, 1, 2,\n       1, 2, 0, 0, 0, 1, 0, 2, 2, 0, 0, 0, 0, 1, 0, 1, 2, 0, 1, 2, 2, 1,\n       2, 1, 0, 2, 2, 2, 1, 0, 0, 2, 1, 1, 1, 1, 0, 0, 0, 1, 0, 2, 0, 2,\n       0, 1, 0, 0, 2, 0, 0, 0, 2, 1, 0, 1, 1, 0, 2, 1, 0, 2, 0, 1, 2, 2,\n       0, 2, 2, 0, 0, 2], dtype=int32)enemy_mmr(replay)int323748 3946 3802 ... 3977 3937 4240array([3748, 3946, 3802, 3816, 3701, 3861, 3907, 4066, 3757, 4350, 3964,\n       3894, 3932, 3952, 3955, 3912, 3744, 3492, 4642, 3756, 3664, 3769,\n       3871, 3631, 3631, 3685, 3626, 3647, 3626, 3736, 3784, 3856, 3866,\n       3847, 3883, 3761, 3686, 3827, 3771, 3752, 3803, 3922, 3888, 3900,\n       3962, 3992, 3798, 3797, 3790, 3966, 3881, 3823, 3904, 3920, 3907,\n       3961, 3874, 3570, 4359, 4009, 3859, 3988, 3885, 4020, 3935, 3908,\n       4596, 4851, 3941, 3808, 3942, 3854, 3956, 3976, 3998, 3953, 4068,\n       3960, 4016, 4055, 3925, 4104, 3989, 4001, 4237, 4161, 4024, 4108,\n       4125, 4028, 4012, 3992, 4144, 4029, 4051, 4131, 4407, 4037, 3965,\n       3944, 4169, 3882, 4018, 4066, 3828, 3957, 4181, 4160, 3886, 3963,\n       3875, 3956, 3976, 3953, 3757, 4007, 3911, 3967, 4935, 3898, 3880,\n       3927, 3948, 3833, 3894, 3782, 3786, 3845, 3863, 3966, 3864, 3843,\n       3840, 4033, 3914, 3977, 3937, 4240], dtype=int32)Attributes: (4)created_at :2020-06-20T14:25:20.607687arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n              \n            \n             /* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n.xr-wrap{width:700px!important;} \n\n\n\n\n\n\n\n\n\n\nLooks like that helped!\n\n\n\n\n\n\nIn\u00a0[39]:\n\n    \naz.plot_trace(output, var_names=var_names);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also plot the posteriors and the Highest Density Intervals, whose value for the threshold of 94% says that our model is 94% sure my PvT average MMR is located between 4045 and 4489:\n\n\n\n\n\n\nIn\u00a0[41]:\n\n    \naz.plot_posterior(output, var_names = var_names);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis already shows us two things:\n\nthere are large differences in average MMR in the three matchups - as we had expected! This basically means I could go to TopTierPractice and use these MMR ranges to find practice partners at appropriate levels for the both of us. Interestingly, this means I should have been seeking better Terran players. (Note that this is last year's data).\nThe versus Zerg fluctuations are a tad larger than against the other races; this would mean there are more confounding variables. Game duration could be a factor; I feel much more confident in the midgame than in the extreme lategame or against early rushes.\n\nAnd this is honestly something you could start applying to your own data right now.\nNow, what I was going to do was to also apply a hierarchical model to this data; but, since it turns out I don't really understand them all that well just yet, and I'm running out of time for my pre-set deadling for this post, I'll postpone that for the next week.\nInstead, what we'll do is take a look at the current (this year's) data, using this exact same technique for a cheap replica of time dependence:\nAnalysis repeated for 2020 (easy code snippet!)\u00b6\n\n\n\n\n\nIn\u00a0[45]:\n\n    \ndata = all_data[(all_data['time_played_at'] > '2020-01-01')]\ndisplay(data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickname\n      map_name\n      duration\n      enemy_mmr\n      expected_winrate\n    \n  \n  \n    \n      265\n      2020-01-04 19:04:15+00:00\n      True\n      Protoss\n      Terran\n      4009\n      -29\n      R\u00eago\n      Nightshade LE\n      935\n      4038\n      0.481039\n    \n    \n      223\n      2020-01-04 19:07:07+00:00\n      True\n      Protoss\n      Protoss\n      4031\n      -132\n      &lt;un\u018aea\u018a&gt;<sp/>\u00f2M\u00e9g\u00e0\n      World of Sleepers LE\n      107\n      4163\n      0.414501\n    \n    \n      402\n      2020-01-04 19:19:31+00:00\n      False\n      Protoss\n      Terran\n      4057\n      -32\n      Tsumi\n      Eternal Empire LE\n      714\n      4089\n      0.479080\n    \n    \n      206\n      2020-01-05 14:03:19+00:00\n      False\n      Protoss\n      Zerg\n      4036\n      -160\n      &lt;Lowko&gt;<sp/>HardNeper\n      Eternal Empire LE\n      300\n      4196\n      0.396839\n    \n    \n      417\n      2020-01-05 14:18:07+00:00\n      True\n      Protoss\n      Terran\n      4019\n      14\n      delmak\n      Eternal Empire LE\n      867\n      4005\n      0.509157\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      1\n      2020-06-09 17:11:15+00:00\n      False\n      Protoss\n      Zerg\n      4186\n      39\n      djakette\n      Eternal Empire LE\n      420\n      4147\n      0.525489\n    \n    \n      210\n      2020-06-09 17:24:17+00:00\n      False\n      Protoss\n      Terran\n      4164\n      -68\n      StaMinA\n      Eternal Empire LE\n      758\n      4232\n      0.455635\n    \n    \n      188\n      2020-06-10 11:18:56+00:00\n      False\n      Protoss\n      Protoss\n      4144\n      -41\n      Guinness\n      Ice and Chrome LE\n      299\n      4185\n      0.473206\n    \n    \n      131\n      2020-06-10 11:27:56+00:00\n      False\n      Protoss\n      Terran\n      4125\n      125\n      Oink\n      Eternal Empire LE\n      211\n      4000\n      0.581047\n    \n    \n      144\n      2020-06-10 11:35:16+00:00\n      False\n      Protoss\n      Protoss\n      4100\n      -88\n      &lt;UATeam&gt;<sp/>click\n      Submarine LE\n      343\n      4188\n      0.442688\n    \n  \n\n202 rows \u00d7 11 columns\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \nbrush = altair.selection(type='interval')\nscatter = altair.Chart(data).mark_circle().encode(\n    altair.X('enemy_mmr',\n             scale=altair.Scale(zero=False)),\n    altair.Y('mmr',\n             scale=altair.Scale(zero=False)),\n    facet='enemy_race',\n    size='expected_winrate',\n    color='win',\n    tooltip='enemy_nickname',\n).add_selection(brush)\n\nbar = altair.Chart(data).mark_bar().encode(\n    x=altair.X('mean(win):Q', scale=altair.Scale(domain=(0, 1))),\n    y='enemy_race:O',\n).transform_filter(brush)\n\nscatter & bar\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[46]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-295f5fa887f249bd8923217ff868cafe\") {\n      outputDiv = document.getElementById(\"altair-viz-295f5fa887f249bd8923217ff868cafe\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"vconcat\": [{\"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"win\"}, \"facet\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"size\": {\"type\": \"quantitative\", \"field\": \"expected_winrate\"}, \"tooltip\": {\"type\": \"nominal\", \"field\": \"enemy_nickname\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"enemy_mmr\", \"scale\": {\"zero\": false}}, \"y\": {\"type\": \"quantitative\", \"field\": \"mmr\", \"scale\": {\"zero\": false}}}, \"selection\": {\"selector012\": {\"type\": \"interval\"}}}, {\"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"aggregate\": \"mean\", \"field\": \"win\", \"scale\": {\"domain\": [0, 1]}}, \"y\": {\"type\": \"ordinal\", \"field\": \"enemy_race\"}}, \"transform\": [{\"filter\": {\"selection\": \"selector012\"}}]}], \"data\": {\"name\": \"data-cc4fea315332d20ec04a9ba90e3d7555\"}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-cc4fea315332d20ec04a9ba90e3d7555\": [{\"time_played_at\": \"2020-01-04T19:04:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": -29, \"enemy_nickname\": \"R\\u00eago\", \"map_name\": \"Nightshade LE\", \"duration\": 935, \"enemy_mmr\": 4038, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-01-04T19:07:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4031, \"mmr_diff\": -132, \"enemy_nickname\": \"&lt;un\\u018aea\\u018a&gt;<sp/>\\u00f2M\\u00e9g\\u00e0\", \"map_name\": \"World of Sleepers LE\", \"duration\": 107, \"enemy_mmr\": 4163, \"expected_winrate\": 0.4145013213281905}, {\"time_played_at\": \"2020-01-04T19:19:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4057, \"mmr_diff\": -32, \"enemy_nickname\": \"Tsumi\", \"map_name\": \"Eternal Empire LE\", \"duration\": 714, \"enemy_mmr\": 4089, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-05T14:03:19+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4036, \"mmr_diff\": -160, \"enemy_nickname\": \"&lt;Lowko&gt;<sp/>HardNeper\", \"map_name\": \"Eternal Empire LE\", \"duration\": 300, \"enemy_mmr\": 4196, \"expected_winrate\": 0.3968393991220355}, {\"time_played_at\": \"2020-01-05T14:18:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": 14, \"enemy_nickname\": \"delmak\", \"map_name\": \"Eternal Empire LE\", \"duration\": 867, \"enemy_mmr\": 4005, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-01-05T14:40:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -3, \"enemy_nickname\": \"&lt;P\\u00c2R\\u0142AH&gt;<sp/>SolusRex\", \"map_name\": \"Eternal Empire LE\", \"duration\": 297, \"enemy_mmr\": 4043, \"expected_winrate\": 0.4980375795997298}, {\"time_played_at\": \"2020-01-05T14:47:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": -17, \"enemy_nickname\": \"Sanedude\", \"map_name\": \"Nightshade LE\", \"duration\": 405, \"enemy_mmr\": 4036, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2020-01-05T15:02:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4041, \"mmr_diff\": -37, \"enemy_nickname\": \"Tomstar\", \"map_name\": \"World of Sleepers LE\", \"duration\": 293, \"enemy_mmr\": 4078, \"expected_winrate\": 0.47581557748569775}, {\"time_played_at\": \"2020-01-05T15:09:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4021, \"mmr_diff\": 93, \"enemy_nickname\": \"Majcher\", \"map_name\": \"Nightshade LE\", \"duration\": 388, \"enemy_mmr\": 3928, \"expected_winrate\": 0.5605369146027809}, {\"time_played_at\": \"2020-01-05T20:23:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4039, \"mmr_diff\": 103, \"enemy_nickname\": \"&lt;ORRO&gt;<sp/>jul\", \"map_name\": \"Simulacrum LE\", \"duration\": 280, \"enemy_mmr\": 3936, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2020-01-05T20:30:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4015, \"mmr_diff\": 27, \"enemy_nickname\": \"oppresticles\", \"map_name\": \"Eternal Empire LE\", \"duration\": 405, \"enemy_mmr\": 3988, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2020-01-05T20:34:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3992, \"mmr_diff\": -22, \"enemy_nickname\": \"&lt;iksD&gt;<sp/>OzjaszGoldbe\", \"map_name\": \"World of Sleepers LE\", \"duration\": 110, \"enemy_mmr\": 4014, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-01-05T20:39:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -56, \"enemy_nickname\": \"lIlIlIIlIlIl\", \"map_name\": \"Eternal Empire LE\", \"duration\": 274, \"enemy_mmr\": 4028, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2020-01-13T20:21:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3995, \"mmr_diff\": 80, \"enemy_nickname\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"map_name\": \"Nightshade LE\", \"duration\": 1033, \"enemy_mmr\": 3915, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-13T20:26:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4014, \"mmr_diff\": 118, \"enemy_nickname\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"map_name\": \"Eternal Empire LE\", \"duration\": 243, \"enemy_mmr\": 3896, \"expected_winrate\": 0.5765815195249419}, {\"time_played_at\": \"2020-01-13T20:42:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3989, \"mmr_diff\": -28, \"enemy_nickname\": \"MadProbe\", \"map_name\": \"Ephemeron LE\", \"duration\": 149, \"enemy_mmr\": 4017, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-01-13T20:56:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3968, \"mmr_diff\": -32, \"enemy_nickname\": \"SUPERsKILLER\", \"map_name\": \"Nightshade LE\", \"duration\": 825, \"enemy_mmr\": 4000, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-14T17:17:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3948, \"mmr_diff\": 12, \"enemy_nickname\": \"TerenceSkill\", \"map_name\": \"Simulacrum LE\", \"duration\": 1171, \"enemy_mmr\": 3936, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-01-15T16:01:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3969, \"mmr_diff\": -68, \"enemy_nickname\": \"&lt;aW&gt;<sp/>Jeatall\", \"map_name\": \"Nightshade LE\", \"duration\": 204, \"enemy_mmr\": 4037, \"expected_winrate\": 0.45563522259336753}, {\"time_played_at\": \"2020-01-16T20:58:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3931, \"mmr_diff\": 86, \"enemy_nickname\": \"Exit\", \"map_name\": \"Nightshade LE\", \"duration\": 994, \"enemy_mmr\": 3845, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2020-01-18T19:38:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": -30, \"enemy_nickname\": \"&lt;SWWT&gt;<sp/>Epic\", \"map_name\": \"Ephemeron LE\", \"duration\": 719, \"enemy_mmr\": 3980, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-01-19T18:04:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3969, \"mmr_diff\": 80, \"enemy_nickname\": \"StifleR\", \"map_name\": \"Simulacrum LE\", \"duration\": 480, \"enemy_mmr\": 3889, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-19T18:19:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3989, \"mmr_diff\": 10, \"enemy_nickname\": \"&lt;Dytred&gt;<sp/>EmpiRE\", \"map_name\": \"Simulacrum LE\", \"duration\": 879, \"enemy_mmr\": 3979, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2020-01-19T18:32:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4010, \"mmr_diff\": 13, \"enemy_nickname\": \"MuKK\", \"map_name\": \"Nightshade LE\", \"duration\": 714, \"enemy_mmr\": 3997, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2020-01-31T12:42:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4031, \"mmr_diff\": -44, \"enemy_nickname\": \"&lt;adR&gt;<sp/>rdmZoo\", \"map_name\": \"Simulacrum LE\", \"duration\": 454, \"enemy_mmr\": 4075, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2020-01-31T12:54:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4011, \"mmr_diff\": -104, \"enemy_nickname\": \"Stick\", \"map_name\": \"Ephemeron LE\", \"duration\": 591, \"enemy_mmr\": 4115, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-01-31T13:10:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3992, \"mmr_diff\": 64, \"enemy_nickname\": \"&lt;GELSEN&gt;<sp/>Masaru\", \"map_name\": \"Nightshade LE\", \"duration\": 944, \"enemy_mmr\": 3928, \"expected_winrate\": 0.5417676213094246}, {\"time_played_at\": \"2020-02-02T17:15:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4012, \"mmr_diff\": -80, \"enemy_nickname\": \"&lt;0mg&gt;<sp/>Sroljo\", \"map_name\": \"World of Sleepers LE\", \"duration\": 264, \"enemy_mmr\": 4092, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-02-02T17:26:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3992, \"mmr_diff\": -14, \"enemy_nickname\": \"djakette\", \"map_name\": \"Nightshade LE\", \"duration\": 595, \"enemy_mmr\": 4006, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-02-02T17:40:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3991, \"mmr_diff\": -4, \"enemy_nickname\": \"VouS\", \"map_name\": \"Simulacrum LE\", \"duration\": 766, \"enemy_mmr\": 3995, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2020-02-02T17:48:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3970, \"mmr_diff\": -64, \"enemy_nickname\": \"valera\", \"map_name\": \"Ephemeron LE\", \"duration\": 403, \"enemy_mmr\": 4034, \"expected_winrate\": 0.4582323786905754}, {\"time_played_at\": \"2020-02-02T18:09:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3993, \"mmr_diff\": 104, \"enemy_nickname\": \"Jetix\", \"map_name\": \"Ephemeron LE\", \"duration\": 1178, \"enemy_mmr\": 3889, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-02-05T21:02:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3989, \"mmr_diff\": 89, \"enemy_nickname\": \"MorroLord\", \"map_name\": \"Nightshade LE\", \"duration\": 216, \"enemy_mmr\": 3900, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2020-02-05T21:05:33+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": -46, \"enemy_nickname\": \"Orian\", \"map_name\": \"Ephemeron LE\", \"duration\": 131, \"enemy_mmr\": 4011, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-02-06T20:48:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3988, \"mmr_diff\": 26, \"enemy_nickname\": \"MsDragonFly\", \"map_name\": \"Nightshade LE\", \"duration\": 640, \"enemy_mmr\": 3962, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-02-06T21:02:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": 54, \"enemy_nickname\": \"KJP\", \"map_name\": \"Nightshade LE\", \"duration\": 853, \"enemy_mmr\": 3955, \"expected_winrate\": 0.535265097920903}, {\"time_played_at\": \"2020-02-09T20:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": -25, \"enemy_nickname\": \"Grandclicker\", \"map_name\": \"World of Sleepers LE\", \"duration\": 564, \"enemy_mmr\": 4054, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-02-09T20:19:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4004, \"mmr_diff\": 45, \"enemy_nickname\": \"BlackSmith\", \"map_name\": \"Ephemeron LE\", \"duration\": 798, \"enemy_mmr\": 3959, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-02-10T19:08:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3981, \"mmr_diff\": 102, \"enemy_nickname\": \"Kachu\", \"map_name\": \"Ephemeron LE\", \"duration\": 305, \"enemy_mmr\": 3879, \"expected_winrate\": 0.566329379590959}, {\"time_played_at\": \"2020-02-10T19:20:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3999, \"mmr_diff\": -73, \"enemy_nickname\": \"Pablink\", \"map_name\": \"Ephemeron LE\", \"duration\": 692, \"enemy_mmr\": 4072, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-02-10T19:37:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4023, \"mmr_diff\": -9, \"enemy_nickname\": \"&lt;biglol&gt;<sp/>bany\", \"map_name\": \"Nightshade LE\", \"duration\": 959, \"enemy_mmr\": 4032, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-02-11T17:52:08+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 59, \"enemy_nickname\": \"ZZtopGun\", \"map_name\": \"Simulacrum LE\", \"duration\": 441, \"enemy_mmr\": 3986, \"expected_winrate\": 0.5385179979869474}, {\"time_played_at\": \"2020-02-11T18:03:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4064, \"mmr_diff\": 98, \"enemy_nickname\": \"ZZtopGun\", \"map_name\": \"Ephemeron LE\", \"duration\": 643, \"enemy_mmr\": 3966, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-02-13T18:20:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4083, \"mmr_diff\": 81, \"enemy_nickname\": \"Salomoon\", \"map_name\": \"World of Sleepers LE\", \"duration\": 590, \"enemy_mmr\": 4002, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-02-13T18:34:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4102, \"mmr_diff\": -136, \"enemy_nickname\": \"&lt;BnetFR&gt;<sp/>NeWHoriZonS\", \"map_name\": \"Ephemeron LE\", \"duration\": 761, \"enemy_mmr\": 4238, \"expected_winrate\": 0.411963550335502}, {\"time_played_at\": \"2020-02-13T19:26:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4085, \"mmr_diff\": 90, \"enemy_nickname\": \"HeroMarauder\", \"map_name\": \"Nightshade LE\", \"duration\": 777, \"enemy_mmr\": 3995, \"expected_winrate\": 0.5586023417718881}, {\"time_played_at\": \"2020-02-13T19:45:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4104, \"mmr_diff\": -121, \"enemy_nickname\": \"\\u041e\\u0422\\u041c\\u041e\\u0420\\u041e\\u0417\\u041e\\u041a\", \"map_name\": \"Ephemeron LE\", \"duration\": 976, \"enemy_mmr\": 4225, \"expected_winrate\": 0.42150324765525726}, {\"time_played_at\": \"2020-02-14T12:24:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4123, \"mmr_diff\": 25, \"enemy_nickname\": \"Haze\", \"map_name\": \"World of Sleepers LE\", \"duration\": 761, \"enemy_mmr\": 4098, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2020-02-14T12:29:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4101, \"mmr_diff\": -350, \"enemy_nickname\": \"StormHead\", \"map_name\": \"Simulacrum LE\", \"duration\": 227, \"enemy_mmr\": 4451, \"expected_winrate\": 0.2858142640872888}, {\"time_played_at\": \"2020-02-15T12:57:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": -52, \"enemy_nickname\": \"&lt;FxL&gt;<sp/>bojan\", \"map_name\": \"Ephemeron LE\", \"duration\": 751, \"enemy_mmr\": 4135, \"expected_winrate\": 0.4660369182913983}, {\"time_played_at\": \"2020-02-15T13:41:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4063, \"mmr_diff\": 21, \"enemy_nickname\": \"llllllllllll\", \"map_name\": \"Nightshade LE\", \"duration\": 1826, \"enemy_mmr\": 4042, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-02-17T16:31:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": 33, \"enemy_nickname\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"map_name\": \"Simulacrum LE\", \"duration\": 804, \"enemy_mmr\": 4008, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2020-02-17T16:49:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4018, \"mmr_diff\": 7, \"enemy_nickname\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"map_name\": \"World of Sleepers LE\", \"duration\": 800, \"enemy_mmr\": 4011, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-02-17T17:15:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3997, \"mmr_diff\": -155, \"enemy_nickname\": \"Stilgar\", \"map_name\": \"Ephemeron LE\", \"duration\": 1410, \"enemy_mmr\": 4152, \"expected_winrate\": 0.39997507454646586}, {\"time_played_at\": \"2020-02-18T18:41:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4019, \"mmr_diff\": -89, \"enemy_nickname\": \"Canfup\", \"map_name\": \"Ephemeron LE\", \"duration\": 671, \"enemy_mmr\": 4108, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-18T18:56:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -95, \"enemy_nickname\": \"Hello\", \"map_name\": \"Ephemeron LE\", \"duration\": 849, \"enemy_mmr\": 4095, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-02-18T19:11:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4024, \"mmr_diff\": -47, \"enemy_nickname\": \"Hello\", \"map_name\": \"Simulacrum LE\", \"duration\": 887, \"enemy_mmr\": 4071, \"expected_winrate\": 0.46929394553496245}, {\"time_played_at\": \"2020-02-18T19:24:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4047, \"mmr_diff\": -290, \"enemy_nickname\": \"ajb\", \"map_name\": \"Nightshade LE\", \"duration\": 719, \"enemy_mmr\": 4337, \"expected_winrate\": 0.3189054546669155}, {\"time_played_at\": \"2020-02-20T20:24:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4067, \"mmr_diff\": 219, \"enemy_nickname\": \"Badcomedian\", \"map_name\": \"Nightshade LE\", \"duration\": 625, \"enemy_mmr\": 3848, \"expected_winrate\": 0.6394619681316271}, {\"time_played_at\": \"2020-02-21T16:46:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4048, \"mmr_diff\": -63, \"enemy_nickname\": \"razor\", \"map_name\": \"Ephemeron LE\", \"duration\": 514, \"enemy_mmr\": 4111, \"expected_winrate\": 0.4588820281084352}, {\"time_played_at\": \"2020-02-21T17:06:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": 20, \"enemy_nickname\": \"&lt;0301&gt;<sp/>kookooseen\", \"map_name\": \"Ephemeron LE\", \"duration\": 1072, \"enemy_mmr\": 4009, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2020-02-21T17:20:16+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4050, \"mmr_diff\": -94, \"enemy_nickname\": \"Scythe\", \"map_name\": \"Ephemeron LE\", \"duration\": 775, \"enemy_mmr\": 4144, \"expected_winrate\": 0.4388186333591383}, {\"time_played_at\": \"2020-02-21T19:32:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4071, \"mmr_diff\": 50, \"enemy_nickname\": \"Sentinel\", \"map_name\": \"Simulacrum LE\", \"duration\": 746, \"enemy_mmr\": 4021, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2020-02-26T18:13:51+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4091, \"mmr_diff\": -45, \"enemy_nickname\": \"BlackAnubis\", \"map_name\": \"World of Sleepers LE\", \"duration\": 945, \"enemy_mmr\": 4136, \"expected_winrate\": 0.47059750487758445}, {\"time_played_at\": \"2020-02-26T18:27:28+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4114, \"mmr_diff\": -99, \"enemy_nickname\": \"&lt;BornG&gt;<sp/>LucidityDark\", \"map_name\": \"World of Sleepers LE\", \"duration\": 770, \"enemy_mmr\": 4213, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-02-27T21:17:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4139, \"mmr_diff\": -262, \"enemy_nickname\": \"&lt;PlAr&gt;<sp/>Arcanewinds\", \"map_name\": \"Simulacrum LE\", \"duration\": 559, \"enemy_mmr\": 4401, \"expected_winrate\": 0.33502542553804826}, {\"time_played_at\": \"2020-02-28T07:06:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4117, \"mmr_diff\": -327, \"enemy_nickname\": \"IIIIIIIIIIII\", \"map_name\": \"Ephemeron LE\", \"duration\": 256, \"enemy_mmr\": 4444, \"expected_winrate\": 0.2982553300458027}, {\"time_played_at\": \"2020-02-29T15:07:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4100, \"mmr_diff\": -367, \"enemy_nickname\": \"&lt;HBeS&gt;<sp/>LoziRa\", \"map_name\": \"Ephemeron LE\", \"duration\": 446, \"enemy_mmr\": 4467, \"expected_winrate\": 0.27682160785890525}, {\"time_played_at\": \"2020-02-29T15:22:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": 23, \"enemy_nickname\": \"StepO\", \"map_name\": \"Ephemeron LE\", \"duration\": 838, \"enemy_mmr\": 4060, \"expected_winrate\": 0.5150407610740062}, {\"time_played_at\": \"2020-02-29T15:40:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4104, \"mmr_diff\": -89, \"enemy_nickname\": \"Othello\", \"map_name\": \"Nightshade LE\", \"duration\": 635, \"enemy_mmr\": 4193, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-29T15:49:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4085, \"mmr_diff\": -90, \"enemy_nickname\": \"&lt;Irri&gt;<sp/>Irrichi\", \"map_name\": \"Ephemeron LE\", \"duration\": 400, \"enemy_mmr\": 4175, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2020-03-01T20:09:47+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4066, \"mmr_diff\": 67, \"enemy_nickname\": \"FckVwls\", \"map_name\": \"Simulacrum LE\", \"duration\": 1137, \"enemy_mmr\": 3999, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2020-03-02T09:38:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4086, \"mmr_diff\": 82, \"enemy_nickname\": \"Piliskner\", \"map_name\": \"Simulacrum LE\", \"duration\": 945, \"enemy_mmr\": 4004, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2020-03-02T09:52:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4105, \"mmr_diff\": -180, \"enemy_nickname\": \"IIIIIIIIIIII\", \"map_name\": \"Nightshade LE\", \"duration\": 786, \"enemy_mmr\": 4285, \"expected_winrate\": 0.3843835326815888}, {\"time_played_at\": \"2020-03-02T10:06:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4088, \"mmr_diff\": 69, \"enemy_nickname\": \"TGNP\", \"map_name\": \"Simulacrum LE\", \"duration\": 696, \"enemy_mmr\": 4019, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-03-02T13:26:04+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4106, \"mmr_diff\": -84, \"enemy_nickname\": \"WizZy\", \"map_name\": \"Simulacrum LE\", \"duration\": 390, \"enemy_mmr\": 4190, \"expected_winrate\": 0.4452720886026404}, {\"time_played_at\": \"2020-03-02T13:45:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4130, \"mmr_diff\": -36, \"enemy_nickname\": \"WizZy\", \"map_name\": \"Simulacrum LE\", \"duration\": 1177, \"enemy_mmr\": 4166, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2020-03-04T17:23:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4153, \"mmr_diff\": -30, \"enemy_nickname\": \"MothMonkey\", \"map_name\": \"Nightshade LE\", \"duration\": 385, \"enemy_mmr\": 4183, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-03-04T17:39:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4132, \"mmr_diff\": 56, \"enemy_nickname\": \"Leaf\", \"map_name\": \"Simulacrum LE\", \"duration\": 923, \"enemy_mmr\": 4076, \"expected_winrate\": 0.5365666336553646}, {\"time_played_at\": \"2020-03-04T17:52:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -133, \"enemy_nickname\": \"helloRJ\", \"map_name\": \"Ephemeron LE\", \"duration\": 751, \"enemy_mmr\": 4242, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-03-05T21:18:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4091, \"mmr_diff\": 74, \"enemy_nickname\": \"Cyborg\", \"map_name\": \"Ephemeron LE\", \"duration\": 782, \"enemy_mmr\": 4017, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2020-03-09T11:03:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4050, \"mmr_diff\": -178, \"enemy_nickname\": \"Noldo\", \"map_name\": \"Nightshade LE\", \"duration\": 225, \"enemy_mmr\": 4228, \"expected_winrate\": 0.3856226141648234}, {\"time_played_at\": \"2020-03-09T11:22:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4033, \"mmr_diff\": 32, \"enemy_nickname\": \"Vorp\", \"map_name\": \"World of Sleepers LE\", \"duration\": 1084, \"enemy_mmr\": 4001, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-03-10T19:22:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4053, \"mmr_diff\": -46, \"enemy_nickname\": \"&lt;FaDr&gt;<sp/>BURNIE\", \"map_name\": \"Ephemeron LE\", \"duration\": 372, \"enemy_mmr\": 4099, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-03-10T19:40:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -18, \"enemy_nickname\": \"Drakezul\", \"map_name\": \"Simulacrum LE\", \"duration\": 1077, \"enemy_mmr\": 4050, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-11T20:53:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 81, \"enemy_nickname\": \"StaryPijany\", \"map_name\": \"Simulacrum LE\", \"duration\": 531, \"enemy_mmr\": 3973, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-03-12T18:55:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4030, \"mmr_diff\": -7, \"enemy_nickname\": \"ORIGYN\", \"map_name\": \"Golden Wall LE\", \"duration\": 477, \"enemy_mmr\": 4037, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-03-12T19:06:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4009, \"mmr_diff\": 104, \"enemy_nickname\": \"Salomoon\", \"map_name\": \"Ever Dream LE\", \"duration\": 594, \"enemy_mmr\": 3905, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-03-13T07:52:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3984, \"mmr_diff\": -256, \"enemy_nickname\": \"&lt;Dobro&gt;<sp/>KINE\", \"map_name\": \"Ever Dream LE\", \"duration\": 936, \"enemy_mmr\": 4240, \"expected_winrate\": 0.3385320109141423}, {\"time_played_at\": \"2020-03-14T15:13:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3970, \"mmr_diff\": -95, \"enemy_nickname\": \"adrianjakuba\", \"map_name\": \"Ever Dream LE\", \"duration\": 276, \"enemy_mmr\": 4065, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-03-14T15:18:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3993, \"mmr_diff\": 18, \"enemy_nickname\": \"ODISEO\", \"map_name\": \"Simulacrum LE\", \"duration\": 220, \"enemy_mmr\": 3975, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-03-14T15:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4014, \"mmr_diff\": 95, \"enemy_nickname\": \"&lt;SCTR&gt;<sp/>LimeTime\", \"map_name\": \"Zen LE\", \"duration\": 785, \"enemy_mmr\": 3919, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-03-14T16:18:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4033, \"mmr_diff\": -58, \"enemy_nickname\": \"&lt;PLA2N&gt;<sp/>ZloyVakarian\", \"map_name\": \"Nightshade LE\", \"duration\": 374, \"enemy_mmr\": 4091, \"expected_winrate\": 0.4621323286338574}, {\"time_played_at\": \"2020-03-14T16:31:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4013, \"mmr_diff\": -80, \"enemy_nickname\": \"hellyeah\", \"map_name\": \"Purity and Industry LE\", \"duration\": 746, \"enemy_mmr\": 4093, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-03-14T20:10:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3994, \"mmr_diff\": -51, \"enemy_nickname\": \"&lt;GROF&gt;<sp/>Shefarin\", \"map_name\": \"Simulacrum LE\", \"duration\": 923, \"enemy_mmr\": 4045, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2020-03-14T20:23:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4017, \"mmr_diff\": -28, \"enemy_nickname\": \"Ben\", \"map_name\": \"Purity and Industry LE\", \"duration\": 734, \"enemy_mmr\": 4045, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-03-18T12:33:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -61, \"enemy_nickname\": \"ManeWicht\", \"map_name\": \"Nightshade LE\", \"duration\": 131, \"enemy_mmr\": 4101, \"expected_winrate\": 0.4601817441768105}, {\"time_played_at\": \"2020-03-18T12:41:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4020, \"mmr_diff\": 45, \"enemy_nickname\": \"Apollo\", \"map_name\": \"Zen LE\", \"duration\": 459, \"enemy_mmr\": 3975, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-03-18T12:57:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -149, \"enemy_nickname\": \"&lt;noIMBA&gt;<sp/>Facehugger\", \"map_name\": \"Golden Wall LE\", \"duration\": 865, \"enemy_mmr\": 4189, \"expected_winrate\": 0.40374871115781824}, {\"time_played_at\": \"2020-03-22T11:58:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4066, \"mmr_diff\": 19, \"enemy_nickname\": \"&lt;Hasu&gt;<sp/>RunGen\", \"map_name\": \"Ever Dream LE\", \"duration\": 935, \"enemy_mmr\": 4047, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2020-03-22T12:03:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4044, \"mmr_diff\": 41, \"enemy_nickname\": \"OOOOOOOOOOOO\", \"map_name\": \"Nightshade LE\", \"duration\": 232, \"enemy_mmr\": 4003, \"expected_winrate\": 0.5267941904791901}, {\"time_played_at\": \"2020-03-29T20:40:34+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": -18, \"enemy_nickname\": \"&lt;SCBoys&gt;<sp/>CiRkuS\", \"map_name\": \"Nightshade LE\", \"duration\": 867, \"enemy_mmr\": 4040, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-30T15:48:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 4, \"enemy_nickname\": \"Bee\", \"map_name\": \"Simulacrum LE\", \"duration\": 616, \"enemy_mmr\": 3997, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-03-31T12:27:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3979, \"mmr_diff\": -31, \"enemy_nickname\": \"&lt;lLiTl&gt;<sp/>Rud\", \"map_name\": \"Golden Wall LE\", \"duration\": 1051, \"enemy_mmr\": 4010, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-01T06:54:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -23, \"enemy_nickname\": \"&lt;TRSO&gt;<sp/>THERIPPER\", \"map_name\": \"Simulacrum LE\", \"duration\": 950, \"enemy_mmr\": 4023, \"expected_winrate\": 0.4849592389259938}, {\"time_played_at\": \"2020-04-15T14:28:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 18, \"enemy_nickname\": \"MrBeck\", \"map_name\": \"Purity and Industry LE\", \"duration\": 574, \"enemy_mmr\": 4004, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-15T14:50:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4043, \"mmr_diff\": 104, \"enemy_nickname\": \"Anrik\", \"map_name\": \"Ever Dream LE\", \"duration\": 447, \"enemy_mmr\": 3939, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-04-15T15:03:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4018, \"mmr_diff\": -135, \"enemy_nickname\": \"Tomus\", \"map_name\": \"Simulacrum LE\", \"duration\": 603, \"enemy_mmr\": 4153, \"expected_winrate\": 0.41259755997469955}, {\"time_played_at\": \"2020-04-17T19:15:54+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4001, \"mmr_diff\": 39, \"enemy_nickname\": \"Vanquish\", \"map_name\": \"Simulacrum LE\", \"duration\": 346, \"enemy_mmr\": 3962, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-17T19:31:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4021, \"mmr_diff\": -9, \"enemy_nickname\": \"Boban\", \"map_name\": \"Simulacrum LE\", \"duration\": 882, \"enemy_mmr\": 4030, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-17T20:10:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": 12, \"enemy_nickname\": \"Etharis\", \"map_name\": \"Purity and Industry LE\", \"duration\": 792, \"enemy_mmr\": 4050, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-04-17T20:20:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -40, \"enemy_nickname\": \"&lt;Peeps&gt;<sp/>ReNoVation\", \"map_name\": \"Simulacrum LE\", \"duration\": 443, \"enemy_mmr\": 4080, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2020-04-17T20:26:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4062, \"mmr_diff\": -31, \"enemy_nickname\": \"&lt;HBGS&gt;<sp/>ShoWTimE\", \"map_name\": \"Golden Wall LE\", \"duration\": 297, \"enemy_mmr\": 4093, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-18T20:05:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": -29, \"enemy_nickname\": \"MouseGGAXE\", \"map_name\": \"Purity and Industry LE\", \"duration\": 421, \"enemy_mmr\": 4071, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-04-18T20:18:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 8, \"enemy_nickname\": \"&lt;HsDL&gt;<sp/>Domius\", \"map_name\": \"Zen LE\", \"duration\": 749, \"enemy_mmr\": 4013, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2020-04-18T20:30:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4042, \"mmr_diff\": -104, \"enemy_nickname\": \"Alyaska\", \"map_name\": \"Simulacrum LE\", \"duration\": 651, \"enemy_mmr\": 4146, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-04-18T20:45:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -87, \"enemy_nickname\": \"&lt;RBP3&gt;<sp/>Steal\", \"map_name\": \"Purity and Industry LE\", \"duration\": 794, \"enemy_mmr\": 4109, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2020-04-20T11:40:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4047, \"mmr_diff\": 28, \"enemy_nickname\": \"Kilkenny\", \"map_name\": \"Nightshade LE\", \"duration\": 788, \"enemy_mmr\": 4019, \"expected_winrate\": 0.5183078293888046}, {\"time_played_at\": \"2020-04-21T19:29:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4067, \"mmr_diff\": 18, \"enemy_nickname\": \"BsCMBANerd\", \"map_name\": \"Zen LE\", \"duration\": 131, \"enemy_mmr\": 4049, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-22T20:24:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 47, \"enemy_nickname\": \"puLse\", \"map_name\": \"Golden Wall LE\", \"duration\": 534, \"enemy_mmr\": 3998, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-04-22T20:30:29+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 1, \"enemy_nickname\": \"puLse\", \"map_name\": \"Golden Wall LE\", \"duration\": 305, \"enemy_mmr\": 4021, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2020-04-22T20:45:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 42, \"enemy_nickname\": \"mSin\", \"map_name\": \"Simulacrum LE\", \"duration\": 704, \"enemy_mmr\": 3959, \"expected_winrate\": 0.5274464093596006}, {\"time_played_at\": \"2020-04-24T18:14:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 36, \"enemy_nickname\": \"Spider\", \"map_name\": \"Simulacrum LE\", \"duration\": 369, \"enemy_mmr\": 3985, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-04-24T18:18:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3999, \"mmr_diff\": 9, \"enemy_nickname\": \"Spider\", \"map_name\": \"Golden Wall LE\", \"duration\": 218, \"enemy_mmr\": 3990, \"expected_winrate\": 0.5058870193731037}, {\"time_played_at\": \"2020-04-27T11:04:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3977, \"mmr_diff\": -25, \"enemy_nickname\": \"Mitchowyn\", \"map_name\": \"Purity and Industry LE\", \"duration\": 369, \"enemy_mmr\": 4002, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-04-27T11:06:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3956, \"mmr_diff\": -77, \"enemy_nickname\": \"Etharis\", \"map_name\": \"Golden Wall LE\", \"duration\": 22, \"enemy_mmr\": 4033, \"expected_winrate\": 0.449800646746463}, {\"time_played_at\": \"2020-04-27T11:15:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": 97, \"enemy_nickname\": \"DupaDuupa\", \"map_name\": \"Zen LE\", \"duration\": 455, \"enemy_mmr\": 3883, \"expected_winrate\": 0.5631134765259213}, {\"time_played_at\": \"2020-04-27T11:29:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3955, \"mmr_diff\": -168, \"enemy_nickname\": \"&lt;BARJO&gt;<sp/>JDH\", \"map_name\": \"Simulacrum LE\", \"duration\": 843, \"enemy_mmr\": 4123, \"expected_winrate\": 0.39183999647141454}, {\"time_played_at\": \"2020-04-27T11:42:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3975, \"mmr_diff\": -224, \"enemy_nickname\": \"&lt;NetGG&gt;<sp/>vladozerg\", \"map_name\": \"Nightshade LE\", \"duration\": 695, \"enemy_mmr\": 4199, \"expected_winrate\": 0.35752730772110347}, {\"time_played_at\": \"2020-04-27T12:02:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 108, \"enemy_nickname\": \"Schmaunzer\", \"map_name\": \"Nightshade LE\", \"duration\": 611, \"enemy_mmr\": 3851, \"expected_winrate\": 0.5701810794636865}, {\"time_played_at\": \"2020-04-27T12:24:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3935, \"mmr_diff\": 46, \"enemy_nickname\": \"Ise\", \"map_name\": \"Nightshade LE\", \"duration\": 1218, \"enemy_mmr\": 3889, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-04-28T12:16:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3912, \"mmr_diff\": -133, \"enemy_nickname\": \"DupaDuupa\", \"map_name\": \"Simulacrum LE\", \"duration\": 728, \"enemy_mmr\": 4045, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-04-28T12:40:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": -1163, \"enemy_nickname\": \"&lt;Mkers&gt;<sp/>Doc\", \"map_name\": \"Ever Dream LE\", \"duration\": 1376, \"enemy_mmr\": 5035, \"expected_winrate\": 0.045517365974079564}, {\"time_played_at\": \"2020-04-28T13:05:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3895, \"mmr_diff\": 39, \"enemy_nickname\": \"AndrU\", \"map_name\": \"Nightshade LE\", \"duration\": 845, \"enemy_mmr\": 3856, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-30T10:56:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3915, \"mmr_diff\": -9, \"enemy_nickname\": \"&lt;RIIP&gt;<sp/>Airea\", \"map_name\": \"Purity and Industry LE\", \"duration\": 534, \"enemy_mmr\": 3924, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-30T11:20:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 35, \"enemy_nickname\": \"&lt;RIIP&gt;<sp/>Airea\", \"map_name\": \"Purity and Industry LE\", \"duration\": 1381, \"enemy_mmr\": 3902, \"expected_winrate\": 0.5228790340944155}, {\"time_played_at\": \"2020-04-30T11:33:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3957, \"mmr_diff\": -131, \"enemy_nickname\": \"KillemAll\", \"map_name\": \"Nightshade LE\", \"duration\": 725, \"enemy_mmr\": 4088, \"expected_winrate\": 0.41513647933297476}, {\"time_played_at\": \"2020-04-30T18:14:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3983, \"mmr_diff\": 62, \"enemy_nickname\": \"FrosT\", \"map_name\": \"Purity and Industry LE\", \"duration\": 233, \"enemy_mmr\": 3921, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2020-04-30T18:34:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3964, \"mmr_diff\": -91, \"enemy_nickname\": \"&lt;BRs&gt;<sp/>GoodFellas\", \"map_name\": \"Nightshade LE\", \"duration\": 1040, \"enemy_mmr\": 4055, \"expected_winrate\": 0.44075259994384575}, {\"time_played_at\": \"2020-05-01T11:39:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 36, \"enemy_nickname\": \"Samaya\", \"map_name\": \"Ever Dream LE\", \"duration\": 307, \"enemy_mmr\": 3952, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-05-01T11:59:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3965, \"mmr_diff\": -62, \"enemy_nickname\": \"fireballkid\", \"map_name\": \"Zen LE\", \"duration\": 958, \"enemy_mmr\": 4027, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2020-05-01T12:12:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3945, \"mmr_diff\": 40, \"enemy_nickname\": \"xyzxyzxyz\", \"map_name\": \"Simulacrum LE\", \"duration\": 754, \"enemy_mmr\": 3905, \"expected_winrate\": 0.5261418801396169}, {\"time_played_at\": \"2020-05-01T12:37:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3923, \"mmr_diff\": 153, \"enemy_nickname\": \"&lt;HsDL&gt;<sp/>Zero\", \"map_name\": \"Ever Dream LE\", \"duration\": 805, \"enemy_mmr\": 3770, \"expected_winrate\": 0.5987683411538888}, {\"time_played_at\": \"2020-05-01T12:42:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": 4, \"enemy_nickname\": \"Cptred\", \"map_name\": \"Golden Wall LE\", \"duration\": 278, \"enemy_mmr\": 3940, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-05-01T12:54:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 66, \"enemy_nickname\": \"Cptred\", \"map_name\": \"Nightshade LE\", \"duration\": 415, \"enemy_mmr\": 3899, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2020-05-01T13:09:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3942, \"mmr_diff\": -140, \"enemy_nickname\": \"&lt;IBeA\\u015aI&gt;<sp/>Epiku\", \"map_name\": \"Ever Dream LE\", \"duration\": 711, \"enemy_mmr\": 4082, \"expected_winrate\": 0.40943045167820846}, {\"time_played_at\": \"2020-05-02T14:40:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3968, \"mmr_diff\": 47, \"enemy_nickname\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"map_name\": \"Golden Wall LE\", \"duration\": 401, \"enemy_mmr\": 3921, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-05-02T14:53:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": 14, \"enemy_nickname\": \"&lt;EZPTS&gt;<sp/>talisman\", \"map_name\": \"Nightshade LE\", \"duration\": 792, \"enemy_mmr\": 3931, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-02T19:06:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 7, \"enemy_nickname\": \"Pokimon\", \"map_name\": \"Ever Dream LE\", \"duration\": 647, \"enemy_mmr\": 3959, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-05-02T19:20:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": -54, \"enemy_nickname\": \"mozgj\", \"map_name\": \"Zen LE\", \"duration\": 823, \"enemy_mmr\": 3998, \"expected_winrate\": 0.4647349020790969}, {\"time_played_at\": \"2020-05-03T20:09:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 78, \"enemy_nickname\": \"RomaNo\", \"map_name\": \"Purity and Industry LE\", \"duration\": 270, \"enemy_mmr\": 3888, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2020-05-03T20:33:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3942, \"mmr_diff\": -97, \"enemy_nickname\": \"&lt;FSeS&gt;<sp/>Wizzl\\u00f4\", \"map_name\": \"Golden Wall LE\", \"duration\": 1369, \"enemy_mmr\": 4039, \"expected_winrate\": 0.43688652347407875}, {\"time_played_at\": \"2020-05-03T20:43:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": -22, \"enemy_nickname\": \"Mich\", \"map_name\": \"Purity and Industry LE\", \"duration\": 500, \"enemy_mmr\": 3988, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-05-03T20:53:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3946, \"mmr_diff\": -79, \"enemy_nickname\": \"Epicnoob\", \"map_name\": \"Simulacrum LE\", \"duration\": 535, \"enemy_mmr\": 4025, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2020-05-04T12:43:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3926, \"mmr_diff\": 95, \"enemy_nickname\": \"StaMinA\", \"map_name\": \"Golden Wall LE\", \"duration\": 784, \"enemy_mmr\": 3831, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-05-04T12:58:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": -7, \"enemy_nickname\": \"Doghum\", \"map_name\": \"Ever Dream LE\", \"duration\": 869, \"enemy_mmr\": 3952, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-05-04T13:02:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3967, \"mmr_diff\": 22, \"enemy_nickname\": \"Piiras\", \"map_name\": \"Simulacrum LE\", \"duration\": 199, \"enemy_mmr\": 3945, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2020-05-05T17:32:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 119, \"enemy_nickname\": \"&lt;VKT&gt;<sp/>R\\u00f8rtangen\", \"map_name\": \"Simulacrum LE\", \"duration\": 620, \"enemy_mmr\": 3869, \"expected_winrate\": 0.5772201891779002}, {\"time_played_at\": \"2020-05-05T17:44:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": 24, \"enemy_nickname\": \"&lt;\\u01aeesXG&gt;<sp/>Rymdkrigaren\", \"map_name\": \"Simulacrum LE\", \"duration\": 696, \"enemy_mmr\": 3981, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2020-05-05T18:00:50+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": 193, \"enemy_nickname\": \"helldenn\", \"map_name\": \"Purity and Industry LE\", \"duration\": 873, \"enemy_mmr\": 3833, \"expected_winrate\": 0.6236333410254552}, {\"time_played_at\": \"2020-05-07T09:30:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 34, \"enemy_nickname\": \"&lt;BRSKR&gt;<sp/>Hexe\", \"map_name\": \"Golden Wall LE\", \"duration\": 985, \"enemy_mmr\": 4008, \"expected_winrate\": 0.5222262215402946}, {\"time_played_at\": \"2020-05-07T09:42:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": -57, \"enemy_nickname\": \"Yeezus\", \"map_name\": \"Zen LE\", \"duration\": 665, \"enemy_mmr\": 4119, \"expected_winrate\": 0.4627827841407167}, {\"time_played_at\": \"2020-05-07T10:13:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4086, \"mmr_diff\": 14, \"enemy_nickname\": \"Yeezus\", \"map_name\": \"Golden Wall LE\", \"duration\": 1595, \"enemy_mmr\": 4072, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-08T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4107, \"mmr_diff\": 60, \"enemy_nickname\": \"&lt;tXs&gt;<sp/>TheBloke\", \"map_name\": \"Zen LE\", \"duration\": 992, \"enemy_mmr\": 4047, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2020-05-08T11:34:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4127, \"mmr_diff\": 109, \"enemy_nickname\": \"Ergopro\", \"map_name\": \"Nightshade LE\", \"duration\": 1157, \"enemy_mmr\": 4018, \"expected_winrate\": 0.5708222172241983}, {\"time_played_at\": \"2020-05-10T18:56:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4145, \"mmr_diff\": -282, \"enemy_nickname\": \"T\\u00f6rtt\\u00f6\", \"map_name\": \"Simulacrum LE\", \"duration\": 1009, \"enemy_mmr\": 4427, \"expected_winrate\": 0.3234692470348148}, {\"time_played_at\": \"2020-05-10T19:12:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4131, \"mmr_diff\": 26, \"enemy_nickname\": \"&lt;2G1M&gt;<sp/>Mime\", \"map_name\": \"Ever Dream LE\", \"duration\": 834, \"enemy_mmr\": 4105, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-05-10T19:29:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -18, \"enemy_nickname\": \"&lt;2G1M&gt;<sp/>Mime\", \"map_name\": \"Zen LE\", \"duration\": 999, \"enemy_mmr\": 4127, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-05-11T09:23:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4088, \"mmr_diff\": -137, \"enemy_nickname\": \"DonkeyMonkey\", \"map_name\": \"Zen LE\", \"duration\": 605, \"enemy_mmr\": 4225, \"expected_winrate\": 0.4113298327220324}, {\"time_played_at\": \"2020-05-11T09:35:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4070, \"mmr_diff\": -72, \"enemy_nickname\": \"Elosai\", \"map_name\": \"Zen LE\", \"duration\": 696, \"enemy_mmr\": 4142, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2020-05-11T09:41:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4051, \"mmr_diff\": 107, \"enemy_nickname\": \"ElBarto\", \"map_name\": \"Simulacrum LE\", \"duration\": 216, \"enemy_mmr\": 3944, \"expected_winrate\": 0.5695397061906963}, {\"time_played_at\": \"2020-05-12T17:37:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4026, \"mmr_diff\": -14, \"enemy_nickname\": \"Tiger\", \"map_name\": \"Ever Dream LE\", \"duration\": 433, \"enemy_mmr\": 4040, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-05-12T17:59:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": -11, \"enemy_nickname\": \"BuRneR\", \"map_name\": \"Nightshade LE\", \"duration\": 1260, \"enemy_mmr\": 4016, \"expected_winrate\": 0.49280491829094863}, {\"time_played_at\": \"2020-05-12T18:11:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4027, \"mmr_diff\": -99, \"enemy_nickname\": \"\\u041b\\u043e\\u0445\", \"map_name\": \"Simulacrum LE\", \"duration\": 545, \"enemy_mmr\": 4126, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-05-15T20:56:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4006, \"mmr_diff\": 46, \"enemy_nickname\": \"TerenceSkill\", \"map_name\": \"Ever Dream LE\", \"duration\": 745, \"enemy_mmr\": 3960, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-05-26T09:13:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4026, \"mmr_diff\": 45, \"enemy_nickname\": \"Marvin\", \"map_name\": \"Zen LE\", \"duration\": 421, \"enemy_mmr\": 3981, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-05-26T09:34:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4046, \"mmr_diff\": 6, \"enemy_nickname\": \"kerokero\", \"map_name\": \"Zen LE\", \"duration\": 1136, \"enemy_mmr\": 4040, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2020-05-26T09:46:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4024, \"mmr_diff\": -50, \"enemy_nickname\": \"MKPrime\", \"map_name\": \"Zen LE\", \"duration\": 646, \"enemy_mmr\": 4074, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2020-05-27T10:12:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4004, \"mmr_diff\": -89, \"enemy_nickname\": \"MasterZERG\", \"map_name\": \"Nightshade LE\", \"duration\": 578, \"enemy_mmr\": 4093, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-05-27T10:21:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 98, \"enemy_nickname\": \"Froze\", \"map_name\": \"Ever Dream LE\", \"duration\": 461, \"enemy_mmr\": 3887, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-05-27T10:32:29+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4004, \"mmr_diff\": -169, \"enemy_nickname\": \"giletjaune\", \"map_name\": \"Nightshade LE\", \"duration\": 601, \"enemy_mmr\": 4173, \"expected_winrate\": 0.3912166399665741}, {\"time_played_at\": \"2020-05-27T10:56:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4030, \"mmr_diff\": -73, \"enemy_nickname\": \"CleanSweep\", \"map_name\": \"Simulacrum LE\", \"duration\": 719, \"enemy_mmr\": 4103, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-05-29T12:17:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 125, \"enemy_nickname\": \"&lt;SeoYN&gt;<sp/>General\", \"map_name\": \"Ever Dream LE\", \"duration\": 2385, \"enemy_mmr\": 3929, \"expected_winrate\": 0.5810467174657031}, {\"time_played_at\": \"2020-05-29T17:58:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4072, \"mmr_diff\": 32, \"enemy_nickname\": \"Sclera\", \"map_name\": \"Eternal Empire LE\", \"duration\": 1724, \"enemy_mmr\": 4040, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-05-29T18:27:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4093, \"mmr_diff\": 12, \"enemy_nickname\": \"&lt;Hasu&gt;<sp/>RunGen\", \"map_name\": \"Ever Dream LE\", \"duration\": 1582, \"enemy_mmr\": 4081, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-05-30T20:50:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4071, \"mmr_diff\": 122, \"enemy_nickname\": \"Hellfighter\", \"map_name\": \"Golden Wall LE\", \"duration\": 718, \"enemy_mmr\": 3949, \"expected_winrate\": 0.579134641806555}, {\"time_played_at\": \"2020-05-30T21:10:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4089, \"mmr_diff\": -34, \"enemy_nickname\": \"Onkelelak\", \"map_name\": \"Eternal Empire LE\", \"duration\": 996, \"enemy_mmr\": 4123, \"expected_winrate\": 0.47777377845970537}, {\"time_played_at\": \"2020-06-01T11:40:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4112, \"mmr_diff\": -141, \"enemy_nickname\": \"Minoda\", \"map_name\": \"Eternal Empire LE\", \"duration\": 570, \"enemy_mmr\": 4253, \"expected_winrate\": 0.4087979217905979}, {\"time_played_at\": \"2020-06-01T11:53:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4094, \"mmr_diff\": -129, \"enemy_nickname\": \"iga\", \"map_name\": \"Nightshade LE\", \"duration\": 687, \"enemy_mmr\": 4223, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2020-06-02T18:39:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4076, \"mmr_diff\": 17, \"enemy_nickname\": \"IIIIIIIII\", \"map_name\": \"Ever Dream LE\", \"duration\": 722, \"enemy_mmr\": 4059, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2020-06-02T18:56:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4097, \"mmr_diff\": 69, \"enemy_nickname\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"map_name\": \"Eternal Empire LE\", \"duration\": 874, \"enemy_mmr\": 4028, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-06-03T17:53:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4117, \"mmr_diff\": 171, \"enemy_nickname\": \"&lt;DisES&gt;<sp/>Kamenashi\", \"map_name\": \"Nightshade LE\", \"duration\": 471, \"enemy_mmr\": 3946, \"expected_winrate\": 0.6100290069264851}, {\"time_played_at\": \"2020-06-03T18:04:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4156, \"mmr_diff\": -88, \"enemy_nickname\": \"Liverpool\", \"map_name\": \"Simulacrum LE\", \"duration\": 529, \"enemy_mmr\": 4244, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2020-06-03T18:34:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4180, \"mmr_diff\": -124, \"enemy_nickname\": \"feetlover\", \"map_name\": \"Ever Dream LE\", \"duration\": 763, \"enemy_mmr\": 4304, \"expected_winrate\": 0.41959037361733365}, {\"time_played_at\": \"2020-06-04T19:03:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4203, \"mmr_diff\": 21, \"enemy_nickname\": \"JOOPSTAR\", \"map_name\": \"Simulacrum LE\", \"duration\": 332, \"enemy_mmr\": 4182, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-06-04T19:18:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4181, \"mmr_diff\": -189, \"enemy_nickname\": \"&lt;AiR\\u01c2&gt;<sp/>SuperNova\", \"map_name\": \"Nightshade LE\", \"duration\": 846, \"enemy_mmr\": 4370, \"expected_winrate\": 0.37882641391385774}, {\"time_played_at\": \"2020-06-09T17:03:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4208, \"mmr_diff\": 14, \"enemy_nickname\": \"Ziiim\", \"map_name\": \"Eternal Empire LE\", \"duration\": 360, \"enemy_mmr\": 4194, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-06-09T17:11:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4186, \"mmr_diff\": 39, \"enemy_nickname\": \"djakette\", \"map_name\": \"Eternal Empire LE\", \"duration\": 420, \"enemy_mmr\": 4147, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-06-09T17:24:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4164, \"mmr_diff\": -68, \"enemy_nickname\": \"StaMinA\", \"map_name\": \"Eternal Empire LE\", \"duration\": 758, \"enemy_mmr\": 4232, \"expected_winrate\": 0.45563522259336753}, {\"time_played_at\": \"2020-06-10T11:18:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4144, \"mmr_diff\": -41, \"enemy_nickname\": \"Guinness\", \"map_name\": \"Ice and Chrome LE\", \"duration\": 299, \"enemy_mmr\": 4185, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2020-06-10T11:27:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4125, \"mmr_diff\": 125, \"enemy_nickname\": \"Oink\", \"map_name\": \"Eternal Empire LE\", \"duration\": 211, \"enemy_mmr\": 4000, \"expected_winrate\": 0.5810467174657031}, {\"time_played_at\": \"2020-06-10T11:35:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4100, \"mmr_diff\": -88, \"enemy_nickname\": \"&lt;UATeam&gt;<sp/>click\", \"map_name\": \"Submarine LE\", \"duration\": 343, \"enemy_mmr\": 4188, \"expected_winrate\": 0.44268836623770724}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[47]:\n\n    \nimport pymc3 as pm\nimport arviz as az\n\ncoords = {\n    \"replay\": data.index,\n    \"race\": [\"Terran\", \"Protoss\", \"Zerg\"],\n}\nrace_encoding ={\"Terran\": 0,\n                \"Protoss\": 1,\n                \"Zerg\": 2} \n\n\npredictive_var_names = \"win \u03bc \u03c3 winrate\".split()\nwith pm.Model(coords=coords) as split_model:\n    mmr_\u03bc_matchup = pm.Normal('\u03bc', 4000, 300, dims='race')\n    mmr_\u03c3_matchup = pm.HalfNormal('\u03c3', 100, dims='race')\n    mmr_\u03c3_norm = pm.Normal('helper', 0, 1, dims='replay')\n    \n    enemy_races = pm.Data(\"enemy_race\", data.enemy_race.map(race_encoding).astype(int), dims='replay')\n    mmr = pm.Deterministic('MMR', mmr_\u03bc_matchup[enemy_races] + mmr_\u03c3_matchup[enemy_races] * mmr_\u03c3_norm, dims='replay')\n    \n    enemy_mmr = pm.Data(\"enemy_mmr\", data.enemy_mmr, dims='replay')\n    diffs = pm.Deterministic('MMR_diff', mmr - enemy_mmr, dims = 'replay')\n    p = pm.Deterministic('winrate', MMR_winrate(diffs), dims = 'replay')\n    wl = pm.Bernoulli('win', p=p, observed=data.win, dims = 'replay')\n    \n    trace = pm.sample(2000, tune=2000, chains=4, random_seed=1, target_accept=0.9)\n    output = az.from_pymc3(trace=trace,\n                           prior=pm.sample_prior_predictive(2000 , var_names=predictive_var_names, random_seed=1),\n                           posterior_predictive=pm.sample_posterior_predictive(trace, var_names=predictive_var_names, random_seed=1),\n                          )\noutput\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 2 jobs)\nNUTS: [helper, \u03c3, \u03bc]\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [16000/16000 00:25<00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\n\n\n\n    \n\n\n\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 26 seconds.\n\n\n\n\n\n\n    \n\n\n\n\n    \n        \n            /* Turns off some styling */\n            progress {\n                /* gets rid of default border in Firefox and Opera. */\n                border: none;\n                /* Needs to be in here for Safari polyfill so background images work as expected. */\n                background-size: auto;\n            }\n            .progress-bar-interrupted, .progress-bar-interrupted::-webkit-progress-bar {\n                background: #F44336;\n            }\n        \n      \n      100.00% [8000/8000 00:08<00:00]\n    \n    \n\n\n\n\n\n    Out[47]:\n\n\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 202Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (6)\u03bc(chain, draw, race)float644.211e+03 4.108e+03 ... 3.992e+03array([[[4210.85745791, 4108.13402572, 4047.68655821],\n        [4187.82039211, 4167.02974265, 3832.39048778],\n        [4385.10730355, 4051.15698963, 3888.3543684 ],\n        ...,\n        [4268.67850837, 4004.06007755, 3935.24654733],\n        [4182.61327252, 3852.96115761, 4013.25955458],\n        [4058.95730755, 3860.61071343, 4048.4206048 ]],\n\n       [[4331.22003251, 3887.80946609, 3896.23173387],\n        [4106.02686452, 4063.88927972, 3995.75729977],\n        [4196.19055581, 3907.28257413, 3817.30936413],\n        ...,\n        [4158.82110597, 3994.77797297, 3948.94402472],\n        [4130.32958212, 4024.45281323, 3864.17620077],\n        [4255.71656811, 4121.39660228, 4067.50723152]],\n\n       [[4264.33592228, 4119.64071496, 3900.73678858],\n        [4290.27572226, 4138.58898858, 3923.24665912],\n        [4057.54009725, 3929.51218737, 3995.78802404],\n        ...,\n        [4271.91923915, 4208.66941361, 3925.91501886],\n        [4170.24764659, 4004.86306088, 3916.82405953],\n        [4146.33857085, 4069.27579897, 3925.21194574]],\n\n       [[4391.8074459 , 3973.03474104, 4062.09104669],\n        [3980.12121482, 4056.28919035, 3860.08003276],\n        [4365.43547727, 4060.16002941, 3927.51863056],\n        ...,\n        [4344.05048768, 3950.01257309, 3857.26550133],\n        [3986.12083546, 4073.15663108, 4093.19655361],\n        [4133.45346107, 4052.34439539, 3991.74262184]]])helper(chain, draw, replay)float640.8451 -0.2949 ... -0.3081 0.4416array([[[ 0.84509895, -0.29485376,  0.8011897 , ...,  1.33714031,\n         -1.80845999, -0.51358847],\n        [-1.40481271,  1.07728824, -1.1490509 , ..., -0.41919933,\n          1.34160767, -0.04753472],\n        [-1.44831415, -0.00634847, -0.67124799, ..., -1.08190966,\n         -0.64604433, -0.69881696],\n        ...,\n        [-1.01416874,  1.77692415, -0.0175506 , ...,  0.02982226,\n         -0.79090697, -0.75716479],\n        [ 0.99411964, -0.39523617,  0.46654021, ..., -1.62395586,\n         -0.63782079,  1.43213844],\n        [ 1.77132541, -0.95056043,  0.37540258, ...,  0.01968714,\n         -1.03527548,  0.39205272]],\n\n       [[-0.10334535, -0.8929405 ,  0.73607739, ..., -1.19666118,\n          0.06852772, -0.96987602],\n        [ 2.13759694,  0.84869979, -0.99459824, ...,  0.65078661,\n         -0.49690394,  0.77831748],\n        [-1.44472736, -1.21900212, -0.77229333, ..., -0.45423455,\n          0.19830191, -0.68767208],\n        ...,\n        [ 0.19454783, -0.71190753,  2.82909697, ...,  0.97857095,\n          0.67187882,  0.09746846],\n        [-0.58904084, -0.41505728,  1.04412233, ..., -0.12198221,\n         -0.50684467,  1.56542232],\n        [-0.89195114,  1.23244903, -2.10987152, ...,  0.91622949,\n          0.40999001, -0.65424188]],\n\n       [[ 0.95626333,  0.21940413,  0.86589926, ...,  1.47272558,\n         -0.55443001,  1.2008141 ],\n        [ 0.94032427,  0.0931288 ,  0.77226228, ...,  1.26916956,\n         -0.57662136,  0.88842902],\n        [-0.23138386,  0.15845085, -1.33668801, ..., -1.33332178,\n          0.15524309, -1.08860061],\n        ...,\n        [ 1.26120065, -0.15534739,  0.34744789, ..., -1.53003928,\n         -0.07152691, -1.72074586],\n        [-1.15880002,  0.73396249, -0.10402144, ...,  1.01286394,\n         -0.78903161,  2.12732981],\n        [-0.12447582, -0.07029113, -0.5904053 , ...,  0.45058805,\n          0.23860171,  1.39694982]],\n\n       [[ 1.37288017,  1.57454868, -1.31150848, ..., -0.11459006,\n          1.57652361,  0.32320881],\n        [-1.15566697, -0.90959159,  1.06482753, ..., -0.56897759,\n         -1.87990178, -0.52078417],\n        [-0.1134551 , -0.66397135, -0.29449925, ...,  1.63000314,\n          0.50064175, -0.64631669],\n        ...,\n        [ 0.57673475,  1.49125537,  0.97739831, ..., -0.26974367,\n         -1.55536186, -0.15896637],\n        [-0.18430432,  0.11944914, -0.56572547, ..., -0.51577881,\n         -0.14535604, -1.09840927],\n        [ 0.76741937,  1.39186527,  1.48469105, ...,  0.19037821,\n         -0.30807854,  0.44160543]]])\u03c3(chain, draw, race)float6427.23 6.505 39.42 ... 47.14 64.05array([[[ 27.22582328,   6.50453839,  39.42478265],\n        [ 13.37751425,   8.46802428, 129.89610941],\n        [ 10.72164228,  24.94971223, 102.7146095 ],\n        ...,\n        [107.26940159,  23.20508653,  35.3446602 ],\n        [124.97180552,  13.19227419, 145.18684899],\n        [ 88.2747096 ,  40.61048868,  50.21903074]],\n\n       [[131.31729221,  96.5412831 ,  70.56487648],\n        [143.55608877,  36.54926803,   5.84418576],\n        [ 33.35705402, 205.64975605,  10.01984894],\n        ...,\n        [ 70.90358774,  23.20074938, 104.54547733],\n        [ 74.54938645,  48.98896964, 131.8366626 ],\n        [ 28.87932693, 103.09557275,  45.74619814]],\n\n       [[ 98.66459786, 213.93501451,  77.75342308],\n        [ 46.20775227, 140.47053288,  87.54119877],\n        [ 48.65507021, 182.63370476,  35.63529879],\n        ...,\n        [  4.05083801, 116.69219995, 127.42758537],\n        [ 28.45085473,  79.66533597, 140.58625841],\n        [148.66125575, 154.45834609, 239.20924515]],\n\n       [[ 22.20125272,  74.76545816,  94.2220565 ],\n        [ 63.23463911,  29.49654959,  78.6400277 ],\n        [ 94.44434706,  67.93754801, 187.33159977],\n        ...,\n        [ 94.74513333,  55.86780229, 124.72461746],\n        [ 14.08098885,  94.3565778 , 120.11072466],\n        [ 18.22473629,  47.14089139,  64.04793555]]])MMR(chain, draw, replay)float644.234e+03 4.106e+03 ... 4.073e+03array([[[4233.86597263, 4106.21613813, 4232.67050709, ...,\n         4116.83150619, 4161.62064575, 4104.79336979],\n        [4169.02748999, 4176.15224566, 4172.44894728, ...,\n         4163.47995259, 4205.76776789, 4166.62721748],\n        [4369.57899735, 4050.99859722, 4377.91042278, ...,\n         4024.16365495, 4378.18064731, 4033.72170767],\n        ...,\n        [4159.88923469, 4045.29375632, 4266.79586648, ...,\n         4004.75210576, 4183.8383908 , 3986.49000311],\n        [4306.85019842, 3847.74709363, 4240.91764535, ...,\n         3831.53748658, 4102.90365662, 3871.85432064],\n        [4215.32054396, 3822.00798974, 4092.09586122, ...,\n         3861.41021769, 3967.5686653 , 3876.53216602]],\n\n       [[4317.64900043, 3801.60384413, 4427.87972211, ...,\n         3772.28226007, 4340.21890649, 3794.17639083],\n        [4412.89192094, 4094.90863597, 3963.24623187, ...,\n         4087.6750538 , 4034.6932786 , 4092.33621384],\n        [4147.99870736, 3656.59508486, 4170.42912556, ...,\n         3813.86934982, 4202.80532332, 3765.86297953],\n        ...,\n        [4172.61524529, 3978.2611847 , 4359.41423107, ...,\n         4017.48155239, 4206.45972478, 3997.0393142 ],\n        [4086.41694857, 4004.11958463, 4208.1682613 , ...,\n         4018.47703031, 4092.54462294, 4101.14123968],\n        [4229.95761948, 4248.45664107, 4194.78489881, ...,\n         4215.85580654, 4267.5568035 , 4053.94716107]],\n\n       [[4358.6852591 , 4166.57894108, 4349.76952448, ...,\n         4434.70828399, 4209.63330835, 4376.53689592],\n        [4333.72599335, 4151.67084096, 4325.96022654, ...,\n         4316.86991295, 4263.63134537, 4263.38708701],\n        [4046.28209913, 3958.4506536 , 3992.50344832, ...,\n         3686.00269018, 4065.09346086, 3730.69702582],\n        ...,\n        [4277.0281587 , 4190.54158446, 4273.32669429, ...,\n         4030.12576439, 4271.62949522, 4007.87179371],\n        [4137.27879557, 4063.33442943, 4167.28814765, ...,\n         4085.55320713, 4147.79902283, 4174.33750488],\n        [4127.8338395 , 4058.4187474 , 4058.56817809, ...,\n         4138.87288461, 4181.8094006 , 4285.04635831]],\n\n       [[4422.28710553, 4090.75659466, 4362.69031474, ...,\n         3964.46736236, 4426.80824501, 3997.1995961 ],\n        [3907.04303111, 4029.45937695, 4047.45519966, ...,\n         4039.50631474, 3861.24630434, 4040.92785429],\n        [4354.72028456, 4015.05144374, 4337.62168777, ...,\n         4170.8984463 , 4412.71826075, 4016.25085813],\n        ...,\n        [4398.69329839, 4033.32573322, 4436.65422109, ...,\n         3934.9425872 , 4196.68752121, 3941.13147145],\n        [3983.52564834, 4084.42744336, 3978.15486147, ...,\n         4024.48950801, 3984.07407872, 3969.51449166],\n        [4147.43947677, 4117.95816506, 4160.51156385, ...,\n         4061.31899411, 4127.83881087, 4073.1620688 ]]])MMR_diff(chain, draw, replay)float64195.9 -56.78 143.7 ... 127.8 -114.8array([[[ 195.86597263,  -56.78386187,  143.67050709, ...,\n          -68.16849381,  161.62064575,  -83.20663021],\n        [ 131.02748999,   13.15224566,   83.44894728, ...,\n          -21.52004741,  205.76776789,  -21.37278252],\n        [ 331.57899735, -112.00140278,  288.91042278, ...,\n         -160.83634505,  378.18064731, -154.27829233],\n        ...,\n        [ 121.88923469, -117.70624368,  177.79586648, ...,\n         -180.24789424,  183.8383908 , -201.50999689],\n        [ 268.85019842, -315.25290637,  151.91764535, ...,\n         -353.46251342,  102.90365662, -316.14567936],\n        [ 177.32054396, -340.99201026,    3.09586122, ...,\n         -323.58978231,  -32.4313347 , -311.46783398]],\n\n       [[ 279.64900043, -361.39615587,  338.87972211, ...,\n         -412.71773993,  340.21890649, -393.82360917],\n        [ 374.89192094,  -68.09136403, -125.75376813, ...,\n          -97.3249462 ,   34.6932786 ,  -95.66378616],\n        [ 109.99870736, -506.40491514,   81.42912556, ...,\n         -371.13065018,  202.80532332, -422.13702047],\n        ...,\n        [ 134.61524529, -184.7388153 ,  270.41423107, ...,\n         -167.51844761,  206.45972478, -190.9606858 ],\n        [  48.41694857, -158.88041537,  119.1682613 , ...,\n         -166.52296969,   92.54462294,  -86.85876032],\n        [ 191.95761948,   85.45664107,  105.78489881, ...,\n           30.85580654,  267.5568035 , -134.05283893]],\n\n       [[ 320.6852591 ,    3.57894108,  260.76952448, ...,\n          249.70828399,  209.63330835,  188.53689592],\n        [ 295.72599335,  -11.32915904,  236.96022654, ...,\n          131.86991295,  263.63134537,   75.38708701],\n        [   8.28209913, -204.5493464 ,  -96.49655168, ...,\n         -498.99730982,   65.09346086, -457.30297418],\n        ...,\n        [ 239.0281587 ,   27.54158446,  184.32669429, ...,\n         -154.87423561,  271.62949522, -180.12820629],\n        [  99.27879557,  -99.66557057,   78.28814765, ...,\n          -99.44679287,  147.79902283,  -13.66249512],\n        [  89.8338395 , -104.5812526 ,  -30.43182191, ...,\n          -46.12711539,  181.8094006 ,   97.04635831]],\n\n       [[ 384.28710553,  -72.24340534,  273.69031474, ...,\n         -220.53263764,  426.80824501, -190.8004039 ],\n        [-130.95696889, -133.54062305,  -41.54480034, ...,\n         -145.49368526, -138.75369566, -147.07214571],\n        [ 316.72028456, -147.94855626,  248.62168777, ...,\n          -14.1015537 ,  412.71826075, -171.74914187],\n        ...,\n        [ 360.69329839, -129.67426678,  347.65422109, ...,\n         -250.0574128 ,  196.68752121, -246.86852855],\n        [ -54.47435166,  -78.57255664, -110.84513853, ...,\n         -160.51049199,  -15.92592128, -218.48550834],\n        [ 109.43947677,  -45.04183494,   71.51156385, ...,\n         -123.68100589,  127.83881087, -114.8379312 ]]])winrate(chain, draw, replay)float640.6254 0.4629 ... 0.5829 0.4254array([[[0.62539184, 0.46292339, 0.59288977, ..., 0.45552587,\n         0.60417516, 0.44578491],\n        [0.58488098, 0.50860261, 0.55437173, ..., 0.48592652,\n         0.63144167, 0.48602278],\n        [0.70424627, 0.4272549 , 0.68047498, ..., 0.39631572,\n         0.72899659, 0.40042837],\n        ...,\n        [0.579064  , 0.42360614, 0.61425083, ..., 0.38423006,\n         0.6179903 , 0.37115482],\n        [0.66895588, 0.30472821, 0.59808776, ..., 0.28396851,\n         0.56691001, 0.30423351],\n        [0.6139561 , 0.29064968, 0.50202513, ..., 0.30012628,\n         0.47879797, 0.3068306 ]],\n\n       [[0.6751831 , 0.27976657, 0.7082095 , ..., 0.25352371,\n         0.70893308, 0.26299327],\n        [0.72729319, 0.45557593, 0.41847324, ..., 0.43667736,\n         0.52267881, 0.43774686],\n        [0.57146229, 0.20998001, 0.55306573, ..., 0.27466314,\n         0.6296359 , 0.24888782],\n        ...,\n        [0.58715842, 0.38145365, 0.66986153, ..., 0.3921403 ,\n         0.63186293, 0.37761992],\n        [0.53162934, 0.3975408 , 0.57732763, ..., 0.39276136,\n         0.56024338, 0.44342522],\n        [0.62299295, 0.55566915, 0.56876006, ..., 0.52017317,\n         0.66820599, 0.41319834]],\n\n       [[0.69827494, 0.50234112, 0.66425691, ..., 0.65777178,\n         0.6337924 , 0.6208884 ],\n        [0.68433995, 0.49258965, 0.650224  , ..., 0.58541607,\n         0.66592486, 0.54915469],\n        [0.50541747, 0.36930058, 0.43721063, ..., 0.21321342,\n         0.54247782, 0.23208648],\n        ...,\n        [0.65145361, 0.51800836, 0.61829188, ..., 0.40005405,\n         0.67056436, 0.38430415],\n        [0.56457983, 0.4351714 , 0.55103335, ..., 0.43531211,\n         0.59549456, 0.49106372],\n        [0.55849514, 0.43201257, 0.48010373, ..., 0.46986282,\n         0.61673617, 0.56314332]],\n\n       [[0.73214164, 0.45288266, 0.67175446, ..., 0.35961398,\n         0.75339009, 0.3777185 ],\n        [0.41516382, 0.41352334, 0.47285047, ..., 0.40595928,\n         0.4102192 , 0.40496366],\n        [0.69608465, 0.40441119, 0.65713147, ..., 0.49077661,\n         0.74647655, 0.38950478],\n        ...,\n        [0.71986271, 0.41597896, 0.71293119, ..., 0.34202261,\n         0.62589531, 0.34390283],\n        [0.46442617, 0.44878255, 0.42799542, ..., 0.39651972,\n         0.48958367, 0.36084846],\n        [0.57110391, 0.47057023, 0.54664281, ..., 0.41979366,\n         0.58285382, 0.42543967]]])Attributes: (6)created_at :2020-06-20T14:41:39.607220arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :25.67070198059082tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  posterior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000race: 3replay: 202Coordinates: (4)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')Data variables: (4)win(chain, draw, replay)int641 1 1 0 1 1 1 1 ... 0 0 0 0 1 0 1 0array([[[1, 1, 1, ..., 1, 0, 1],\n        [0, 0, 1, ..., 1, 1, 1],\n        [1, 1, 1, ..., 0, 1, 1],\n        ...,\n        [1, 0, 1, ..., 0, 0, 0],\n        [1, 0, 0, ..., 1, 0, 0],\n        [1, 0, 0, ..., 1, 0, 0]],\n\n       [[0, 1, 0, ..., 0, 0, 0],\n        [1, 0, 0, ..., 0, 0, 0],\n        [0, 0, 0, ..., 0, 1, 0],\n        ...,\n        [1, 1, 0, ..., 1, 1, 1],\n        [1, 0, 1, ..., 0, 1, 0],\n        [1, 1, 1, ..., 1, 1, 1]],\n\n       [[1, 0, 1, ..., 1, 1, 0],\n        [0, 0, 1, ..., 0, 1, 1],\n        [1, 0, 1, ..., 0, 1, 0],\n        ...,\n        [0, 1, 1, ..., 1, 0, 1],\n        [1, 0, 1, ..., 0, 0, 1],\n        [0, 0, 1, ..., 1, 1, 0]],\n\n       [[1, 1, 0, ..., 0, 1, 0],\n        [0, 0, 0, ..., 0, 1, 0],\n        [1, 1, 1, ..., 1, 1, 0],\n        ...,\n        [1, 0, 1, ..., 0, 1, 0],\n        [0, 0, 0, ..., 1, 1, 1],\n        [1, 1, 1, ..., 0, 1, 0]]])\u03bc(chain, draw, race)float644.211e+03 4.108e+03 ... 3.992e+03array([[[4210.85745791, 4108.13402572, 4047.68655821],\n        [4187.82039211, 4167.02974265, 3832.39048778],\n        [4385.10730355, 4051.15698963, 3888.3543684 ],\n        ...,\n        [4268.67850837, 4004.06007755, 3935.24654733],\n        [4182.61327252, 3852.96115761, 4013.25955458],\n        [4058.95730755, 3860.61071343, 4048.4206048 ]],\n\n       [[4331.22003251, 3887.80946609, 3896.23173387],\n        [4106.02686452, 4063.88927972, 3995.75729977],\n        [4196.19055581, 3907.28257413, 3817.30936413],\n        ...,\n        [4158.82110597, 3994.77797297, 3948.94402472],\n        [4130.32958212, 4024.45281323, 3864.17620077],\n        [4255.71656811, 4121.39660228, 4067.50723152]],\n\n       [[4264.33592228, 4119.64071496, 3900.73678858],\n        [4290.27572226, 4138.58898858, 3923.24665912],\n        [4057.54009725, 3929.51218737, 3995.78802404],\n        ...,\n        [4271.91923915, 4208.66941361, 3925.91501886],\n        [4170.24764659, 4004.86306088, 3916.82405953],\n        [4146.33857085, 4069.27579897, 3925.21194574]],\n\n       [[4391.8074459 , 3973.03474104, 4062.09104669],\n        [3980.12121482, 4056.28919035, 3860.08003276],\n        [4365.43547727, 4060.16002941, 3927.51863056],\n        ...,\n        [4344.05048768, 3950.01257309, 3857.26550133],\n        [3986.12083546, 4073.15663108, 4093.19655361],\n        [4133.45346107, 4052.34439539, 3991.74262184]]])\u03c3(chain, draw, race)float6427.23 6.505 39.42 ... 47.14 64.05array([[[ 27.22582328,   6.50453839,  39.42478265],\n        [ 13.37751425,   8.46802428, 129.89610941],\n        [ 10.72164228,  24.94971223, 102.7146095 ],\n        ...,\n        [107.26940159,  23.20508653,  35.3446602 ],\n        [124.97180552,  13.19227419, 145.18684899],\n        [ 88.2747096 ,  40.61048868,  50.21903074]],\n\n       [[131.31729221,  96.5412831 ,  70.56487648],\n        [143.55608877,  36.54926803,   5.84418576],\n        [ 33.35705402, 205.64975605,  10.01984894],\n        ...,\n        [ 70.90358774,  23.20074938, 104.54547733],\n        [ 74.54938645,  48.98896964, 131.8366626 ],\n        [ 28.87932693, 103.09557275,  45.74619814]],\n\n       [[ 98.66459786, 213.93501451,  77.75342308],\n        [ 46.20775227, 140.47053288,  87.54119877],\n        [ 48.65507021, 182.63370476,  35.63529879],\n        ...,\n        [  4.05083801, 116.69219995, 127.42758537],\n        [ 28.45085473,  79.66533597, 140.58625841],\n        [148.66125575, 154.45834609, 239.20924515]],\n\n       [[ 22.20125272,  74.76545816,  94.2220565 ],\n        [ 63.23463911,  29.49654959,  78.6400277 ],\n        [ 94.44434706,  67.93754801, 187.33159977],\n        ...,\n        [ 94.74513333,  55.86780229, 124.72461746],\n        [ 14.08098885,  94.3565778 , 120.11072466],\n        [ 18.22473629,  47.14089139,  64.04793555]]])winrate(chain, draw, replay)float640.6254 0.4629 ... 0.5829 0.4254array([[[0.62539184, 0.46292339, 0.59288977, ..., 0.45552587,\n         0.60417516, 0.44578491],\n        [0.58488098, 0.50860261, 0.55437173, ..., 0.48592652,\n         0.63144167, 0.48602278],\n        [0.70424627, 0.4272549 , 0.68047498, ..., 0.39631572,\n         0.72899659, 0.40042837],\n        ...,\n        [0.579064  , 0.42360614, 0.61425083, ..., 0.38423006,\n         0.6179903 , 0.37115482],\n        [0.66895588, 0.30472821, 0.59808776, ..., 0.28396851,\n         0.56691001, 0.30423351],\n        [0.6139561 , 0.29064968, 0.50202513, ..., 0.30012628,\n         0.47879797, 0.3068306 ]],\n\n       [[0.6751831 , 0.27976657, 0.7082095 , ..., 0.25352371,\n         0.70893308, 0.26299327],\n        [0.72729319, 0.45557593, 0.41847324, ..., 0.43667736,\n         0.52267881, 0.43774686],\n        [0.57146229, 0.20998001, 0.55306573, ..., 0.27466314,\n         0.6296359 , 0.24888782],\n        ...,\n        [0.58715842, 0.38145365, 0.66986153, ..., 0.3921403 ,\n         0.63186293, 0.37761992],\n        [0.53162934, 0.3975408 , 0.57732763, ..., 0.39276136,\n         0.56024338, 0.44342522],\n        [0.62299295, 0.55566915, 0.56876006, ..., 0.52017317,\n         0.66820599, 0.41319834]],\n\n       [[0.69827494, 0.50234112, 0.66425691, ..., 0.65777178,\n         0.6337924 , 0.6208884 ],\n        [0.68433995, 0.49258965, 0.650224  , ..., 0.58541607,\n         0.66592486, 0.54915469],\n        [0.50541747, 0.36930058, 0.43721063, ..., 0.21321342,\n         0.54247782, 0.23208648],\n        ...,\n        [0.65145361, 0.51800836, 0.61829188, ..., 0.40005405,\n         0.67056436, 0.38430415],\n        [0.56457983, 0.4351714 , 0.55103335, ..., 0.43531211,\n         0.59549456, 0.49106372],\n        [0.55849514, 0.43201257, 0.48010373, ..., 0.46986282,\n         0.61673617, 0.56314332]],\n\n       [[0.73214164, 0.45288266, 0.67175446, ..., 0.35961398,\n         0.75339009, 0.3777185 ],\n        [0.41516382, 0.41352334, 0.47285047, ..., 0.40595928,\n         0.4102192 , 0.40496366],\n        [0.69608465, 0.40441119, 0.65713147, ..., 0.49077661,\n         0.74647655, 0.38950478],\n        ...,\n        [0.71986271, 0.41597896, 0.71293119, ..., 0.34202261,\n         0.62589531, 0.34390283],\n        [0.46442617, 0.44878255, 0.42799542, ..., 0.39651972,\n         0.48958367, 0.36084846],\n        [0.57110391, 0.47057023, 0.54664281, ..., 0.41979366,\n         0.58285382, 0.42543967]]])Attributes: (4)created_at :2020-06-20T14:41:40.227565arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  log_likelihood\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000replay: 202Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (1)win(chain, draw, replay)float64-0.4694 -0.7702 ... -0.8743 -0.5542array([[[-0.46937689, -0.7701937 , -0.89867129, ..., -0.60793486,\n         -0.92678349, -0.59020241],\n        [-0.5363469 , -0.6760883 , -0.80827016, ..., -0.66538907,\n         -0.99815629, -0.66557633],\n        [-0.35062718, -0.85037448, -1.14091971, ..., -0.50470393,\n         -1.30562387, -0.51153982],\n        ...,\n        [-0.54634227, -0.85895116, -0.95256795, ..., -0.48488185,\n         -0.96230927, -0.46387019],\n        [-0.40203718, -1.188335  , -0.91152153, ..., -0.33403113,\n         -0.83680974, -0.36274118],\n        [-0.48783186, -1.23563659, -0.69720566, ..., -0.35685536,\n         -0.65161755, -0.36648086]],\n\n       [[-0.39277136, -1.27379969, -1.23171919, ..., -0.29239143,\n         -1.23420208, -0.30515825],\n        [-0.31842559, -0.78619288, -0.54209829, ..., -0.57390274,\n         -0.73956566, -0.57580311],\n        [-0.55955678, -1.56074295, -0.80534375, ..., -0.32111909,\n         -0.9932687 , -0.28620026],\n        ...,\n        [-0.53246061, -0.96376593, -1.1082431 , ..., -0.49781118,\n         -0.99929993, -0.47420432],\n        [-0.63180876, -0.9224577 , -0.86115793, ..., -0.49883342,\n         -0.82153384, -0.58595374],\n        [-0.47322008, -0.58758221, -0.84109064, ..., -0.73433001,\n         -1.10324095, -0.5330684 ]],\n\n       [[-0.35914236, -0.68847586, -1.09140904, ..., -1.07227745,\n         -1.00455489, -0.96992466],\n        [-0.37930049, -0.70807881, -1.05046232, ..., -0.88047984,\n         -1.09638935, -0.796631  ],\n        [-0.68237052, -0.99614438, -0.57484984, ..., -0.23979825,\n         -0.78192993, -0.26407816],\n        ...,\n        [-0.42854909, -0.65776391, -0.96309906, ..., -0.51091572,\n         -1.11037426, -0.48500219],\n        [-0.57167349, -0.8320153 , -0.80080667, ..., -0.57148211,\n         -0.9050901 , -0.67543246],\n        [-0.58250936, -0.83930058, -0.65412597, ..., -0.63461948,\n         -0.95903169, -0.8281501 ]],\n\n       [[-0.31178129, -0.79212221, -1.11399335, ..., -0.44568413,\n         -1.39994749, -0.47436271],\n        [-0.8790821 , -0.88304132, -0.64027103, ..., -0.52080742,\n         -0.52800433, -0.5191328 ],\n        [-0.36228401, -0.90532311, -1.07040821, ..., -0.67486847,\n         -1.37229894, -0.49348481],\n        ...,\n        [-0.32869477, -0.87712059, -1.24803335, ..., -0.41858471,\n         -0.9832196 , -0.42144637],\n        [-0.76695269, -0.80121681, -0.55860828, ..., -0.50504192,\n         -0.67252855, -0.4476137 ],\n        [-0.56018411, -0.75381006, -0.79107498, ..., -0.54437148,\n         -0.87431857, -0.55415018]]])Attributes: (4)created_at :2020-06-20T14:41:40.224319arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 4draw: 2000Coordinates: (2)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])Data variables: (10)step_size_bar(chain, draw)float640.2948 0.2948 ... 0.2904 0.2904array([[0.29475372, 0.29475372, 0.29475372, ..., 0.29475372, 0.29475372,\n        0.29475372],\n       [0.29770566, 0.29770566, 0.29770566, ..., 0.29770566, 0.29770566,\n        0.29770566],\n       [0.27693519, 0.27693519, 0.27693519, ..., 0.27693519, 0.27693519,\n        0.27693519],\n       [0.29040166, 0.29040166, 0.29040166, ..., 0.29040166, 0.29040166,\n        0.29040166]])energy_error(chain, draw)float64-0.2597 0.03461 ... 0.2249 0.4218array([[-0.25966   ,  0.03460919,  0.01227495, ..., -0.51621275,\n         0.86212363, -0.24459744],\n       [-0.22234907,  0.28075065, -0.17805517, ...,  0.24543193,\n        -0.28516645,  0.2238124 ],\n       [-1.07546919,  0.10968526,  0.01985628, ..., -0.48126788,\n        -0.01111381, -0.44255399],\n       [ 0.0773235 ,  0.06891559, -0.09303872, ...,  0.02184957,\n         0.2248607 ,  0.42175383]])step_size(chain, draw)float640.3427 0.3427 ... 0.3262 0.3262array([[0.34270119, 0.34270119, 0.34270119, ..., 0.34270119, 0.34270119,\n        0.34270119],\n       [0.24183475, 0.24183475, 0.24183475, ..., 0.24183475, 0.24183475,\n        0.24183475],\n       [0.30871193, 0.30871193, 0.30871193, ..., 0.30871193, 0.30871193,\n        0.30871193],\n       [0.32619857, 0.32619857, 0.32619857, ..., 0.32619857, 0.32619857,\n        0.32619857]])max_energy_error(chain, draw)float640.6081 0.6931 ... 0.2691 0.7324array([[ 0.60811894,  0.6931234 , -0.45286992, ...,  0.95980239,\n         1.16150203, -0.51598675],\n       [-0.23944338,  0.28075065,  1.04635515, ...,  0.38439969,\n        -0.57428163,  0.29192163],\n       [-1.07546919,  0.9341971 ,  0.44889643, ..., -0.62753125,\n         0.34544639, -0.49631647],\n       [ 0.14807623,  0.52570743, -0.12783034, ...,  0.52722686,\n         0.2690612 ,  0.73236215]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])depth(chain, draw)int644 4 4 4 4 4 4 4 ... 4 4 4 4 4 4 4 4array([[4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4],\n       [4, 4, 4, ..., 4, 4, 4]])mean_tree_accept(chain, draw)float640.9568 0.9454 ... 0.8909 0.8291array([[0.95677878, 0.94541275, 0.98043667, ..., 0.95633415, 0.76809655,\n        0.99642304],\n       [0.99644285, 0.94807192, 0.90218025, ..., 0.82851872, 0.96650925,\n        0.92233715],\n       [1.        , 0.71300232, 0.88258827, ..., 1.        , 0.93890528,\n        1.        ],\n       [0.94858298, 0.788294  , 0.98735475, ..., 0.78198705, 0.89093101,\n        0.8291273 ]])energy(chain, draw)float64571.0 550.5 551.2 ... 535.7 552.8array([[570.97160285, 550.45584786, 551.24512846, ..., 556.01462471,\n        539.20361935, 542.4138038 ],\n       [527.22012699, 525.94887852, 554.05126794, ..., 577.34190697,\n        566.73680041, 554.7874333 ],\n       [551.2205363 , 538.40491567, 540.25295614, ..., 567.3886664 ,\n        554.96612302, 527.45559388],\n       [539.74878505, 563.86859884, 548.89266634, ..., 549.10831899,\n        535.70152588, 552.7940487 ]])lp(chain, draw)float64-454.4 -444.6 ... -441.8 -450.3array([[-454.37819213, -444.56013535, -452.36990853, ..., -440.74435605,\n        -445.0448313 , -439.64688243],\n       [-429.31151241, -445.44878934, -454.31044625, ..., -462.85580719,\n        -447.20869749, -457.61499909],\n       [-427.08968302, -433.51041027, -430.05582152, ..., -448.69884569,\n        -444.46669223, -426.50110975],\n       [-441.96784552, -446.14529167, -443.64588735, ..., -436.04827228,\n        -441.77413958, -450.32373305]])tree_size(chain, draw)float6415.0 15.0 15.0 ... 15.0 15.0 15.0array([[15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.],\n       [15., 15., 15., ..., 15., 15., 15.]])Attributes: (6)created_at :2020-06-20T14:41:39.615645arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1sampling_time :25.67070198059082tuning_steps :2000\n                      \n                  \n            \n            \n            \n                  \n                  prior\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000race: 3replay: 202Coordinates: (4)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])race(race)<U7'Terran' 'Protoss' 'Zerg'array(['Terran', 'Protoss', 'Zerg'], dtype='<U7')replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (3)\u03bc(chain, draw, race)float644.487e+03 3.816e+03 ... 4.079e+03array([[[4487.3036091 , 3816.4730759 , 3841.54847432],\n        [3678.10941335, 4259.6222888 , 3309.53839094],\n        [4523.44352926, 3771.63792973, 4095.71172882],\n        ...,\n        [3793.7352304 , 3936.80991215, 3897.05804332],\n        [4287.27113474, 4067.38137671, 3856.85673442],\n        [3792.63645476, 3763.38063103, 4079.25539045]]])\u03c3(chain, draw, race)float64203.6 143.1 121.8 ... 137.4 2.277array([[[203.63022425, 143.11882721, 121.84862917],\n        [ 45.92168871,  54.50152003, 165.24930064],\n        [ 73.03480705,  79.10581705,  32.67507679],\n        ...,\n        [  2.51873565, 187.68065267, 164.95280152],\n        [128.66435759,  34.45577797, 153.07274428],\n        [120.71958961, 137.40100064,   2.27693063]]])winrate(chain, draw, replay)float640.415 0.3547 ... 0.2377 0.3302array([[[0.41497111, 0.35469398, 0.71008641, ..., 0.2409493 ,\n         0.6721141 , 0.32116004],\n        [0.29598745, 0.56161731, 0.26909548, ..., 0.55386956,\n         0.28532212, 0.56595945],\n        [0.82468725, 0.30495278, 0.76779695, ..., 0.28886179,\n         0.79610061, 0.31071488],\n        ...,\n        [0.34586104, 0.51741056, 0.31504336, ..., 0.31216598,\n         0.36711597, 0.13365978],\n        [0.69922031, 0.44950387, 0.67782839, ..., 0.41620837,\n         0.84102901, 0.41210879],\n        [0.35284029, 0.20802614, 0.30976338, ..., 0.35838849,\n         0.23765418, 0.33020678]]])Attributes: (4)created_at :2020-06-20T14:41:40.231024arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  prior_predictive\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:chain: 1draw: 2000replay: 202Coordinates: (3)chain(chain)int640array([0])draw(draw)int640 1 2 3 4 ... 1996 1997 1998 1999array([   0,    1,    2, ..., 1997, 1998, 1999])replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (1)win(chain, draw, replay)int640 1 1 0 1 0 1 0 ... 0 0 0 0 0 0 0 0array([[[0, 1, 1, ..., 0, 1, 0],\n        [0, 1, 0, ..., 0, 1, 0],\n        [1, 0, 0, ..., 1, 1, 0],\n        ...,\n        [0, 1, 0, ..., 1, 1, 0],\n        [1, 0, 1, ..., 1, 0, 1],\n        [1, 0, 0, ..., 0, 0, 0]]])Attributes: (4)created_at :2020-06-20T14:41:40.232791arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 202Coordinates: (1)replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (1)win(replay)float641.0 1.0 0.0 0.0 ... 0.0 0.0 0.0 0.0array([1., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,\n       1., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1.,\n       1., 1., 0., 0., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,\n       0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,\n       1., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1.,\n       0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.,\n       0., 1., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 1., 1., 0.,\n       0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1.,\n       1., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0.,\n       0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,\n       0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1.,\n       0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.])Attributes: (4)created_at :2020-06-20T14:41:40.233660arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n            \n                  \n                  constant_data\n                  \n                  \n                      \n                          \n\n\nShow/Hide data repr\n\n\n\n\n\nShow/Hide attributes\n\n\n\n\n\n\n\n/* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\nxarray.DatasetDimensions:replay: 202Coordinates: (1)replay(replay)int64265 223 402 206 ... 210 188 131 144array([265, 223, 402, ..., 188, 131, 144])Data variables: (2)enemy_race(replay)int320 1 0 2 0 1 0 1 ... 0 2 1 2 0 1 0 1array([0, 1, 0, 2, 0, 1, 0, 1, 1, 2, 0, 1, 1, 2, 2, 1, 0, 1, 1, 0, 2, 0,\n       0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 1, 1, 0, 2, 2, 1, 1, 2, 1, 1, 1,\n       0, 0, 0, 2, 1, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0,\n       2, 0, 2, 2, 1, 2, 2, 0, 1, 1, 1, 2, 2, 0, 1, 1, 2, 1, 2, 0, 1, 1,\n       1, 1, 0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 0, 1, 2, 0, 2, 1, 2, 2, 0, 0,\n       0, 0, 1, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 1, 0, 2, 0, 2, 0, 2, 2,\n       2, 1, 2, 2, 2, 0, 0, 2, 2, 1, 2, 1, 1, 1, 2, 0, 2, 1, 2, 2, 2, 1,\n       0, 0, 1, 2, 2, 1, 2, 0, 0, 1, 2, 0, 0, 0, 2, 2, 0, 2, 2, 2, 1, 0,\n       1, 1, 1, 0, 0, 0, 0, 2, 0, 2, 0, 2, 2, 1, 2, 0, 1, 2, 0, 2, 1, 2,\n       0, 1, 0, 1], dtype=int32)enemy_mmr(replay)int324038 4163 4089 ... 4185 4000 4188array([4038, 4163, 4089, 4196, 4005, 4043, 4036, 4078, 3928, 3936, 3988,\n       4014, 4028, 3915, 3896, 4017, 4000, 3936, 4037, 3845, 3980, 3889,\n       3979, 3997, 4075, 4115, 3928, 4092, 4006, 3995, 4034, 3889, 3900,\n       4011, 3962, 3955, 4054, 3959, 3879, 4072, 4032, 3986, 3966, 4002,\n       4238, 3995, 4225, 4098, 4451, 4135, 4042, 4008, 4011, 4152, 4108,\n       4095, 4071, 4337, 3848, 4111, 4009, 4144, 4021, 4136, 4213, 4401,\n       4444, 4467, 4060, 4193, 4175, 3999, 4004, 4285, 4019, 4190, 4166,\n       4183, 4076, 4242, 4017, 4228, 4001, 4099, 4050, 3973, 4037, 3905,\n       4240, 4065, 3975, 3919, 4091, 4093, 4045, 4045, 4101, 3975, 4189,\n       4047, 4003, 4040, 3997, 4010, 4023, 4004, 3939, 4153, 3962, 4030,\n       4050, 4080, 4093, 4071, 4013, 4146, 4109, 4019, 4049, 3998, 4021,\n       3959, 3985, 3990, 4002, 4033, 3883, 4123, 4199, 3851, 3889, 4045,\n       5035, 3856, 3924, 3902, 4088, 3921, 4055, 3952, 4027, 3905, 3770,\n       3940, 3899, 4082, 3921, 3931, 3959, 3998, 3888, 4039, 3988, 4025,\n       3831, 3952, 3945, 3869, 3981, 3833, 4008, 4119, 4072, 4047, 4018,\n       4427, 4105, 4127, 4225, 4142, 3944, 4040, 4016, 4126, 3960, 3981,\n       4040, 4074, 4093, 3887, 4173, 4103, 3929, 4040, 4081, 3949, 4123,\n       4253, 4223, 4059, 4028, 3946, 4244, 4304, 4182, 4370, 4194, 4147,\n       4232, 4185, 4000, 4188], dtype=int32)Attributes: (4)created_at :2020-06-20T14:41:40.235138arviz_version :0.8.3inference_library :pymc3inference_library_version :3.9.1\n                      \n                  \n            \n            \n              \n            \n             /* CSS stylesheet for displaying xarray objects in jupyterlab.\n *\n */\n\n:root {\n  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n  --xr-background-color: var(--jp-layout-color0, white);\n  --xr-background-color-row-even: var(--jp-layout-color1, white);\n  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n}\n\n.xr-wrap {\n  min-width: 300px;\n  max-width: 700px;\n}\n\n.xr-header {\n  padding-top: 6px;\n  padding-bottom: 6px;\n  margin-bottom: 4px;\n  border-bottom: solid 1px var(--xr-border-color);\n}\n\n.xr-header > div,\n.xr-header > ul {\n  display: inline;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.xr-obj-type,\n.xr-array-name {\n  margin-left: 2px;\n  margin-right: 10px;\n}\n\n.xr-obj-type {\n  color: var(--xr-font-color2);\n}\n\n.xr-sections {\n  padding-left: 0 !important;\n  display: grid;\n  grid-template-columns: 150px auto auto 1fr 20px 20px;\n}\n\n.xr-section-item {\n  display: contents;\n}\n\n.xr-section-item input {\n  display: none;\n}\n\n.xr-section-item input + label {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-item input:enabled + label {\n  cursor: pointer;\n  color: var(--xr-font-color2);\n}\n\n.xr-section-item input:enabled + label:hover {\n  color: var(--xr-font-color0);\n}\n\n.xr-section-summary {\n  grid-column: 1;\n  color: var(--xr-font-color2);\n  font-weight: 500;\n}\n\n.xr-section-summary > span {\n  display: inline-block;\n  padding-left: 0.5em;\n}\n\n.xr-section-summary-in:disabled + label {\n  color: var(--xr-font-color2);\n}\n\n.xr-section-summary-in + label:before {\n  display: inline-block;\n  content: '\u25ba';\n  font-size: 11px;\n  width: 15px;\n  text-align: center;\n}\n\n.xr-section-summary-in:disabled + label:before {\n  color: var(--xr-disabled-color);\n}\n\n.xr-section-summary-in:checked + label:before {\n  content: '\u25bc';\n}\n\n.xr-section-summary-in:checked + label > span {\n  display: none;\n}\n\n.xr-section-summary,\n.xr-section-inline-details {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n.xr-section-inline-details {\n  grid-column: 2 / -1;\n}\n\n.xr-section-details {\n  display: none;\n  grid-column: 1 / -1;\n  margin-bottom: 5px;\n}\n\n.xr-section-summary-in:checked ~ .xr-section-details {\n  display: contents;\n}\n\n.xr-array-wrap {\n  grid-column: 1 / -1;\n  display: grid;\n  grid-template-columns: 20px auto;\n}\n\n.xr-array-wrap > label {\n  grid-column: 1;\n  vertical-align: top;\n}\n\n.xr-preview {\n  color: var(--xr-font-color3);\n}\n\n.xr-array-preview,\n.xr-array-data {\n  padding: 0 5px !important;\n  grid-column: 2;\n}\n\n.xr-array-data,\n.xr-array-in:checked ~ .xr-array-preview {\n  display: none;\n}\n\n.xr-array-in:checked ~ .xr-array-data,\n.xr-array-preview {\n  display: inline-block;\n}\n\n.xr-dim-list {\n  display: inline-block !important;\n  list-style: none;\n  padding: 0 !important;\n  margin: 0;\n}\n\n.xr-dim-list li {\n  display: inline-block;\n  padding: 0;\n  margin: 0;\n}\n\n.xr-dim-list:before {\n  content: '(';\n}\n\n.xr-dim-list:after {\n  content: ')';\n}\n\n.xr-dim-list li:not(:last-child):after {\n  content: ',';\n  padding-right: 5px;\n}\n\n.xr-has-index {\n  font-weight: bold;\n}\n\n.xr-var-list,\n.xr-var-item {\n  display: contents;\n}\n\n.xr-var-item > div,\n.xr-var-item label,\n.xr-var-item > .xr-var-name span {\n  background-color: var(--xr-background-color-row-even);\n  margin-bottom: 0;\n}\n\n.xr-var-item > .xr-var-name:hover span {\n  padding-right: 5px;\n}\n\n.xr-var-list > li:nth-child(odd) > div,\n.xr-var-list > li:nth-child(odd) > label,\n.xr-var-list > li:nth-child(odd) > .xr-var-name span {\n  background-color: var(--xr-background-color-row-odd);\n}\n\n.xr-var-name {\n  grid-column: 1;\n}\n\n.xr-var-dims {\n  grid-column: 2;\n}\n\n.xr-var-dtype {\n  grid-column: 3;\n  text-align: right;\n  color: var(--xr-font-color2);\n}\n\n.xr-var-preview {\n  grid-column: 4;\n}\n\n.xr-var-name,\n.xr-var-dims,\n.xr-var-dtype,\n.xr-preview,\n.xr-attrs dt {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding-right: 10px;\n}\n\n.xr-var-name:hover,\n.xr-var-dims:hover,\n.xr-var-dtype:hover,\n.xr-attrs dt:hover {\n  overflow: visible;\n  width: auto;\n  z-index: 1;\n}\n\n.xr-var-attrs,\n.xr-var-data {\n  display: none;\n  background-color: var(--xr-background-color) !important;\n  padding-bottom: 5px !important;\n}\n\n.xr-var-attrs-in:checked ~ .xr-var-attrs,\n.xr-var-data-in:checked ~ .xr-var-data {\n  display: block;\n}\n\n.xr-var-data > table {\n  float: right;\n}\n\n.xr-var-name span,\n.xr-var-data,\n.xr-attrs {\n  padding-left: 25px !important;\n}\n\n.xr-attrs,\n.xr-var-attrs,\n.xr-var-data {\n  grid-column: 1 / -1;\n}\n\ndl.xr-attrs {\n  padding: 0;\n  margin: 0;\n  display: grid;\n  grid-template-columns: 125px auto;\n}\n\n.xr-attrs dt, dd {\n  padding: 0;\n  margin: 0;\n  float: left;\n  padding-right: 10px;\n  width: auto;\n}\n\n.xr-attrs dt {\n  font-weight: normal;\n  grid-column: 1;\n}\n\n.xr-attrs dt:hover span {\n  display: inline-block;\n  background: var(--xr-background-color);\n  padding-right: 10px;\n}\n\n.xr-attrs dd {\n  grid-column: 2;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n.xr-icon-database,\n.xr-icon-file-text2 {\n  display: inline-block;\n  vertical-align: middle;\n  width: 1em;\n  height: 1.5em !important;\n  stroke-width: 0;\n  stroke: currentColor;\n  fill: currentColor;\n}\n.xr-wrap{width:700px!important;} \n\n\n\n\n\n\n\n\n\nIn\u00a0[48]:\n\n    \naz.plot_trace(output, var_names=var_names);\naz.plot_posterior(output, var_names = var_names);\naz.summary(output, var_names = var_names)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[48]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      mean\n      sd\n      hdi_3%\n      hdi_97%\n      mcse_mean\n      mcse_sd\n      ess_mean\n      ess_sd\n      ess_bulk\n      ess_tail\n      r_hat\n    \n  \n  \n    \n      \u03bc[0]\n      4187.331\n      93.433\n      4014.681\n      4370.002\n      0.827\n      0.588\n      12761.0\n      12620.0\n      12833.0\n      5208.0\n      1.0\n    \n    \n      \u03bc[1]\n      4014.234\n      97.855\n      3835.751\n      4202.949\n      0.837\n      0.592\n      13669.0\n      13643.0\n      13703.0\n      5413.0\n      1.0\n    \n    \n      \u03bc[2]\n      3961.245\n      88.126\n      3794.804\n      4122.579\n      0.716\n      0.516\n      15147.0\n      14584.0\n      15149.0\n      5685.0\n      1.0\n    \n    \n      \u03c3[0]\n      79.342\n      60.635\n      0.027\n      187.229\n      0.751\n      0.531\n      6516.0\n      6516.0\n      5236.0\n      3992.0\n      1.0\n    \n    \n      \u03c3[1]\n      80.221\n      59.112\n      0.003\n      184.095\n      0.694\n      0.491\n      7250.0\n      7250.0\n      5667.0\n      4667.0\n      1.0\n    \n    \n      \u03c3[2]\n      82.427\n      62.380\n      0.020\n      196.670\n      0.784\n      0.554\n      6330.0\n      6330.0\n      5219.0\n      4182.0\n      1.0\n    \n  \n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd this seems to show I've grown more balanced as a player - the daily fluctuations are much more similar between games, I've gotten much better against Protoss, slightly worse against Terran, and my PvZ looks like it'll need some more work. Still, I'm really happy to see the data show I'm not as bad in PvP now!\nFor the next post, I'm torn between a few experiments I'm running:\n\na hierarchical model to estimate both true global and per-matchup MMR at the same time while sharing information between the three matchups\nmap dependence, which is going to be easy-ish now that I know how to index variables well\nactual time dependence, but I'll have to read up more on Gaussian processes and random walks to do that.\nplaying around with prior- and posterior- predictive checks, which was going to be in this post, but it turns out I don't fully understand them enough yet. This will involve a foray into xarray - the awesome data structure that stores our results.\n\nIf you have any preference, please say so in the comments; I'll try to take it into account. Until the next time!\n\n\n\n\n\n\n\n{\"state\": {}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "bayes,pymc3,python,starcraft",
      "url": "https://stanczakdominik.github.io/posts/bayes-sc2-part-2/"
    },
    {
      "title": "Bayesian modeling of StarCraft II ladder performance",
      "text": "I've been in a bit of a pickle recently. I really need to figure out Bayesian inference as practice for my masters' thesis. I've been wondering, what kind of cool project - hopefully with my own data - could I make?, I thought as I fired up StarCraft II in the evening, as I usually do to unwind nowadays. What kind of fun use of PyMC3, the neat Python library for probabilistic programming, could I showcase?, I wondered as I watched my ladder ratings fall from the distraction. What kind of useful knowledge could I try to acquire using it?, I thought, watching my game performance fluctuate over the course of months.\nAnd then it hit me.\n\nIn this post, I'm going to use PyMC3 to analyse my 2019 StarCraft II ladder games. In particular, I'm going to look at the relation between MMR - MatchMaking Rating, a metric of ladder performance  - mine and that of my enemies - and what it can tell us about my win chances.\nA few facts about StarCraft\u00b6\nSC2 is a fast-paced real-time action/strategy game played competitively all over the world;\nEach game of SC2 lasts about 10-30 minutes;\nThere are three races in SC2, which means factions, each with a completely different playstyle and toolset; I play Protoss (the advanced space aliens) and the other two suck are Terran (scrappy future humans) and Zerg (hivemind insectoid aliens).\nThere is no tribal animosity between players of the races in the community whatsoever.\n\n\nEach 1v1 game pits two randomly selected players of similar MMR. Better players have higher MMR, and it's used to find worthy (adequate) opponents for you. A Protoss player has three different possible matchups - Protoss vs Protoss (PvP), PvT and PvZ.\n\n\n\n\n\n\n\n\nA few facts about Bayesian inference\u00b6\nit's an alternate, computationally intensive approach to statistics (of which you probably know frequentist statistics)\nit's a really neat tool to formulate complex models of processes occuring between entities\nit can let you infer knowledge about quantities not directly included in your data at all (so-called \"latent\" quantities)\nit can combine data with your initial assumptions (\"priors\") or initial beliefs about quantities in your system\nthis means you need to explicitly state what you believe about the data first\n\n\nit returns probability distributions for your parameters, rather than simple point estimates like means or variances\nthis makes handling asymmetric uncertainties and error bars much easier\n\n\nit's a great framework for learning new knowledge from data, as I'll try to show\n\n\n\n\n\n\n\n\nIn this post, we're going to use my own dataset of ladder replays. The motivation is this: there are days when I play terribly and there are days when I play my heart out. It does, however, feel like my performance fluctuates a lot. I thought I could use Bayesian modelling to learn something about these fluctuations.\nI was going to have an example of pulling this data using ZephyrBlu's replay parser library and an unreleased custom wrapper I have for that. However, since I'm getting a ton of warnings that would distract from the main ideas, in the name of simplicity I'll just post the parsed version on GitHub. I'll come back to parsing those once I finish that library of mine.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd\n\ndf = pd.read_csv(\"https://raw.githubusercontent.com/StanczakDominik/stanczakdominik.github.io/src/files/replays.csv\", index_col=0)\ndf['time_played_at'] = pd.to_datetime(df.time_played_at)\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickame\n    \n  \n  \n    \n      0\n      2020-05-27 10:32:29+00:00\n      True\n      Protoss\n      Terran\n      4004\n      -169\n      giletjaune\n    \n    \n      1\n      2020-06-09 17:11:15+00:00\n      False\n      Protoss\n      Zerg\n      4186\n      39\n      djakette\n    \n    \n      2\n      2020-02-02 17:27:27+00:00\n      True\n      Protoss\n      Terran\n      3971\n      58\n      Syocto\n    \n    \n      3\n      2019-12-20 18:53:00+00:00\n      True\n      Zerg\n      Terran\n      2984\n      -106\n      Jason\n    \n    \n      4\n      2019-12-09 20:36:21+00:00\n      True\n      Protoss\n      Zerg\n      4015\n      -9\n      &lt;OGCO\u0421K&gt;<sp/>ShushYo\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      432\n      2019-11-04 20:53:20+00:00\n      False\n      Protoss\n      Terran\n      3800\n      -83\n      &lt;MiClan&gt;<sp/>MiSHANYA\n    \n    \n      433\n      2020-05-04 12:43:06+00:00\n      True\n      Protoss\n      Terran\n      3926\n      95\n      StaMinA\n    \n    \n      434\n      2020-02-02 17:15:06+00:00\n      False\n      Protoss\n      Zerg\n      4012\n      -80\n      &lt;0mg&gt;<sp/>Sroljo\n    \n    \n      435\n      2020-04-19 11:48:32+00:00\n      True\n      Protoss\n      Zerg\n      0\n      0\n      shadowofmich\n    \n    \n      436\n      2020-04-30 18:34:01+00:00\n      True\n      Protoss\n      Terran\n      3964\n      -91\n      &lt;BRs&gt;<sp/>GoodFellas\n    \n  \n\n437 rows \u00d7 7 columns\n\n\n\n\n\n\n\n\n\n\n\nMMR vs Elo\u00b6\n\n\n\n\n\n\nWe're going to need to figure out a way to connect MMR to winning probabilities. Each game won awards a certain amount of MMR which depends on the difference between the two players' pre-match MMR. If you win against a player you weren't expected to beat, the system awards you more MMR - and the other player loses the exact large amount.\nInterestingly, according to some wonderful sleuthing by u/MisterL2 on r/starcraft, MMR is basically the classic chess Elo rating, except for a simple scaling - 100 Elo is basically 220 MMR. With the Elo estimated win percentage formula depending on the difference in Elo ($\\Delta_{Elo}$) as\n$$ P(\\text{win}) = \\left(1 + 10{-\\Delta_{Elo}/400}\\right){-1} $$We can adjust to MMR as\n$$ P(\\text{win}) = \\left(1 + 10{-\\Delta_{MMR}/880}\\right){-1} $$As a quick check, let's compare with the sample data provided:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndef MMR_winrate(diff):\n    return 1 / (1 + 10**(-diff/880))\n\ndiffs = np.arange(0, 600, 100)\ndiffs = np.concatenate([-diffs[:0:-1], diffs])\nwinrates = np.array([0.5, 0.564, 0.626, 0.686, 0.742, 0.793])\nwinrates = np.concatenate([1-winrates[:0:-1], winrates])\nplt.scatter(diffs, winrates, label = \"Data from u/MisterL2\")\ndiffs_plot = np.linspace(diffs.min(), diffs.max())\napprox = MMR_winrate(diffs_plot)\nplt.plot(diffs_plot, approx, label = \"Our approximate formula\")\nplt.legend()\nplt.setp(plt.gca(), xlabel=r\"$\\Delta_{MMR}$\", ylabel = \"Win %\", ylim=(0,1));\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSplendid.\nDigging into the data\u00b6We'll need the MMR differences, and we'll use those to calculate the expected winrates:\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf = df.sort_values('time_played_at')\ndf['enemy_mmr'] = df['mmr'] - df['mmr_diff']\ndf['expected_winrate'] = MMR_winrate(df.mmr_diff)\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickame\n      enemy_mmr\n      expected_winrate\n    \n  \n  \n    \n      155\n      2019-09-11 15:22:43+00:00\n      True\n      Protoss\n      Terran\n      -36400\n      -39206\n      winstrol\n      2806\n      2.803672e-45\n    \n    \n      396\n      2019-09-11 15:35:39+00:00\n      True\n      Zerg\n      Zerg\n      -36400\n      -38905\n      OtecAnisim\n      2505\n      6.162724e-45\n    \n    \n      321\n      2019-09-12 10:42:41+00:00\n      True\n      Protoss\n      Terran\n      -36400\n      -38579\n      ujptm\n      2179\n      1.446196e-44\n    \n    \n      373\n      2019-09-12 10:53:37+00:00\n      True\n      Protoss\n      Terran\n      -36400\n      -38935\n      &lt;klko&gt;<sp/>marauder\n      2535\n      5.697467e-45\n    \n    \n      408\n      2019-09-12 16:28:28+00:00\n      True\n      Protoss\n      Terran\n      -36400\n      -39229\n      Toidak\n      2829\n      2.639921e-45\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      145\n      2020-06-04 19:18:46+00:00\n      True\n      Protoss\n      Zerg\n      4181\n      -189\n      &lt;AiR\u01c2&gt;<sp/>SuperNova\n      4370\n      3.788264e-01\n    \n    \n      255\n      2020-06-09 16:57:17+00:00\n      True\n      Protoss\n      Protoss\n      0\n      0\n      A.I. 1 (Elite)\n      0\n      5.000000e-01\n    \n    \n      79\n      2020-06-09 17:03:47+00:00\n      False\n      Protoss\n      Protoss\n      4208\n      14\n      Ziiim\n      4194\n      5.091570e-01\n    \n    \n      1\n      2020-06-09 17:11:15+00:00\n      False\n      Protoss\n      Zerg\n      4186\n      39\n      djakette\n      4147\n      5.254895e-01\n    \n    \n      207\n      2020-06-09 17:24:17+00:00\n      False\n      Protoss\n      Terran\n      4164\n      -68\n      StaMinA\n      4232\n      4.556352e-01\n    \n  \n\n437 rows \u00d7 9 columns\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nimport altair\n\naltair.Chart(df).mark_circle().encode(\n    altair.X('time_played_at'),\n    altair.Y('mmr',\n             scale=altair.Scale(zero=False)),\n    color='enemy_race',\n).interactive()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-daf4dd381e1d405aa215f9351340d643\") {\n      outputDiv = document.getElementById(\"altair-viz-daf4dd381e1d405aa215f9351340d643\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-8a274c0b4424e61b1f0b334c69764226\"}, \"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"x\": {\"type\": \"temporal\", \"field\": \"time_played_at\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"mmr\", \"scale\": {\"zero\": false}}}, \"selection\": {\"selector001\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-8a274c0b4424e61b1f0b334c69764226\": [{\"time_played_at\": \"2019-09-11T15:22:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39206, \"enemy_nickame\": \"winstrol\", \"enemy_mmr\": 2806, \"expected_winrate\": 2.803672441094673e-45}, {\"time_played_at\": \"2019-09-11T15:35:39+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": -38905, \"enemy_nickame\": \"OtecAnisim\", \"enemy_mmr\": 2505, \"expected_winrate\": 6.162724129903119e-45}, {\"time_played_at\": \"2019-09-12T10:42:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -38579, \"enemy_nickame\": \"ujptm\", \"enemy_mmr\": 2179, \"expected_winrate\": 1.4461963887190294e-44}, {\"time_played_at\": \"2019-09-12T10:53:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -38935, \"enemy_nickame\": \"&lt;klko&gt;<sp/>marauder\", \"enemy_mmr\": 2535, \"expected_winrate\": 5.697466997066993e-45}, {\"time_played_at\": \"2019-09-12T16:28:28+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39229, \"enemy_nickame\": \"Toidak\", \"enemy_mmr\": 2829, \"expected_winrate\": 2.6399208683906336e-45}, {\"time_played_at\": \"2019-09-13T20:52:33+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39378, \"enemy_nickame\": \"oldmannap\", \"enemy_mmr\": 2978, \"expected_winrate\": 1.7876098016342542e-45}, {\"time_played_at\": \"2019-09-14T07:10:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39703, \"enemy_nickame\": \"Gulgorf\", \"enemy_mmr\": 3303, \"expected_winrate\": 7.637558424480755e-46}, {\"time_played_at\": \"2019-09-17T19:00:36+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": -36400, \"mmr_diff\": -38954, \"enemy_nickame\": \"Aertemis\", \"enemy_mmr\": 2554, \"expected_winrate\": 5.4211435711066484e-45}, {\"time_played_at\": \"2019-09-23T16:05:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": -39735, \"enemy_nickame\": \"leChrist\", \"enemy_mmr\": 3335, \"expected_winrate\": 7.024103610412749e-46}, {\"time_played_at\": \"2019-09-24T16:17:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": -41081, \"enemy_nickame\": \"&lt;FxL&gt;<sp/>VokinLoksar\", \"enemy_mmr\": 4681, \"expected_winrate\": 2.075130695407903e-47}, {\"time_played_at\": \"2019-09-24T16:26:09+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -38939, \"enemy_nickame\": \"Ayals\", \"enemy_mmr\": 2539, \"expected_winrate\": 5.638146595673047e-45}, {\"time_played_at\": \"2019-09-25T16:36:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39915, \"enemy_nickame\": \"HeadAge\", \"enemy_mmr\": 3515, \"expected_winrate\": 4.38576598097316e-46}, {\"time_played_at\": \"2019-09-25T16:49:17+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": -36400, \"mmr_diff\": 0, \"enemy_nickame\": \"grishaadf\", \"enemy_mmr\": -36400, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-09-26T10:06:38+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": -39401, \"enemy_nickame\": \"&lt;SAZZ&gt;<sp/>LINUSWES\", \"enemy_mmr\": 3001, \"expected_winrate\": 1.6832024849633835e-45}, {\"time_played_at\": \"2019-09-26T17:21:45+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": -36400, \"mmr_diff\": -39738, \"enemy_nickame\": \"&lt;oooboy&gt;<sp/>Ojtech\", \"enemy_mmr\": 3338, \"expected_winrate\": 6.969182191364358e-46}, {\"time_played_at\": \"2019-10-04T11:08:46+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": -36400, \"mmr_diff\": -39812, \"enemy_nickame\": \"NikkooO\", \"enemy_mmr\": 3412, \"expected_winrate\": 5.742366522415609e-46}, {\"time_played_at\": \"2019-10-05T09:12:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": -40074, \"enemy_nickame\": \"&lt;TLBK&gt;<sp/>Nightly\", \"enemy_mmr\": 3674, \"expected_winrate\": 2.8931012728183836e-46}, {\"time_played_at\": \"2019-10-06T12:23:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3751, \"mmr_diff\": 25, \"enemy_nickame\": \"MJM\", \"enemy_mmr\": 3726, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickame\": \"vasea\", \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:28:16+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 2800, \"mmr_diff\": 49, \"enemy_nickame\": \"FullmetalRak\", \"enemy_mmr\": 2751, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickame\": \"Wavelength\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-09T19:03:59+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 2960, \"mmr_diff\": -21, \"enemy_nickame\": \"KerMiTe\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.48626644195181074}, {\"time_played_at\": \"2019-10-09T19:06:50+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3125, \"mmr_diff\": -11, \"enemy_nickame\": \"Justify\", \"enemy_mmr\": 3136, \"expected_winrate\": 0.49280491829094863}, {\"time_played_at\": \"2019-10-09T19:24:28+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 2855, \"mmr_diff\": 55, \"enemy_nickame\": \"Decadance\", \"enemy_mmr\": 2800, \"expected_winrate\": 0.5359159269451023}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickame\": \"PereiRa\", \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickame\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickame\": \"Pippuri\", \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-11T09:19:52+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 2952, \"mmr_diff\": 39352, \"enemy_nickame\": \"indy\", \"enemy_mmr\": -36400, \"expected_winrate\": 1.0}, {\"time_played_at\": \"2019-10-12T14:14:32+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3053, \"mmr_diff\": -7, \"enemy_nickame\": \"&lt;LSDW&gt;<sp/>kaboum\", \"enemy_mmr\": 3060, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2019-10-12T14:27:06+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 2866, \"mmr_diff\": -21, \"enemy_nickame\": \"PycckuuXAKEP\", \"enemy_mmr\": 2887, \"expected_winrate\": 0.48626644195181074}, {\"time_played_at\": \"2019-10-14T19:10:22+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 2956, \"mmr_diff\": 0, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 2956, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickame\": \"Supermaru\", \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-14T19:45:44+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3039, \"mmr_diff\": -35, \"enemy_nickame\": \"RoBoT\", \"enemy_mmr\": 3074, \"expected_winrate\": 0.4771209659055845}, {\"time_played_at\": \"2019-10-20T16:35:03+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3119, \"mmr_diff\": 40, \"enemy_nickame\": \"greg\", \"enemy_mmr\": 3079, \"expected_winrate\": 0.5261418801396169}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickame\": \"&lt;IDLK&gt;<sp/>jasben\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-21T11:46:27+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3185, \"mmr_diff\": 63, \"enemy_nickame\": \"AcahCruv\", \"enemy_mmr\": 3122, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickame\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickame\": \"NiGHTKiNG\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickame\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickame\": \"Zergorix\", \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:14:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": 40281, \"enemy_nickame\": \"teror\", \"enemy_mmr\": -36400, \"expected_winrate\": 1.0}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickame\": \"Tomaso\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:14:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3871, \"mmr_diff\": 890, \"enemy_nickame\": \"YellowCoke\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.9112303439884303}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickame\": \"beh\", \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:18:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3767, \"mmr_diff\": 27, \"enemy_nickame\": \"Hannibal\", \"enemy_mmr\": 3740, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T06:51:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": 40281, \"enemy_nickame\": \"&lt;WPGG&gt;<sp/>Destructor\", \"enemy_mmr\": -36400, \"expected_winrate\": 1.0}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickame\": \"Tyson\", \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:19:19+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3109, \"mmr_diff\": 0, \"enemy_nickame\": \"minbear\", \"enemy_mmr\": 3109, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-10-31T18:26:16+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3042, \"mmr_diff\": -36, \"enemy_nickame\": \"Rwzzz\", \"enemy_mmr\": 3078, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-10-31T18:41:02+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 2982, \"mmr_diff\": -5, \"enemy_nickame\": \"Anarazel\", \"enemy_mmr\": 2987, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickame\": \"Granaatappel\", \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Sven\", \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickame\": \"&lt;NerCC&gt;<sp/>speck\", \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickame\": \"Ghalib\", \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T10:57:15+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3043, \"mmr_diff\": 126, \"enemy_nickame\": \"Varrag\", \"enemy_mmr\": 2917, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-11-01T11:09:16+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3092, \"mmr_diff\": 47, \"enemy_nickame\": \"dabo\", \"enemy_mmr\": 3045, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-11-01T11:30:59+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3144, \"mmr_diff\": 16, \"enemy_nickame\": \"AUzg\", \"enemy_mmr\": 3128, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-01T11:53:00+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3196, \"mmr_diff\": 6, \"enemy_nickame\": \"Wormzor\", \"enemy_mmr\": 3190, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-11-01T13:31:50+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3145, \"mmr_diff\": -8, \"enemy_nickame\": \"qwe\", \"enemy_mmr\": 3153, \"expected_winrate\": 0.4947670431385224}, {\"time_played_at\": \"2019-11-01T13:38:34+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3096, \"mmr_diff\": -60, \"enemy_nickame\": \"Gladiator\", \"enemy_mmr\": 3156, \"expected_winrate\": 0.4608318064655481}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-01T14:22:03+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3052, \"mmr_diff\": -104, \"enemy_nickame\": \"&lt;Z\\u0415RGML&gt;<sp/>\\u0424\\u0435\\u0434\\u044f\", \"enemy_mmr\": 3156, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2019-11-01T14:28:00+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3104, \"mmr_diff\": -36, \"enemy_nickame\": \"&lt;THUT&gt;<sp/>Vladosik\", \"enemy_mmr\": 3140, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickame\": \"KKroer\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:46:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": 85, \"enemy_nickame\": \"&lt;A\\u01c2move&gt;<sp/>AmoveZerg\", \"enemy_mmr\": 3606, \"expected_winrate\": 0.5553741249668821}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickame\": \"Hazard\", \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickame\": \"Pleydellia\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T18:05:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Very Easy)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Noose\", \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickame\": \"&lt;FreeHK&gt;<sp/>jellun\", \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickame\": \"North\", \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickame\": \"Fleetz\", \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickame\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickame\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickame\": \"smthFISHYcmg\", \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickame\": \"ProtoZZavr\", \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-07T18:09:53+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3062, \"mmr_diff\": -6, \"enemy_nickame\": \"FABBZH\", \"enemy_mmr\": 3068, \"expected_winrate\": 0.4960752196582488}, {\"time_played_at\": \"2019-11-07T18:24:02+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3019, \"mmr_diff\": 129, \"enemy_nickame\": \"Icec\\u00f6ld\", \"enemy_mmr\": 2890, \"expected_winrate\": 0.5835923602312532}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickame\": \"Zend\", \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;UATeam&gt;<sp/>click\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickame\": \"midhigh\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:52:24+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3054, \"mmr_diff\": -8, \"enemy_nickame\": \"Unity\", \"enemy_mmr\": 3062, \"expected_winrate\": 0.4947670431385224}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickame\": \"TrashCanMan\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickame\": \"MightyMurloc\", \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:35:35+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3014, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;DayJ&gt;<sp/>Fuzzy\", \"enemy_mmr\": 3023, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickame\": \"\\u0432\\u043b\\u0430\\u0434\", \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickame\": \"OlympusRoyal\", \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickame\": \"InsighT\", \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickame\": \"Raver\", \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickame\": \"Cosmobrother\", \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T18:45:19+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3054, \"mmr_diff\": 14, \"enemy_nickame\": \"MooseMan\", \"enemy_mmr\": 3040, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickame\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickame\": \"Pudgey\", \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickame\": \"&lt;TDDA&gt;<sp/>EMM\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickame\": \"YvanDuR\\u00eave\", \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickame\": \"&lt;CocoCo&gt;<sp/>Goty\", \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:23:07+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3015, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;b0O0n&gt;<sp/>DrLove\", \"enemy_mmr\": 2968, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickame\": \"&lt;kOzY&gt;<sp/>Dave\", \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickame\": \"Crombo\", \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickame\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickame\": \"Doomweed\", \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickame\": \"SkyFlare\", \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickame\": \"Chief\", \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickame\": \"Romio\", \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickame\": \"&lt;vGL&gt;<sp/>Celestial\", \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickame\": \"Inquisition\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickame\": \"&lt;ERHELM&gt;<sp/>Erik\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-11-29T18:36:51+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3050, \"mmr_diff\": -33, \"enemy_nickame\": \"Kesko\", \"enemy_mmr\": 3083, \"expected_winrate\": 0.47842666694885455}, {\"time_played_at\": \"2019-11-29T18:46:06+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3015, \"mmr_diff\": 107, \"enemy_nickame\": \"OVERMIND\", \"enemy_mmr\": 2908, \"expected_winrate\": 0.5695397061906963}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickame\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickame\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickame\": \"kalarazar\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickame\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickame\": \"AlexMacedon\", \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickame\": \"Niinja\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickame\": \"Delaam\", \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickame\": \"PeterLax\", \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickame\": \"Heradrass\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickame\": \"NS\\u0192Faxo\", \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickame\": \"Legionaru\", \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickame\": \"Ciprian\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickame\": \"Fraze\", \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickame\": \"NazelHut\", \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickame\": \"cloud\", \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickame\": \"Xaenor\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickame\": \"Vidra\", \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickame\": \"Noobofsc\", \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickame\": \"&lt;Div303&gt;<sp/>Dupsko\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>HaPe\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickame\": \"FrozenZerg\", \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickame\": \"utopike\", \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickame\": \"Nyx\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:53:00+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 2984, \"mmr_diff\": -106, \"enemy_nickame\": \"Jason\", \"enemy_mmr\": 3090, \"expected_winrate\": 0.4311019005277924}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickame\": \"CapSto\", \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickame\": \"&lt;TAW&gt;<sp/>Pote\", \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickame\": \"Neydark\", \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickame\": \"Albus\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickame\": \"RXX\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickame\": \"xYn\", \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickame\": \"Stefan\", \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:32:08+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3023, \"mmr_diff\": -3, \"enemy_nickame\": \"Undead\", \"enemy_mmr\": 3026, \"expected_winrate\": 0.4980375795997298}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickame\": \"Xenocide\", \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickame\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickame\": \"Bingo\", \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickame\": \"Jungla\", \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickame\": \"Nyxeu\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickame\": \"IntrinsiCat\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickame\": \"\\u00e6\\u00e6\\u00e6\", \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickame\": \"Listig\", \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickame\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickame\": \"ARCMAN\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T13:53:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickame\": \"PPO\", \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-24T20:35:20+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3057, \"mmr_diff\": 22, \"enemy_nickame\": \"IAMFUNNYBOT\", \"enemy_mmr\": 3035, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickame\": \"HiveMind\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickame\": \"Racin\", \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T14:03:26+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Terran\", \"mmr\": 3089, \"mmr_diff\": 51, \"enemy_nickame\": \"SMCWWMarF\", \"enemy_mmr\": 3038, \"expected_winrate\": 0.5333118989135048}, {\"time_played_at\": \"2019-12-28T14:07:58+00:00\", \"win\": false, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3118, \"mmr_diff\": 4, \"enemy_nickame\": \"Sferum\", \"enemy_mmr\": 3114, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickame\": \"rOoSter\", \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}, {\"time_played_at\": \"2020-01-04T19:04:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": -29, \"enemy_nickame\": \"R\\u00eago\", \"enemy_mmr\": 4038, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-01-04T19:07:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4031, \"mmr_diff\": -132, \"enemy_nickame\": \"&lt;un\\u018aea\\u018a&gt;<sp/>\\u00f2M\\u00e9g\\u00e0\", \"enemy_mmr\": 4163, \"expected_winrate\": 0.4145013213281905}, {\"time_played_at\": \"2020-01-04T19:19:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4057, \"mmr_diff\": -32, \"enemy_nickame\": \"Tsumi\", \"enemy_mmr\": 4089, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-05T14:03:19+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4036, \"mmr_diff\": -160, \"enemy_nickame\": \"&lt;Lowko&gt;<sp/>HardNeper\", \"enemy_mmr\": 4196, \"expected_winrate\": 0.3968393991220355}, {\"time_played_at\": \"2020-01-05T14:18:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": 14, \"enemy_nickame\": \"delmak\", \"enemy_mmr\": 4005, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-01-05T14:40:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -3, \"enemy_nickame\": \"&lt;P\\u00c2R\\u0142AH&gt;<sp/>SolusRex\", \"enemy_mmr\": 4043, \"expected_winrate\": 0.4980375795997298}, {\"time_played_at\": \"2020-01-05T14:47:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": -17, \"enemy_nickame\": \"Sanedude\", \"enemy_mmr\": 4036, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2020-01-05T14:55:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"Sanedude\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-01-05T15:02:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4041, \"mmr_diff\": -37, \"enemy_nickame\": \"Tomstar\", \"enemy_mmr\": 4078, \"expected_winrate\": 0.47581557748569775}, {\"time_played_at\": \"2020-01-05T15:09:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4021, \"mmr_diff\": 93, \"enemy_nickame\": \"Majcher\", \"enemy_mmr\": 3928, \"expected_winrate\": 0.5605369146027809}, {\"time_played_at\": \"2020-01-05T20:23:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4039, \"mmr_diff\": 103, \"enemy_nickame\": \"&lt;ORRO&gt;<sp/>jul\", \"enemy_mmr\": 3936, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2020-01-05T20:30:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4015, \"mmr_diff\": 27, \"enemy_nickame\": \"oppresticles\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2020-01-05T20:34:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3992, \"mmr_diff\": -22, \"enemy_nickame\": \"&lt;iksD&gt;<sp/>OzjaszGoldbe\", \"enemy_mmr\": 4014, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-01-05T20:39:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -56, \"enemy_nickame\": \"lIlIlIIlIlIl\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2020-01-06T18:55:58+00:00\", \"win\": false, \"race\": \"Terran\", \"enemy_race\": \"Protoss\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;Blacer&gt;<sp/>Hakerica\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-01-13T20:21:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3995, \"mmr_diff\": 80, \"enemy_nickame\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"enemy_mmr\": 3915, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-13T20:26:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4014, \"mmr_diff\": 118, \"enemy_nickame\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"enemy_mmr\": 3896, \"expected_winrate\": 0.5765815195249419}, {\"time_played_at\": \"2020-01-13T20:42:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3989, \"mmr_diff\": -28, \"enemy_nickame\": \"MadProbe\", \"enemy_mmr\": 4017, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-01-13T20:56:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3968, \"mmr_diff\": -32, \"enemy_nickame\": \"SUPERsKILLER\", \"enemy_mmr\": 4000, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-14T17:17:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3948, \"mmr_diff\": 12, \"enemy_nickame\": \"TerenceSkill\", \"enemy_mmr\": 3936, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-01-15T16:01:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3969, \"mmr_diff\": -68, \"enemy_nickame\": \"&lt;aW&gt;<sp/>Jeatall\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.45563522259336753}, {\"time_played_at\": \"2020-01-16T20:58:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3931, \"mmr_diff\": 86, \"enemy_nickame\": \"Exit\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2020-01-18T19:38:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": -30, \"enemy_nickame\": \"&lt;SWWT&gt;<sp/>Epic\", \"enemy_mmr\": 3980, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-01-19T18:04:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3969, \"mmr_diff\": 80, \"enemy_nickame\": \"StifleR\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-19T18:19:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3989, \"mmr_diff\": 10, \"enemy_nickame\": \"&lt;Dytred&gt;<sp/>EmpiRE\", \"enemy_mmr\": 3979, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2020-01-19T18:32:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4010, \"mmr_diff\": 13, \"enemy_nickame\": \"MuKK\", \"enemy_mmr\": 3997, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2020-01-31T12:42:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4031, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;adR&gt;<sp/>rdmZoo\", \"enemy_mmr\": 4075, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2020-01-31T12:54:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4011, \"mmr_diff\": -104, \"enemy_nickame\": \"Stick\", \"enemy_mmr\": 4115, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-01-31T13:10:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3992, \"mmr_diff\": 64, \"enemy_nickame\": \"&lt;GELSEN&gt;<sp/>Masaru\", \"enemy_mmr\": 3928, \"expected_winrate\": 0.5417676213094246}, {\"time_played_at\": \"2020-02-02T17:15:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4012, \"mmr_diff\": -80, \"enemy_nickame\": \"&lt;0mg&gt;<sp/>Sroljo\", \"enemy_mmr\": 4092, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-02-02T17:26:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3992, \"mmr_diff\": -14, \"enemy_nickame\": \"djakette\", \"enemy_mmr\": 4006, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-02-02T17:27:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3971, \"mmr_diff\": 58, \"enemy_nickame\": \"Syocto\", \"enemy_mmr\": 3913, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2020-02-02T17:40:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3991, \"mmr_diff\": -4, \"enemy_nickame\": \"VouS\", \"enemy_mmr\": 3995, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2020-02-02T17:48:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3970, \"mmr_diff\": -64, \"enemy_nickame\": \"valera\", \"enemy_mmr\": 4034, \"expected_winrate\": 0.4582323786905754}, {\"time_played_at\": \"2020-02-02T18:09:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3993, \"mmr_diff\": 104, \"enemy_nickame\": \"Jetix\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-02-05T21:02:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3989, \"mmr_diff\": 89, \"enemy_nickame\": \"MorroLord\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2020-02-05T21:05:33+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": -46, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4011, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-02-06T20:48:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3988, \"mmr_diff\": 26, \"enemy_nickame\": \"MsDragonFly\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-02-06T21:02:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": 54, \"enemy_nickame\": \"KJP\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.535265097920903}, {\"time_played_at\": \"2020-02-09T20:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": -25, \"enemy_nickame\": \"Grandclicker\", \"enemy_mmr\": 4054, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-02-09T20:19:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4004, \"mmr_diff\": 45, \"enemy_nickame\": \"BlackSmith\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-02-10T19:08:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3981, \"mmr_diff\": 102, \"enemy_nickame\": \"Kachu\", \"enemy_mmr\": 3879, \"expected_winrate\": 0.566329379590959}, {\"time_played_at\": \"2020-02-10T19:20:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3999, \"mmr_diff\": -73, \"enemy_nickame\": \"Pablink\", \"enemy_mmr\": 4072, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-02-10T19:37:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4023, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;biglol&gt;<sp/>bany\", \"enemy_mmr\": 4032, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-02-11T17:52:08+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 59, \"enemy_nickame\": \"ZZtopGun\", \"enemy_mmr\": 3986, \"expected_winrate\": 0.5385179979869474}, {\"time_played_at\": \"2020-02-11T18:03:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4064, \"mmr_diff\": 98, \"enemy_nickame\": \"ZZtopGun\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-02-13T18:20:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4083, \"mmr_diff\": 81, \"enemy_nickame\": \"Salomoon\", \"enemy_mmr\": 4002, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-02-13T18:34:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4102, \"mmr_diff\": -136, \"enemy_nickame\": \"&lt;BnetFR&gt;<sp/>NeWHoriZonS\", \"enemy_mmr\": 4238, \"expected_winrate\": 0.411963550335502}, {\"time_played_at\": \"2020-02-13T19:26:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4085, \"mmr_diff\": 90, \"enemy_nickame\": \"HeroMarauder\", \"enemy_mmr\": 3995, \"expected_winrate\": 0.5586023417718881}, {\"time_played_at\": \"2020-02-13T19:45:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4104, \"mmr_diff\": -121, \"enemy_nickame\": \"\\u041e\\u0422\\u041c\\u041e\\u0420\\u041e\\u0417\\u041e\\u041a\", \"enemy_mmr\": 4225, \"expected_winrate\": 0.42150324765525726}, {\"time_played_at\": \"2020-02-14T12:24:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4123, \"mmr_diff\": 25, \"enemy_nickame\": \"Haze\", \"enemy_mmr\": 4098, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2020-02-14T12:29:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4101, \"mmr_diff\": -350, \"enemy_nickame\": \"StormHead\", \"enemy_mmr\": 4451, \"expected_winrate\": 0.2858142640872888}, {\"time_played_at\": \"2020-02-15T12:57:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": -52, \"enemy_nickame\": \"&lt;FxL&gt;<sp/>bojan\", \"enemy_mmr\": 4135, \"expected_winrate\": 0.4660369182913983}, {\"time_played_at\": \"2020-02-15T13:41:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4063, \"mmr_diff\": 21, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 4042, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-02-17T16:31:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": 33, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"enemy_mmr\": 4008, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2020-02-17T16:49:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4018, \"mmr_diff\": 7, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"enemy_mmr\": 4011, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-02-17T17:15:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3997, \"mmr_diff\": -155, \"enemy_nickame\": \"Stilgar\", \"enemy_mmr\": 4152, \"expected_winrate\": 0.39997507454646586}, {\"time_played_at\": \"2020-02-17T17:31:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;BnetFR&gt;<sp/>NeWHoriZonS\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-02-17T17:47:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;BnetFR&gt;<sp/>NeWHoriZonS\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-02-18T18:41:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4019, \"mmr_diff\": -89, \"enemy_nickame\": \"Canfup\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-18T18:56:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -95, \"enemy_nickame\": \"Hello\", \"enemy_mmr\": 4095, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-02-18T19:11:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4024, \"mmr_diff\": -47, \"enemy_nickame\": \"Hello\", \"enemy_mmr\": 4071, \"expected_winrate\": 0.46929394553496245}, {\"time_played_at\": \"2020-02-18T19:24:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4047, \"mmr_diff\": -290, \"enemy_nickame\": \"ajb\", \"enemy_mmr\": 4337, \"expected_winrate\": 0.3189054546669155}, {\"time_played_at\": \"2020-02-20T20:24:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4067, \"mmr_diff\": 219, \"enemy_nickame\": \"Badcomedian\", \"enemy_mmr\": 3848, \"expected_winrate\": 0.6394619681316271}, {\"time_played_at\": \"2020-02-21T16:46:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4048, \"mmr_diff\": -63, \"enemy_nickame\": \"razor\", \"enemy_mmr\": 4111, \"expected_winrate\": 0.4588820281084352}, {\"time_played_at\": \"2020-02-21T17:06:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;0301&gt;<sp/>kookooseen\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2020-02-21T17:20:16+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4050, \"mmr_diff\": -94, \"enemy_nickame\": \"Scythe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.4388186333591383}, {\"time_played_at\": \"2020-02-21T19:32:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4071, \"mmr_diff\": 50, \"enemy_nickame\": \"Sentinel\", \"enemy_mmr\": 4021, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2020-02-26T18:13:51+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4091, \"mmr_diff\": -45, \"enemy_nickame\": \"BlackAnubis\", \"enemy_mmr\": 4136, \"expected_winrate\": 0.47059750487758445}, {\"time_played_at\": \"2020-02-26T18:27:28+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4114, \"mmr_diff\": -99, \"enemy_nickame\": \"&lt;BornG&gt;<sp/>LucidityDark\", \"enemy_mmr\": 4213, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-02-27T21:17:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4139, \"mmr_diff\": -262, \"enemy_nickame\": \"&lt;PlAr&gt;<sp/>Arcanewinds\", \"enemy_mmr\": 4401, \"expected_winrate\": 0.33502542553804826}, {\"time_played_at\": \"2020-02-28T07:06:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4117, \"mmr_diff\": -327, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 4444, \"expected_winrate\": 0.2982553300458027}, {\"time_played_at\": \"2020-02-29T15:07:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4100, \"mmr_diff\": -367, \"enemy_nickame\": \"&lt;HBeS&gt;<sp/>LoziRa\", \"enemy_mmr\": 4467, \"expected_winrate\": 0.27682160785890525}, {\"time_played_at\": \"2020-02-29T15:22:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": 23, \"enemy_nickame\": \"StepO\", \"enemy_mmr\": 4060, \"expected_winrate\": 0.5150407610740062}, {\"time_played_at\": \"2020-02-29T15:40:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4104, \"mmr_diff\": -89, \"enemy_nickame\": \"Othello\", \"enemy_mmr\": 4193, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-29T15:49:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4085, \"mmr_diff\": -90, \"enemy_nickame\": \"&lt;Irri&gt;<sp/>Irrichi\", \"enemy_mmr\": 4175, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2020-03-01T20:09:47+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4066, \"mmr_diff\": 67, \"enemy_nickame\": \"FckVwls\", \"enemy_mmr\": 3999, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2020-03-02T09:38:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4086, \"mmr_diff\": 82, \"enemy_nickame\": \"Piliskner\", \"enemy_mmr\": 4004, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2020-03-02T09:52:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4105, \"mmr_diff\": -180, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 4285, \"expected_winrate\": 0.3843835326815888}, {\"time_played_at\": \"2020-03-02T10:06:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4088, \"mmr_diff\": 69, \"enemy_nickame\": \"TGNP\", \"enemy_mmr\": 4019, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-03-02T13:26:04+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4106, \"mmr_diff\": -84, \"enemy_nickame\": \"WizZy\", \"enemy_mmr\": 4190, \"expected_winrate\": 0.4452720886026404}, {\"time_played_at\": \"2020-03-02T13:45:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4130, \"mmr_diff\": -36, \"enemy_nickame\": \"WizZy\", \"enemy_mmr\": 4166, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2020-03-04T17:23:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4153, \"mmr_diff\": -30, \"enemy_nickame\": \"MothMonkey\", \"enemy_mmr\": 4183, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-03-04T17:39:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4132, \"mmr_diff\": 56, \"enemy_nickame\": \"Leaf\", \"enemy_mmr\": 4076, \"expected_winrate\": 0.5365666336553646}, {\"time_played_at\": \"2020-03-04T17:52:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -133, \"enemy_nickame\": \"helloRJ\", \"enemy_mmr\": 4242, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-03-05T21:18:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4091, \"mmr_diff\": 74, \"enemy_nickame\": \"Cyborg\", \"enemy_mmr\": 4017, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2020-03-09T10:57:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4068, \"mmr_diff\": 40468, \"enemy_nickame\": \"\\u043c\\u044f\\u0441\\u043d\\u0438\\u043a\", \"enemy_mmr\": -36400, \"expected_winrate\": 1.0}, {\"time_played_at\": \"2020-03-09T11:03:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4050, \"mmr_diff\": -178, \"enemy_nickame\": \"Noldo\", \"enemy_mmr\": 4228, \"expected_winrate\": 0.3856226141648234}, {\"time_played_at\": \"2020-03-09T11:22:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4033, \"mmr_diff\": 32, \"enemy_nickame\": \"Vorp\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-03-10T19:22:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4053, \"mmr_diff\": -46, \"enemy_nickame\": \"&lt;FaDr&gt;<sp/>BURNIE\", \"enemy_mmr\": 4099, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-03-10T19:40:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -18, \"enemy_nickame\": \"Drakezul\", \"enemy_mmr\": 4050, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-11T20:53:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 81, \"enemy_nickame\": \"StaryPijany\", \"enemy_mmr\": 3973, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-03-12T18:55:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4030, \"mmr_diff\": -7, \"enemy_nickame\": \"ORIGYN\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-03-12T19:06:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4009, \"mmr_diff\": 104, \"enemy_nickame\": \"Salomoon\", \"enemy_mmr\": 3905, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-03-13T07:52:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3984, \"mmr_diff\": -256, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>KINE\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3385320109141423}, {\"time_played_at\": \"2020-03-14T15:13:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3970, \"mmr_diff\": -95, \"enemy_nickame\": \"adrianjakuba\", \"enemy_mmr\": 4065, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-03-14T15:18:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3993, \"mmr_diff\": 18, \"enemy_nickame\": \"ODISEO\", \"enemy_mmr\": 3975, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-03-14T15:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4014, \"mmr_diff\": 95, \"enemy_nickame\": \"&lt;SCTR&gt;<sp/>LimeTime\", \"enemy_mmr\": 3919, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-03-14T16:18:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4033, \"mmr_diff\": -58, \"enemy_nickame\": \"&lt;PLA2N&gt;<sp/>ZloyVakarian\", \"enemy_mmr\": 4091, \"expected_winrate\": 0.4621323286338574}, {\"time_played_at\": \"2020-03-14T16:31:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4013, \"mmr_diff\": -80, \"enemy_nickame\": \"hellyeah\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-03-14T16:58:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-03-14T20:10:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3994, \"mmr_diff\": -51, \"enemy_nickame\": \"&lt;GROF&gt;<sp/>Shefarin\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2020-03-14T20:23:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4017, \"mmr_diff\": -28, \"enemy_nickame\": \"Ben\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-03-18T12:33:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -61, \"enemy_nickame\": \"ManeWicht\", \"enemy_mmr\": 4101, \"expected_winrate\": 0.4601817441768105}, {\"time_played_at\": \"2020-03-18T12:41:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4020, \"mmr_diff\": 45, \"enemy_nickame\": \"Apollo\", \"enemy_mmr\": 3975, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-03-18T12:57:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -149, \"enemy_nickame\": \"&lt;noIMBA&gt;<sp/>Facehugger\", \"enemy_mmr\": 4189, \"expected_winrate\": 0.40374871115781824}, {\"time_played_at\": \"2020-03-22T11:58:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4066, \"mmr_diff\": 19, \"enemy_nickame\": \"&lt;Hasu&gt;<sp/>RunGen\", \"enemy_mmr\": 4047, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2020-03-22T12:03:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4044, \"mmr_diff\": 41, \"enemy_nickame\": \"OOOOOOOOOOOO\", \"enemy_mmr\": 4003, \"expected_winrate\": 0.5267941904791901}, {\"time_played_at\": \"2020-03-24T16:59:08+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Protoss\", \"mmr\": 3086, \"mmr_diff\": 8, \"enemy_nickame\": \"Steelseer\", \"enemy_mmr\": 3078, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2020-03-29T20:40:34+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;SCBoys&gt;<sp/>CiRkuS\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-30T15:48:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 4, \"enemy_nickame\": \"Bee\", \"enemy_mmr\": 3997, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-03-31T12:27:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3979, \"mmr_diff\": -31, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Rud\", \"enemy_mmr\": 4010, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-01T06:54:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -23, \"enemy_nickame\": \"&lt;TRSO&gt;<sp/>THERIPPER\", \"enemy_mmr\": 4023, \"expected_winrate\": 0.4849592389259938}, {\"time_played_at\": \"2020-04-14T08:05:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Very Easy)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-15T14:28:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 18, \"enemy_nickame\": \"MrBeck\", \"enemy_mmr\": 4004, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-15T14:50:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4043, \"mmr_diff\": 104, \"enemy_nickame\": \"Anrik\", \"enemy_mmr\": 3939, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-04-15T15:03:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4018, \"mmr_diff\": -135, \"enemy_nickame\": \"Tomus\", \"enemy_mmr\": 4153, \"expected_winrate\": 0.41259755997469955}, {\"time_played_at\": \"2020-04-15T19:20:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;TGCrew&gt;<sp/>Paloma\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-15T19:29:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;TGCrew&gt;<sp/>Paloma\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-15T19:41:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;TGCrew&gt;<sp/>Paloma\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-17T19:15:54+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4001, \"mmr_diff\": 39, \"enemy_nickame\": \"Vanquish\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-17T19:31:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4021, \"mmr_diff\": -9, \"enemy_nickame\": \"Boban\", \"enemy_mmr\": 4030, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-17T20:10:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": 12, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4050, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-04-17T20:20:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -40, \"enemy_nickame\": \"&lt;Peeps&gt;<sp/>ReNoVation\", \"enemy_mmr\": 4080, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2020-04-17T20:26:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4062, \"mmr_diff\": -31, \"enemy_nickame\": \"&lt;HBGS&gt;<sp/>ShoWTimE\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-18T20:05:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": -29, \"enemy_nickame\": \"MouseGGAXE\", \"enemy_mmr\": 4071, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-04-18T20:18:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 8, \"enemy_nickame\": \"&lt;HsDL&gt;<sp/>Domius\", \"enemy_mmr\": 4013, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2020-04-18T20:30:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4042, \"mmr_diff\": -104, \"enemy_nickame\": \"Alyaska\", \"enemy_mmr\": 4146, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-04-18T20:45:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;RBP3&gt;<sp/>Steal\", \"enemy_mmr\": 4109, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2020-04-19T10:59:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-19T11:14:04+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-19T11:26:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-19T11:34:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-19T11:48:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-19T12:01:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"shadowofmich\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-20T11:40:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4047, \"mmr_diff\": 28, \"enemy_nickame\": \"Kilkenny\", \"enemy_mmr\": 4019, \"expected_winrate\": 0.5183078293888046}, {\"time_played_at\": \"2020-04-21T19:29:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4067, \"mmr_diff\": 18, \"enemy_nickame\": \"BsCMBANerd\", \"enemy_mmr\": 4049, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-22T20:24:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 47, \"enemy_nickame\": \"puLse\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-04-22T20:30:29+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 1, \"enemy_nickame\": \"puLse\", \"enemy_mmr\": 4021, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2020-04-22T20:45:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 42, \"enemy_nickame\": \"mSin\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5274464093596006}, {\"time_played_at\": \"2020-04-23T15:13:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T15:24:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T15:33:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T15:40:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T15:56:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T16:04:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-23T16:22:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;ROXKIS&gt;<sp/>Shaddar\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-04-24T18:14:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 36, \"enemy_nickame\": \"Spider\", \"enemy_mmr\": 3985, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-04-24T18:18:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3999, \"mmr_diff\": 9, \"enemy_nickame\": \"Spider\", \"enemy_mmr\": 3990, \"expected_winrate\": 0.5058870193731037}, {\"time_played_at\": \"2020-04-27T11:04:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3977, \"mmr_diff\": -25, \"enemy_nickame\": \"Mitchowyn\", \"enemy_mmr\": 4002, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-04-27T11:06:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3956, \"mmr_diff\": -77, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.449800646746463}, {\"time_played_at\": \"2020-04-27T11:15:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": 97, \"enemy_nickame\": \"DupaDuupa\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.5631134765259213}, {\"time_played_at\": \"2020-04-27T11:29:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3955, \"mmr_diff\": -168, \"enemy_nickame\": \"&lt;BARJO&gt;<sp/>JDH\", \"enemy_mmr\": 4123, \"expected_winrate\": 0.39183999647141454}, {\"time_played_at\": \"2020-04-27T11:42:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3975, \"mmr_diff\": -224, \"enemy_nickame\": \"&lt;NetGG&gt;<sp/>vladozerg\", \"enemy_mmr\": 4199, \"expected_winrate\": 0.35752730772110347}, {\"time_played_at\": \"2020-04-27T12:02:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 108, \"enemy_nickame\": \"Schmaunzer\", \"enemy_mmr\": 3851, \"expected_winrate\": 0.5701810794636865}, {\"time_played_at\": \"2020-04-27T12:24:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3935, \"mmr_diff\": 46, \"enemy_nickame\": \"Ise\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-04-28T12:16:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3912, \"mmr_diff\": -133, \"enemy_nickame\": \"DupaDuupa\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-04-28T12:40:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": -1163, \"enemy_nickame\": \"&lt;Mkers&gt;<sp/>Doc\", \"enemy_mmr\": 5035, \"expected_winrate\": 0.045517365974079564}, {\"time_played_at\": \"2020-04-28T13:05:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3895, \"mmr_diff\": 39, \"enemy_nickame\": \"AndrU\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-30T10:56:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3915, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;RIIP&gt;<sp/>Airea\", \"enemy_mmr\": 3924, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-30T11:20:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 35, \"enemy_nickame\": \"&lt;RIIP&gt;<sp/>Airea\", \"enemy_mmr\": 3902, \"expected_winrate\": 0.5228790340944155}, {\"time_played_at\": \"2020-04-30T11:33:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3957, \"mmr_diff\": -131, \"enemy_nickame\": \"KillemAll\", \"enemy_mmr\": 4088, \"expected_winrate\": 0.41513647933297476}, {\"time_played_at\": \"2020-04-30T18:14:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3983, \"mmr_diff\": 62, \"enemy_nickame\": \"FrosT\", \"enemy_mmr\": 3921, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2020-04-30T18:34:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3964, \"mmr_diff\": -91, \"enemy_nickame\": \"&lt;BRs&gt;<sp/>GoodFellas\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.44075259994384575}, {\"time_played_at\": \"2020-05-01T11:39:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 36, \"enemy_nickame\": \"Samaya\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-05-01T11:59:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3965, \"mmr_diff\": -62, \"enemy_nickame\": \"fireballkid\", \"enemy_mmr\": 4027, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2020-05-01T12:12:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3945, \"mmr_diff\": 40, \"enemy_nickame\": \"xyzxyzxyz\", \"enemy_mmr\": 3905, \"expected_winrate\": 0.5261418801396169}, {\"time_played_at\": \"2020-05-01T12:37:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3923, \"mmr_diff\": 153, \"enemy_nickame\": \"&lt;HsDL&gt;<sp/>Zero\", \"enemy_mmr\": 3770, \"expected_winrate\": 0.5987683411538888}, {\"time_played_at\": \"2020-05-01T12:42:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": 4, \"enemy_nickame\": \"Cptred\", \"enemy_mmr\": 3940, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-05-01T12:54:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 66, \"enemy_nickame\": \"Cptred\", \"enemy_mmr\": 3899, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2020-05-01T13:09:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3942, \"mmr_diff\": -140, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Epiku\", \"enemy_mmr\": 4082, \"expected_winrate\": 0.40943045167820846}, {\"time_played_at\": \"2020-05-02T14:40:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3968, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"enemy_mmr\": 3921, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-05-02T14:53:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;EZPTS&gt;<sp/>talisman\", \"enemy_mmr\": 3931, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-02T18:28:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Very Easy)\", \"enemy_mmr\": -36400, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-02T18:35:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": -36400, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Very Easy)\", \"enemy_mmr\": -36400, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-02T18:46:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": -36400, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Easy)\", \"enemy_mmr\": -36400, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-02T19:06:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 7, \"enemy_nickame\": \"Pokimon\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-05-02T19:20:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": -54, \"enemy_nickame\": \"mozgj\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.4647349020790969}, {\"time_played_at\": \"2020-05-02T19:31:03+00:00\", \"win\": true, \"race\": \"Zerg\", \"enemy_race\": \"Zerg\", \"mmr\": 3117, \"mmr_diff\": -2, \"enemy_nickame\": \"doomsdayza\", \"enemy_mmr\": 3119, \"expected_winrate\": 0.49869171600104734}, {\"time_played_at\": \"2020-05-03T20:09:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 78, \"enemy_nickame\": \"RomaNo\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2020-05-03T20:33:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3942, \"mmr_diff\": -97, \"enemy_nickame\": \"&lt;FSeS&gt;<sp/>Wizzl\\u00f4\", \"enemy_mmr\": 4039, \"expected_winrate\": 0.43688652347407875}, {\"time_played_at\": \"2020-05-03T20:43:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": -22, \"enemy_nickame\": \"Mich\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-05-03T20:53:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3946, \"mmr_diff\": -79, \"enemy_nickame\": \"Epicnoob\", \"enemy_mmr\": 4025, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2020-05-04T12:43:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3926, \"mmr_diff\": 95, \"enemy_nickame\": \"StaMinA\", \"enemy_mmr\": 3831, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-05-04T12:58:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": -7, \"enemy_nickame\": \"Doghum\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-05-04T13:02:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3967, \"mmr_diff\": 22, \"enemy_nickame\": \"Piiras\", \"enemy_mmr\": 3945, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2020-05-05T17:32:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 119, \"enemy_nickame\": \"&lt;VKT&gt;<sp/>R\\u00f8rtangen\", \"enemy_mmr\": 3869, \"expected_winrate\": 0.5772201891779002}, {\"time_played_at\": \"2020-05-05T17:44:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": 24, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rymdkrigaren\", \"enemy_mmr\": 3981, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2020-05-05T18:00:50+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": 193, \"enemy_nickame\": \"helldenn\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.6236333410254552}, {\"time_played_at\": \"2020-05-07T09:30:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 34, \"enemy_nickame\": \"&lt;BRSKR&gt;<sp/>Hexe\", \"enemy_mmr\": 4008, \"expected_winrate\": 0.5222262215402946}, {\"time_played_at\": \"2020-05-07T09:42:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": -57, \"enemy_nickame\": \"Yeezus\", \"enemy_mmr\": 4119, \"expected_winrate\": 0.4627827841407167}, {\"time_played_at\": \"2020-05-07T10:13:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4086, \"mmr_diff\": 14, \"enemy_nickame\": \"Yeezus\", \"enemy_mmr\": 4072, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-08T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4107, \"mmr_diff\": 60, \"enemy_nickame\": \"&lt;tXs&gt;<sp/>TheBloke\", \"enemy_mmr\": 4047, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2020-05-08T11:34:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4127, \"mmr_diff\": 109, \"enemy_nickame\": \"Ergopro\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.5708222172241983}, {\"time_played_at\": \"2020-05-10T18:56:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4145, \"mmr_diff\": -282, \"enemy_nickame\": \"T\\u00f6rtt\\u00f6\", \"enemy_mmr\": 4427, \"expected_winrate\": 0.3234692470348148}, {\"time_played_at\": \"2020-05-10T19:12:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4131, \"mmr_diff\": 26, \"enemy_nickame\": \"&lt;2G1M&gt;<sp/>Mime\", \"enemy_mmr\": 4105, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-05-10T19:29:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;2G1M&gt;<sp/>Mime\", \"enemy_mmr\": 4127, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-05-11T09:23:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4088, \"mmr_diff\": -137, \"enemy_nickame\": \"DonkeyMonkey\", \"enemy_mmr\": 4225, \"expected_winrate\": 0.4113298327220324}, {\"time_played_at\": \"2020-05-11T09:35:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4070, \"mmr_diff\": -72, \"enemy_nickame\": \"Elosai\", \"enemy_mmr\": 4142, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2020-05-11T09:41:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4051, \"mmr_diff\": 107, \"enemy_nickame\": \"ElBarto\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5695397061906963}, {\"time_played_at\": \"2020-05-11T16:06:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"TGE\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-11T16:28:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"TGE\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-12T17:37:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4026, \"mmr_diff\": -14, \"enemy_nickame\": \"Tiger\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-05-12T17:59:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": -11, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49280491829094863}, {\"time_played_at\": \"2020-05-12T18:11:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4027, \"mmr_diff\": -99, \"enemy_nickame\": \"\\u041b\\u043e\\u0445\", \"enemy_mmr\": 4126, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-05-15T20:33:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-15T20:43:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-15T20:56:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4006, \"mmr_diff\": 46, \"enemy_nickame\": \"TerenceSkill\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-05-25T11:18:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"TGE\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-25T11:33:51+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"TGE\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-25T11:59:22+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"TGE\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-26T09:13:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4026, \"mmr_diff\": 45, \"enemy_nickame\": \"Marvin\", \"enemy_mmr\": 3981, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-05-26T09:34:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4046, \"mmr_diff\": 6, \"enemy_nickame\": \"kerokero\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2020-05-26T09:46:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4024, \"mmr_diff\": -50, \"enemy_nickame\": \"MKPrime\", \"enemy_mmr\": 4074, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2020-05-27T09:57:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-27T10:12:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4004, \"mmr_diff\": -89, \"enemy_nickame\": \"MasterZERG\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-05-27T10:21:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 98, \"enemy_nickame\": \"Froze\", \"enemy_mmr\": 3887, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-05-27T10:32:29+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4004, \"mmr_diff\": -169, \"enemy_nickame\": \"giletjaune\", \"enemy_mmr\": 4173, \"expected_winrate\": 0.3912166399665741}, {\"time_played_at\": \"2020-05-27T10:56:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4030, \"mmr_diff\": -73, \"enemy_nickame\": \"CleanSweep\", \"enemy_mmr\": 4103, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-05-29T11:34:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-05-29T12:17:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 125, \"enemy_nickame\": \"&lt;SeoYN&gt;<sp/>General\", \"enemy_mmr\": 3929, \"expected_winrate\": 0.5810467174657031}, {\"time_played_at\": \"2020-05-29T17:58:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4072, \"mmr_diff\": 32, \"enemy_nickame\": \"Sclera\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-05-29T18:27:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4093, \"mmr_diff\": 12, \"enemy_nickame\": \"&lt;Hasu&gt;<sp/>RunGen\", \"enemy_mmr\": 4081, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-05-30T20:50:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4071, \"mmr_diff\": 122, \"enemy_nickame\": \"Hellfighter\", \"enemy_mmr\": 3949, \"expected_winrate\": 0.579134641806555}, {\"time_played_at\": \"2020-05-30T21:10:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4089, \"mmr_diff\": -34, \"enemy_nickame\": \"Onkelelak\", \"enemy_mmr\": 4123, \"expected_winrate\": 0.47777377845970537}, {\"time_played_at\": \"2020-06-01T11:40:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4112, \"mmr_diff\": -141, \"enemy_nickame\": \"Minoda\", \"enemy_mmr\": 4253, \"expected_winrate\": 0.4087979217905979}, {\"time_played_at\": \"2020-06-01T11:53:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4094, \"mmr_diff\": -129, \"enemy_nickame\": \"iga\", \"enemy_mmr\": 4223, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2020-06-02T18:39:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4076, \"mmr_diff\": 17, \"enemy_nickame\": \"IIIIIIIII\", \"enemy_mmr\": 4059, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2020-06-02T18:56:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4097, \"mmr_diff\": 69, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-06-03T17:53:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4117, \"mmr_diff\": 171, \"enemy_nickame\": \"&lt;DisES&gt;<sp/>Kamenashi\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.6100290069264851}, {\"time_played_at\": \"2020-06-03T17:54:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4133, \"mmr_diff\": -27, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2020-06-03T18:04:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4156, \"mmr_diff\": -88, \"enemy_nickame\": \"Liverpool\", \"enemy_mmr\": 4244, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2020-06-03T18:34:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4180, \"mmr_diff\": -124, \"enemy_nickame\": \"feetlover\", \"enemy_mmr\": 4304, \"expected_winrate\": 0.41959037361733365}, {\"time_played_at\": \"2020-06-04T19:03:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4203, \"mmr_diff\": 21, \"enemy_nickame\": \"JOOPSTAR\", \"enemy_mmr\": 4182, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-06-04T19:18:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4181, \"mmr_diff\": -189, \"enemy_nickame\": \"&lt;AiR\\u01c2&gt;<sp/>SuperNova\", \"enemy_mmr\": 4370, \"expected_winrate\": 0.37882641391385774}, {\"time_played_at\": \"2020-06-09T16:57:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 0, \"mmr_diff\": 0, \"enemy_nickame\": \"A.I. 1 (Elite)\", \"enemy_mmr\": 0, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2020-06-09T17:03:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4208, \"mmr_diff\": 14, \"enemy_nickame\": \"Ziiim\", \"enemy_mmr\": 4194, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-06-09T17:11:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4186, \"mmr_diff\": 39, \"enemy_nickame\": \"djakette\", \"enemy_mmr\": 4147, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-06-09T17:24:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4164, \"mmr_diff\": -68, \"enemy_nickame\": \"StaMinA\", \"enemy_mmr\": 4232, \"expected_winrate\": 0.45563522259336753}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nThere are a couple of clear outliers:\n\nthere are some games at a MMR of -36400; I may be bad at StarCraft, but not that bad. I'm not willing to trust our replay parser about them, so I'll just throw these out.\nthe games at a MMR of 0 are mostly custom or vs AI games. Those are recorded in replays as well. We'll dump them too.\nthere are few games where I offraced as Zerg, and the game tracks a separate MMR for each race you play as. We'll skip those as well and look only at the Protoss perspective. This\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndata = df[(df.mmr > 0) & (df.enemy_mmr > 0) & (df.race == \"Protoss\")]\ndata\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickame\n      enemy_mmr\n      expected_winrate\n    \n  \n  \n    \n      428\n      2019-10-06 12:23:56+00:00\n      True\n      Protoss\n      Protoss\n      3751\n      25\n      MJM\n      3726\n      0.516348\n    \n    \n      8\n      2019-10-06 12:36:36+00:00\n      True\n      Protoss\n      Protoss\n      3826\n      78\n      vasea\n      3748\n      0.550847\n    \n    \n      322\n      2019-10-08 19:33:28+00:00\n      False\n      Protoss\n      Protoss\n      3893\n      -53\n      Wavelength\n      3946\n      0.465386\n    \n    \n      54\n      2019-10-10 07:41:27+00:00\n      False\n      Protoss\n      Zerg\n      3828\n      26\n      PereiRa\n      3802\n      0.517001\n    \n    \n      343\n      2019-10-10 07:55:19+00:00\n      True\n      Protoss\n      Zerg\n      3760\n      -56\n      &lt;PROOO&gt;<sp/>Jesperpro\n      3816\n      0.463433\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      285\n      2020-06-04 19:03:54+00:00\n      False\n      Protoss\n      Terran\n      4203\n      21\n      JOOPSTAR\n      4182\n      0.513734\n    \n    \n      145\n      2020-06-04 19:18:46+00:00\n      True\n      Protoss\n      Zerg\n      4181\n      -189\n      &lt;AiR\u01c2&gt;<sp/>SuperNova\n      4370\n      0.378826\n    \n    \n      79\n      2020-06-09 17:03:47+00:00\n      False\n      Protoss\n      Protoss\n      4208\n      14\n      Ziiim\n      4194\n      0.509157\n    \n    \n      1\n      2020-06-09 17:11:15+00:00\n      False\n      Protoss\n      Zerg\n      4186\n      39\n      djakette\n      4147\n      0.525489\n    \n    \n      207\n      2020-06-09 17:24:17+00:00\n      False\n      Protoss\n      Terran\n      4164\n      -68\n      StaMinA\n      4232\n      0.455635\n    \n  \n\n343 rows \u00d7 9 columns\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \naltair.Chart(data).mark_circle().encode(\n    altair.X('time_played_at'),\n    altair.Y('mmr',\n             scale=altair.Scale(zero=False)),\n    color='enemy_race',\n).interactive()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-df00d593d3ac4c37b08c3c1f2554e345\") {\n      outputDiv = document.getElementById(\"altair-viz-df00d593d3ac4c37b08c3c1f2554e345\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-2a019bd732a64de4399bd051ca2a465b\"}, \"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"x\": {\"type\": \"temporal\", \"field\": \"time_played_at\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"mmr\", \"scale\": {\"zero\": false}}}, \"selection\": {\"selector002\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-2a019bd732a64de4399bd051ca2a465b\": [{\"time_played_at\": \"2019-10-06T12:23:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3751, \"mmr_diff\": 25, \"enemy_nickame\": \"MJM\", \"enemy_mmr\": 3726, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickame\": \"vasea\", \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickame\": \"Wavelength\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickame\": \"PereiRa\", \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickame\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickame\": \"Pippuri\", \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickame\": \"Supermaru\", \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickame\": \"&lt;IDLK&gt;<sp/>jasben\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickame\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickame\": \"NiGHTKiNG\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickame\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickame\": \"Zergorix\", \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickame\": \"Tomaso\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:14:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3871, \"mmr_diff\": 890, \"enemy_nickame\": \"YellowCoke\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.9112303439884303}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickame\": \"beh\", \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:18:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3767, \"mmr_diff\": 27, \"enemy_nickame\": \"Hannibal\", \"enemy_mmr\": 3740, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickame\": \"Tyson\", \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickame\": \"Granaatappel\", \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Sven\", \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickame\": \"&lt;NerCC&gt;<sp/>speck\", \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickame\": \"Ghalib\", \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickame\": \"KKroer\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:46:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": 85, \"enemy_nickame\": \"&lt;A\\u01c2move&gt;<sp/>AmoveZerg\", \"enemy_mmr\": 3606, \"expected_winrate\": 0.5553741249668821}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickame\": \"Hazard\", \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickame\": \"Pleydellia\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Noose\", \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickame\": \"&lt;FreeHK&gt;<sp/>jellun\", \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickame\": \"North\", \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickame\": \"Fleetz\", \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickame\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickame\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickame\": \"smthFISHYcmg\", \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickame\": \"ProtoZZavr\", \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickame\": \"Zend\", \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;UATeam&gt;<sp/>click\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickame\": \"midhigh\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickame\": \"TrashCanMan\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickame\": \"MightyMurloc\", \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickame\": \"\\u0432\\u043b\\u0430\\u0434\", \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickame\": \"OlympusRoyal\", \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickame\": \"InsighT\", \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickame\": \"Raver\", \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickame\": \"Cosmobrother\", \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickame\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickame\": \"Pudgey\", \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickame\": \"&lt;TDDA&gt;<sp/>EMM\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickame\": \"YvanDuR\\u00eave\", \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickame\": \"&lt;CocoCo&gt;<sp/>Goty\", \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickame\": \"&lt;kOzY&gt;<sp/>Dave\", \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickame\": \"Crombo\", \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickame\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickame\": \"Doomweed\", \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickame\": \"SkyFlare\", \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickame\": \"Chief\", \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickame\": \"Romio\", \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickame\": \"&lt;vGL&gt;<sp/>Celestial\", \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickame\": \"Inquisition\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickame\": \"&lt;ERHELM&gt;<sp/>Erik\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickame\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickame\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickame\": \"kalarazar\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickame\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickame\": \"AlexMacedon\", \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickame\": \"Niinja\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickame\": \"Delaam\", \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickame\": \"PeterLax\", \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickame\": \"Heradrass\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickame\": \"NS\\u0192Faxo\", \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickame\": \"Legionaru\", \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickame\": \"Ciprian\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickame\": \"Fraze\", \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickame\": \"NazelHut\", \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickame\": \"cloud\", \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickame\": \"Xaenor\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickame\": \"Vidra\", \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickame\": \"Noobofsc\", \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickame\": \"&lt;Div303&gt;<sp/>Dupsko\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>HaPe\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickame\": \"FrozenZerg\", \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickame\": \"utopike\", \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickame\": \"Nyx\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickame\": \"CapSto\", \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickame\": \"&lt;TAW&gt;<sp/>Pote\", \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickame\": \"Neydark\", \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickame\": \"Albus\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickame\": \"RXX\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickame\": \"xYn\", \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickame\": \"Stefan\", \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickame\": \"Xenocide\", \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickame\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickame\": \"Bingo\", \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickame\": \"Jungla\", \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickame\": \"Nyxeu\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickame\": \"IntrinsiCat\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickame\": \"\\u00e6\\u00e6\\u00e6\", \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickame\": \"Listig\", \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickame\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickame\": \"ARCMAN\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickame\": \"PPO\", \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickame\": \"HiveMind\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickame\": \"Racin\", \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickame\": \"rOoSter\", \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}, {\"time_played_at\": \"2020-01-04T19:04:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": -29, \"enemy_nickame\": \"R\\u00eago\", \"enemy_mmr\": 4038, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-01-04T19:07:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4031, \"mmr_diff\": -132, \"enemy_nickame\": \"&lt;un\\u018aea\\u018a&gt;<sp/>\\u00f2M\\u00e9g\\u00e0\", \"enemy_mmr\": 4163, \"expected_winrate\": 0.4145013213281905}, {\"time_played_at\": \"2020-01-04T19:19:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4057, \"mmr_diff\": -32, \"enemy_nickame\": \"Tsumi\", \"enemy_mmr\": 4089, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-05T14:03:19+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4036, \"mmr_diff\": -160, \"enemy_nickame\": \"&lt;Lowko&gt;<sp/>HardNeper\", \"enemy_mmr\": 4196, \"expected_winrate\": 0.3968393991220355}, {\"time_played_at\": \"2020-01-05T14:18:07+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": 14, \"enemy_nickame\": \"delmak\", \"enemy_mmr\": 4005, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-01-05T14:40:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -3, \"enemy_nickame\": \"&lt;P\\u00c2R\\u0142AH&gt;<sp/>SolusRex\", \"enemy_mmr\": 4043, \"expected_winrate\": 0.4980375795997298}, {\"time_played_at\": \"2020-01-05T14:47:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4019, \"mmr_diff\": -17, \"enemy_nickame\": \"Sanedude\", \"enemy_mmr\": 4036, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2020-01-05T15:02:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4041, \"mmr_diff\": -37, \"enemy_nickame\": \"Tomstar\", \"enemy_mmr\": 4078, \"expected_winrate\": 0.47581557748569775}, {\"time_played_at\": \"2020-01-05T15:09:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4021, \"mmr_diff\": 93, \"enemy_nickame\": \"Majcher\", \"enemy_mmr\": 3928, \"expected_winrate\": 0.5605369146027809}, {\"time_played_at\": \"2020-01-05T20:23:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4039, \"mmr_diff\": 103, \"enemy_nickame\": \"&lt;ORRO&gt;<sp/>jul\", \"enemy_mmr\": 3936, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2020-01-05T20:30:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4015, \"mmr_diff\": 27, \"enemy_nickame\": \"oppresticles\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2020-01-05T20:34:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3992, \"mmr_diff\": -22, \"enemy_nickame\": \"&lt;iksD&gt;<sp/>OzjaszGoldbe\", \"enemy_mmr\": 4014, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-01-05T20:39:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -56, \"enemy_nickame\": \"lIlIlIIlIlIl\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2020-01-13T20:21:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3995, \"mmr_diff\": 80, \"enemy_nickame\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"enemy_mmr\": 3915, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-13T20:26:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4014, \"mmr_diff\": 118, \"enemy_nickame\": \"&lt;TARAGO&gt;<sp/>Revenge\", \"enemy_mmr\": 3896, \"expected_winrate\": 0.5765815195249419}, {\"time_played_at\": \"2020-01-13T20:42:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3989, \"mmr_diff\": -28, \"enemy_nickame\": \"MadProbe\", \"enemy_mmr\": 4017, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-01-13T20:56:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3968, \"mmr_diff\": -32, \"enemy_nickame\": \"SUPERsKILLER\", \"enemy_mmr\": 4000, \"expected_winrate\": 0.47907962915091085}, {\"time_played_at\": \"2020-01-14T17:17:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3948, \"mmr_diff\": 12, \"enemy_nickame\": \"TerenceSkill\", \"enemy_mmr\": 3936, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-01-15T16:01:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3969, \"mmr_diff\": -68, \"enemy_nickame\": \"&lt;aW&gt;<sp/>Jeatall\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.45563522259336753}, {\"time_played_at\": \"2020-01-16T20:58:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3931, \"mmr_diff\": 86, \"enemy_nickame\": \"Exit\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2020-01-18T19:38:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": -30, \"enemy_nickame\": \"&lt;SWWT&gt;<sp/>Epic\", \"enemy_mmr\": 3980, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-01-19T18:04:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3969, \"mmr_diff\": 80, \"enemy_nickame\": \"StifleR\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5521412274584168}, {\"time_played_at\": \"2020-01-19T18:19:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3989, \"mmr_diff\": 10, \"enemy_nickame\": \"&lt;Dytred&gt;<sp/>EmpiRE\", \"enemy_mmr\": 3979, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2020-01-19T18:32:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4010, \"mmr_diff\": 13, \"enemy_nickame\": \"MuKK\", \"enemy_mmr\": 3997, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2020-01-31T12:42:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4031, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;adR&gt;<sp/>rdmZoo\", \"enemy_mmr\": 4075, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2020-01-31T12:54:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4011, \"mmr_diff\": -104, \"enemy_nickame\": \"Stick\", \"enemy_mmr\": 4115, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-01-31T13:10:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3992, \"mmr_diff\": 64, \"enemy_nickame\": \"&lt;GELSEN&gt;<sp/>Masaru\", \"enemy_mmr\": 3928, \"expected_winrate\": 0.5417676213094246}, {\"time_played_at\": \"2020-02-02T17:15:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4012, \"mmr_diff\": -80, \"enemy_nickame\": \"&lt;0mg&gt;<sp/>Sroljo\", \"enemy_mmr\": 4092, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-02-02T17:26:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3992, \"mmr_diff\": -14, \"enemy_nickame\": \"djakette\", \"enemy_mmr\": 4006, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-02-02T17:27:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3971, \"mmr_diff\": 58, \"enemy_nickame\": \"Syocto\", \"enemy_mmr\": 3913, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2020-02-02T17:40:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3991, \"mmr_diff\": -4, \"enemy_nickame\": \"VouS\", \"enemy_mmr\": 3995, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2020-02-02T17:48:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3970, \"mmr_diff\": -64, \"enemy_nickame\": \"valera\", \"enemy_mmr\": 4034, \"expected_winrate\": 0.4582323786905754}, {\"time_played_at\": \"2020-02-02T18:09:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3993, \"mmr_diff\": 104, \"enemy_nickame\": \"Jetix\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-02-05T21:02:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3989, \"mmr_diff\": 89, \"enemy_nickame\": \"MorroLord\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2020-02-05T21:05:33+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": -46, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4011, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-02-06T20:48:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3988, \"mmr_diff\": 26, \"enemy_nickame\": \"MsDragonFly\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-02-06T21:02:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4009, \"mmr_diff\": 54, \"enemy_nickame\": \"KJP\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.535265097920903}, {\"time_played_at\": \"2020-02-09T20:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": -25, \"enemy_nickame\": \"Grandclicker\", \"enemy_mmr\": 4054, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-02-09T20:19:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4004, \"mmr_diff\": 45, \"enemy_nickame\": \"BlackSmith\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-02-10T19:08:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3981, \"mmr_diff\": 102, \"enemy_nickame\": \"Kachu\", \"enemy_mmr\": 3879, \"expected_winrate\": 0.566329379590959}, {\"time_played_at\": \"2020-02-10T19:20:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3999, \"mmr_diff\": -73, \"enemy_nickame\": \"Pablink\", \"enemy_mmr\": 4072, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-02-10T19:37:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4023, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;biglol&gt;<sp/>bany\", \"enemy_mmr\": 4032, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-02-11T17:52:08+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 59, \"enemy_nickame\": \"ZZtopGun\", \"enemy_mmr\": 3986, \"expected_winrate\": 0.5385179979869474}, {\"time_played_at\": \"2020-02-11T18:03:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4064, \"mmr_diff\": 98, \"enemy_nickame\": \"ZZtopGun\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-02-13T18:20:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4083, \"mmr_diff\": 81, \"enemy_nickame\": \"Salomoon\", \"enemy_mmr\": 4002, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-02-13T18:34:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4102, \"mmr_diff\": -136, \"enemy_nickame\": \"&lt;BnetFR&gt;<sp/>NeWHoriZonS\", \"enemy_mmr\": 4238, \"expected_winrate\": 0.411963550335502}, {\"time_played_at\": \"2020-02-13T19:26:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4085, \"mmr_diff\": 90, \"enemy_nickame\": \"HeroMarauder\", \"enemy_mmr\": 3995, \"expected_winrate\": 0.5586023417718881}, {\"time_played_at\": \"2020-02-13T19:45:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4104, \"mmr_diff\": -121, \"enemy_nickame\": \"\\u041e\\u0422\\u041c\\u041e\\u0420\\u041e\\u0417\\u041e\\u041a\", \"enemy_mmr\": 4225, \"expected_winrate\": 0.42150324765525726}, {\"time_played_at\": \"2020-02-14T12:24:59+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4123, \"mmr_diff\": 25, \"enemy_nickame\": \"Haze\", \"enemy_mmr\": 4098, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2020-02-14T12:29:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4101, \"mmr_diff\": -350, \"enemy_nickame\": \"StormHead\", \"enemy_mmr\": 4451, \"expected_winrate\": 0.2858142640872888}, {\"time_played_at\": \"2020-02-15T12:57:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": -52, \"enemy_nickame\": \"&lt;FxL&gt;<sp/>bojan\", \"enemy_mmr\": 4135, \"expected_winrate\": 0.4660369182913983}, {\"time_played_at\": \"2020-02-15T13:41:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4063, \"mmr_diff\": 21, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 4042, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-02-17T16:31:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": 33, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"enemy_mmr\": 4008, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2020-02-17T16:49:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4018, \"mmr_diff\": 7, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Quickman\", \"enemy_mmr\": 4011, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-02-17T17:15:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3997, \"mmr_diff\": -155, \"enemy_nickame\": \"Stilgar\", \"enemy_mmr\": 4152, \"expected_winrate\": 0.39997507454646586}, {\"time_played_at\": \"2020-02-18T18:41:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4019, \"mmr_diff\": -89, \"enemy_nickame\": \"Canfup\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-18T18:56:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -95, \"enemy_nickame\": \"Hello\", \"enemy_mmr\": 4095, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-02-18T19:11:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4024, \"mmr_diff\": -47, \"enemy_nickame\": \"Hello\", \"enemy_mmr\": 4071, \"expected_winrate\": 0.46929394553496245}, {\"time_played_at\": \"2020-02-18T19:24:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4047, \"mmr_diff\": -290, \"enemy_nickame\": \"ajb\", \"enemy_mmr\": 4337, \"expected_winrate\": 0.3189054546669155}, {\"time_played_at\": \"2020-02-20T20:24:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4067, \"mmr_diff\": 219, \"enemy_nickame\": \"Badcomedian\", \"enemy_mmr\": 3848, \"expected_winrate\": 0.6394619681316271}, {\"time_played_at\": \"2020-02-21T16:46:06+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4048, \"mmr_diff\": -63, \"enemy_nickame\": \"razor\", \"enemy_mmr\": 4111, \"expected_winrate\": 0.4588820281084352}, {\"time_played_at\": \"2020-02-21T17:06:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4029, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;0301&gt;<sp/>kookooseen\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2020-02-21T17:20:16+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4050, \"mmr_diff\": -94, \"enemy_nickame\": \"Scythe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.4388186333591383}, {\"time_played_at\": \"2020-02-21T19:32:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4071, \"mmr_diff\": 50, \"enemy_nickame\": \"Sentinel\", \"enemy_mmr\": 4021, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2020-02-26T18:13:51+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4091, \"mmr_diff\": -45, \"enemy_nickame\": \"BlackAnubis\", \"enemy_mmr\": 4136, \"expected_winrate\": 0.47059750487758445}, {\"time_played_at\": \"2020-02-26T18:27:28+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4114, \"mmr_diff\": -99, \"enemy_nickame\": \"&lt;BornG&gt;<sp/>LucidityDark\", \"enemy_mmr\": 4213, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-02-27T21:17:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4139, \"mmr_diff\": -262, \"enemy_nickame\": \"&lt;PlAr&gt;<sp/>Arcanewinds\", \"enemy_mmr\": 4401, \"expected_winrate\": 0.33502542553804826}, {\"time_played_at\": \"2020-02-28T07:06:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4117, \"mmr_diff\": -327, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 4444, \"expected_winrate\": 0.2982553300458027}, {\"time_played_at\": \"2020-02-29T15:07:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4100, \"mmr_diff\": -367, \"enemy_nickame\": \"&lt;HBeS&gt;<sp/>LoziRa\", \"enemy_mmr\": 4467, \"expected_winrate\": 0.27682160785890525}, {\"time_played_at\": \"2020-02-29T15:22:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4083, \"mmr_diff\": 23, \"enemy_nickame\": \"StepO\", \"enemy_mmr\": 4060, \"expected_winrate\": 0.5150407610740062}, {\"time_played_at\": \"2020-02-29T15:40:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4104, \"mmr_diff\": -89, \"enemy_nickame\": \"Othello\", \"enemy_mmr\": 4193, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-02-29T15:49:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4085, \"mmr_diff\": -90, \"enemy_nickame\": \"&lt;Irri&gt;<sp/>Irrichi\", \"enemy_mmr\": 4175, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2020-03-01T20:09:47+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4066, \"mmr_diff\": 67, \"enemy_nickame\": \"FckVwls\", \"enemy_mmr\": 3999, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2020-03-02T09:38:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4086, \"mmr_diff\": 82, \"enemy_nickame\": \"Piliskner\", \"enemy_mmr\": 4004, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2020-03-02T09:52:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4105, \"mmr_diff\": -180, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 4285, \"expected_winrate\": 0.3843835326815888}, {\"time_played_at\": \"2020-03-02T10:06:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4088, \"mmr_diff\": 69, \"enemy_nickame\": \"TGNP\", \"enemy_mmr\": 4019, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-03-02T13:26:04+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4106, \"mmr_diff\": -84, \"enemy_nickame\": \"WizZy\", \"enemy_mmr\": 4190, \"expected_winrate\": 0.4452720886026404}, {\"time_played_at\": \"2020-03-02T13:45:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4130, \"mmr_diff\": -36, \"enemy_nickame\": \"WizZy\", \"enemy_mmr\": 4166, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2020-03-04T17:23:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4153, \"mmr_diff\": -30, \"enemy_nickame\": \"MothMonkey\", \"enemy_mmr\": 4183, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2020-03-04T17:39:40+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4132, \"mmr_diff\": 56, \"enemy_nickame\": \"Leaf\", \"enemy_mmr\": 4076, \"expected_winrate\": 0.5365666336553646}, {\"time_played_at\": \"2020-03-04T17:52:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -133, \"enemy_nickame\": \"helloRJ\", \"enemy_mmr\": 4242, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-03-05T21:18:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4091, \"mmr_diff\": 74, \"enemy_nickame\": \"Cyborg\", \"enemy_mmr\": 4017, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2020-03-09T11:03:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4050, \"mmr_diff\": -178, \"enemy_nickame\": \"Noldo\", \"enemy_mmr\": 4228, \"expected_winrate\": 0.3856226141648234}, {\"time_played_at\": \"2020-03-09T11:22:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4033, \"mmr_diff\": 32, \"enemy_nickame\": \"Vorp\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-03-10T19:22:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4053, \"mmr_diff\": -46, \"enemy_nickame\": \"&lt;FaDr&gt;<sp/>BURNIE\", \"enemy_mmr\": 4099, \"expected_winrate\": 0.4699456739507617}, {\"time_played_at\": \"2020-03-10T19:40:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -18, \"enemy_nickame\": \"Drakezul\", \"enemy_mmr\": 4050, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-11T20:53:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 81, \"enemy_nickame\": \"StaryPijany\", \"enemy_mmr\": 3973, \"expected_winrate\": 0.552788168619027}, {\"time_played_at\": \"2020-03-12T18:55:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4030, \"mmr_diff\": -7, \"enemy_nickame\": \"ORIGYN\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-03-12T19:06:49+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4009, \"mmr_diff\": 104, \"enemy_nickame\": \"Salomoon\", \"enemy_mmr\": 3905, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-03-13T07:52:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3984, \"mmr_diff\": -256, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>KINE\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3385320109141423}, {\"time_played_at\": \"2020-03-14T15:13:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3970, \"mmr_diff\": -95, \"enemy_nickame\": \"adrianjakuba\", \"enemy_mmr\": 4065, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2020-03-14T15:18:34+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3993, \"mmr_diff\": 18, \"enemy_nickame\": \"ODISEO\", \"enemy_mmr\": 3975, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-03-14T15:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4014, \"mmr_diff\": 95, \"enemy_nickame\": \"&lt;SCTR&gt;<sp/>LimeTime\", \"enemy_mmr\": 3919, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-03-14T16:18:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4033, \"mmr_diff\": -58, \"enemy_nickame\": \"&lt;PLA2N&gt;<sp/>ZloyVakarian\", \"enemy_mmr\": 4091, \"expected_winrate\": 0.4621323286338574}, {\"time_played_at\": \"2020-03-14T16:31:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4013, \"mmr_diff\": -80, \"enemy_nickame\": \"hellyeah\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.4478587725415832}, {\"time_played_at\": \"2020-03-14T20:10:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3994, \"mmr_diff\": -51, \"enemy_nickame\": \"&lt;GROF&gt;<sp/>Shefarin\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2020-03-14T20:23:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4017, \"mmr_diff\": -28, \"enemy_nickame\": \"Ben\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.48169217061119546}, {\"time_played_at\": \"2020-03-18T12:33:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4040, \"mmr_diff\": -61, \"enemy_nickame\": \"ManeWicht\", \"enemy_mmr\": 4101, \"expected_winrate\": 0.4601817441768105}, {\"time_played_at\": \"2020-03-18T12:41:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4020, \"mmr_diff\": 45, \"enemy_nickame\": \"Apollo\", \"enemy_mmr\": 3975, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-03-18T12:57:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -149, \"enemy_nickame\": \"&lt;noIMBA&gt;<sp/>Facehugger\", \"enemy_mmr\": 4189, \"expected_winrate\": 0.40374871115781824}, {\"time_played_at\": \"2020-03-22T11:58:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4066, \"mmr_diff\": 19, \"enemy_nickame\": \"&lt;Hasu&gt;<sp/>RunGen\", \"enemy_mmr\": 4047, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2020-03-22T12:03:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4044, \"mmr_diff\": 41, \"enemy_nickame\": \"OOOOOOOOOOOO\", \"enemy_mmr\": 4003, \"expected_winrate\": 0.5267941904791901}, {\"time_played_at\": \"2020-03-29T20:40:34+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;SCBoys&gt;<sp/>CiRkuS\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-03-30T15:48:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 4, \"enemy_nickame\": \"Bee\", \"enemy_mmr\": 3997, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-03-31T12:27:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3979, \"mmr_diff\": -31, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Rud\", \"enemy_mmr\": 4010, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-01T06:54:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4000, \"mmr_diff\": -23, \"enemy_nickame\": \"&lt;TRSO&gt;<sp/>THERIPPER\", \"enemy_mmr\": 4023, \"expected_winrate\": 0.4849592389259938}, {\"time_played_at\": \"2020-04-15T14:28:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 18, \"enemy_nickame\": \"MrBeck\", \"enemy_mmr\": 4004, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-15T14:50:51+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4043, \"mmr_diff\": 104, \"enemy_nickame\": \"Anrik\", \"enemy_mmr\": 3939, \"expected_winrate\": 0.5676141939821483}, {\"time_played_at\": \"2020-04-15T15:03:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4018, \"mmr_diff\": -135, \"enemy_nickame\": \"Tomus\", \"enemy_mmr\": 4153, \"expected_winrate\": 0.41259755997469955}, {\"time_played_at\": \"2020-04-17T19:15:54+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4001, \"mmr_diff\": 39, \"enemy_nickame\": \"Vanquish\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-17T19:31:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4021, \"mmr_diff\": -9, \"enemy_nickame\": \"Boban\", \"enemy_mmr\": 4030, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-17T20:10:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": 12, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4050, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-04-17T20:20:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4040, \"mmr_diff\": -40, \"enemy_nickame\": \"&lt;Peeps&gt;<sp/>ReNoVation\", \"enemy_mmr\": 4080, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2020-04-17T20:26:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4062, \"mmr_diff\": -31, \"enemy_nickame\": \"&lt;HBGS&gt;<sp/>ShoWTimE\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.479732662842747}, {\"time_played_at\": \"2020-04-18T20:05:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": -29, \"enemy_nickame\": \"MouseGGAXE\", \"enemy_mmr\": 4071, \"expected_winrate\": 0.4810389357983972}, {\"time_played_at\": \"2020-04-18T20:18:26+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 8, \"enemy_nickame\": \"&lt;HsDL&gt;<sp/>Domius\", \"enemy_mmr\": 4013, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2020-04-18T20:30:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4042, \"mmr_diff\": -104, \"enemy_nickame\": \"Alyaska\", \"enemy_mmr\": 4146, \"expected_winrate\": 0.4323858060178517}, {\"time_played_at\": \"2020-04-18T20:45:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;RBP3&gt;<sp/>Steal\", \"enemy_mmr\": 4109, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2020-04-20T11:40:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4047, \"mmr_diff\": 28, \"enemy_nickame\": \"Kilkenny\", \"enemy_mmr\": 4019, \"expected_winrate\": 0.5183078293888046}, {\"time_played_at\": \"2020-04-21T19:29:13+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4067, \"mmr_diff\": 18, \"enemy_nickame\": \"BsCMBANerd\", \"enemy_mmr\": 4049, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2020-04-22T20:24:41+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4045, \"mmr_diff\": 47, \"enemy_nickame\": \"puLse\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-04-22T20:30:29+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4022, \"mmr_diff\": 1, \"enemy_nickame\": \"puLse\", \"enemy_mmr\": 4021, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2020-04-22T20:45:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": 42, \"enemy_nickame\": \"mSin\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5274464093596006}, {\"time_played_at\": \"2020-04-24T18:14:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4021, \"mmr_diff\": 36, \"enemy_nickame\": \"Spider\", \"enemy_mmr\": 3985, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-04-24T18:18:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3999, \"mmr_diff\": 9, \"enemy_nickame\": \"Spider\", \"enemy_mmr\": 3990, \"expected_winrate\": 0.5058870193731037}, {\"time_played_at\": \"2020-04-27T11:04:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3977, \"mmr_diff\": -25, \"enemy_nickame\": \"Mitchowyn\", \"enemy_mmr\": 4002, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2020-04-27T11:06:38+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3956, \"mmr_diff\": -77, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.449800646746463}, {\"time_played_at\": \"2020-04-27T11:15:08+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": 97, \"enemy_nickame\": \"DupaDuupa\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.5631134765259213}, {\"time_played_at\": \"2020-04-27T11:29:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3955, \"mmr_diff\": -168, \"enemy_nickame\": \"&lt;BARJO&gt;<sp/>JDH\", \"enemy_mmr\": 4123, \"expected_winrate\": 0.39183999647141454}, {\"time_played_at\": \"2020-04-27T11:42:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3975, \"mmr_diff\": -224, \"enemy_nickame\": \"&lt;NetGG&gt;<sp/>vladozerg\", \"enemy_mmr\": 4199, \"expected_winrate\": 0.35752730772110347}, {\"time_played_at\": \"2020-04-27T12:02:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 108, \"enemy_nickame\": \"Schmaunzer\", \"enemy_mmr\": 3851, \"expected_winrate\": 0.5701810794636865}, {\"time_played_at\": \"2020-04-27T12:24:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3935, \"mmr_diff\": 46, \"enemy_nickame\": \"Ise\", \"enemy_mmr\": 3889, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-04-28T12:16:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3912, \"mmr_diff\": -133, \"enemy_nickame\": \"DupaDuupa\", \"enemy_mmr\": 4045, \"expected_winrate\": 0.4138664474466713}, {\"time_played_at\": \"2020-04-28T12:40:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": -1163, \"enemy_nickame\": \"&lt;Mkers&gt;<sp/>Doc\", \"enemy_mmr\": 5035, \"expected_winrate\": 0.045517365974079564}, {\"time_played_at\": \"2020-04-28T13:05:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3895, \"mmr_diff\": 39, \"enemy_nickame\": \"AndrU\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-04-30T10:56:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3915, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;RIIP&gt;<sp/>Airea\", \"enemy_mmr\": 3924, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2020-04-30T11:20:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 35, \"enemy_nickame\": \"&lt;RIIP&gt;<sp/>Airea\", \"enemy_mmr\": 3902, \"expected_winrate\": 0.5228790340944155}, {\"time_played_at\": \"2020-04-30T11:33:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3957, \"mmr_diff\": -131, \"enemy_nickame\": \"KillemAll\", \"enemy_mmr\": 4088, \"expected_winrate\": 0.41513647933297476}, {\"time_played_at\": \"2020-04-30T18:14:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3983, \"mmr_diff\": 62, \"enemy_nickame\": \"FrosT\", \"enemy_mmr\": 3921, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2020-04-30T18:34:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3964, \"mmr_diff\": -91, \"enemy_nickame\": \"&lt;BRs&gt;<sp/>GoodFellas\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.44075259994384575}, {\"time_played_at\": \"2020-05-01T11:39:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 36, \"enemy_nickame\": \"Samaya\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.5235317684924239}, {\"time_played_at\": \"2020-05-01T11:59:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3965, \"mmr_diff\": -62, \"enemy_nickame\": \"fireballkid\", \"enemy_mmr\": 4027, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2020-05-01T12:12:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3945, \"mmr_diff\": 40, \"enemy_nickame\": \"xyzxyzxyz\", \"enemy_mmr\": 3905, \"expected_winrate\": 0.5261418801396169}, {\"time_played_at\": \"2020-05-01T12:37:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3923, \"mmr_diff\": 153, \"enemy_nickame\": \"&lt;HsDL&gt;<sp/>Zero\", \"enemy_mmr\": 3770, \"expected_winrate\": 0.5987683411538888}, {\"time_played_at\": \"2020-05-01T12:42:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": 4, \"enemy_nickame\": \"Cptred\", \"enemy_mmr\": 3940, \"expected_winrate\": 0.5026165500838834}, {\"time_played_at\": \"2020-05-01T12:54:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 66, \"enemy_nickame\": \"Cptred\", \"enemy_mmr\": 3899, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2020-05-01T13:09:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3942, \"mmr_diff\": -140, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Epiku\", \"enemy_mmr\": 4082, \"expected_winrate\": 0.40943045167820846}, {\"time_played_at\": \"2020-05-02T14:40:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3968, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"enemy_mmr\": 3921, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2020-05-02T14:53:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;EZPTS&gt;<sp/>talisman\", \"enemy_mmr\": 3931, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-02T19:06:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 7, \"enemy_nickame\": \"Pokimon\", \"enemy_mmr\": 3959, \"expected_winrate\": 0.5045788764382211}, {\"time_played_at\": \"2020-05-02T19:20:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3944, \"mmr_diff\": -54, \"enemy_nickame\": \"mozgj\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.4647349020790969}, {\"time_played_at\": \"2020-05-03T20:09:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": 78, \"enemy_nickame\": \"RomaNo\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2020-05-03T20:33:12+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3942, \"mmr_diff\": -97, \"enemy_nickame\": \"&lt;FSeS&gt;<sp/>Wizzl\\u00f4\", \"enemy_mmr\": 4039, \"expected_winrate\": 0.43688652347407875}, {\"time_played_at\": \"2020-05-03T20:43:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3966, \"mmr_diff\": -22, \"enemy_nickame\": \"Mich\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2020-05-03T20:53:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3946, \"mmr_diff\": -79, \"enemy_nickame\": \"Epicnoob\", \"enemy_mmr\": 4025, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2020-05-04T12:43:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3926, \"mmr_diff\": 95, \"enemy_nickame\": \"StaMinA\", \"enemy_mmr\": 3831, \"expected_winrate\": 0.5618256123771407}, {\"time_played_at\": \"2020-05-04T12:58:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3945, \"mmr_diff\": -7, \"enemy_nickame\": \"Doghum\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.4954211235617789}, {\"time_played_at\": \"2020-05-04T13:02:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3967, \"mmr_diff\": 22, \"enemy_nickame\": \"Piiras\", \"enemy_mmr\": 3945, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2020-05-05T17:32:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3988, \"mmr_diff\": 119, \"enemy_nickame\": \"&lt;VKT&gt;<sp/>R\\u00f8rtangen\", \"enemy_mmr\": 3869, \"expected_winrate\": 0.5772201891779002}, {\"time_played_at\": \"2020-05-05T17:44:27+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": 24, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rymdkrigaren\", \"enemy_mmr\": 3981, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2020-05-05T18:00:50+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": 193, \"enemy_nickame\": \"helldenn\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.6236333410254552}, {\"time_played_at\": \"2020-05-07T09:30:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 34, \"enemy_nickame\": \"&lt;BRSKR&gt;<sp/>Hexe\", \"enemy_mmr\": 4008, \"expected_winrate\": 0.5222262215402946}, {\"time_played_at\": \"2020-05-07T09:42:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4062, \"mmr_diff\": -57, \"enemy_nickame\": \"Yeezus\", \"enemy_mmr\": 4119, \"expected_winrate\": 0.4627827841407167}, {\"time_played_at\": \"2020-05-07T10:13:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4086, \"mmr_diff\": 14, \"enemy_nickame\": \"Yeezus\", \"enemy_mmr\": 4072, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-05-08T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4107, \"mmr_diff\": 60, \"enemy_nickame\": \"&lt;tXs&gt;<sp/>TheBloke\", \"enemy_mmr\": 4047, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2020-05-08T11:34:03+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4127, \"mmr_diff\": 109, \"enemy_nickame\": \"Ergopro\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.5708222172241983}, {\"time_played_at\": \"2020-05-10T18:56:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4145, \"mmr_diff\": -282, \"enemy_nickame\": \"T\\u00f6rtt\\u00f6\", \"enemy_mmr\": 4427, \"expected_winrate\": 0.3234692470348148}, {\"time_played_at\": \"2020-05-10T19:12:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4131, \"mmr_diff\": 26, \"enemy_nickame\": \"&lt;2G1M&gt;<sp/>Mime\", \"enemy_mmr\": 4105, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2020-05-10T19:29:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4109, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;2G1M&gt;<sp/>Mime\", \"enemy_mmr\": 4127, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2020-05-11T09:23:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4088, \"mmr_diff\": -137, \"enemy_nickame\": \"DonkeyMonkey\", \"enemy_mmr\": 4225, \"expected_winrate\": 0.4113298327220324}, {\"time_played_at\": \"2020-05-11T09:35:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4070, \"mmr_diff\": -72, \"enemy_nickame\": \"Elosai\", \"enemy_mmr\": 4142, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2020-05-11T09:41:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4051, \"mmr_diff\": 107, \"enemy_nickame\": \"ElBarto\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5695397061906963}, {\"time_played_at\": \"2020-05-12T17:37:31+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4026, \"mmr_diff\": -14, \"enemy_nickame\": \"Tiger\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2020-05-12T17:59:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4005, \"mmr_diff\": -11, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49280491829094863}, {\"time_played_at\": \"2020-05-12T18:11:01+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4027, \"mmr_diff\": -99, \"enemy_nickame\": \"\\u041b\\u043e\\u0445\", \"enemy_mmr\": 4126, \"expected_winrate\": 0.4355995097595788}, {\"time_played_at\": \"2020-05-15T20:56:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4006, \"mmr_diff\": 46, \"enemy_nickame\": \"TerenceSkill\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5300543260492383}, {\"time_played_at\": \"2020-05-26T09:13:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4026, \"mmr_diff\": 45, \"enemy_nickame\": \"Marvin\", \"enemy_mmr\": 3981, \"expected_winrate\": 0.5294024951224156}, {\"time_played_at\": \"2020-05-26T09:34:07+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4046, \"mmr_diff\": 6, \"enemy_nickame\": \"kerokero\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2020-05-26T09:46:32+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4024, \"mmr_diff\": -50, \"enemy_nickame\": \"MKPrime\", \"enemy_mmr\": 4074, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2020-05-27T10:12:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4004, \"mmr_diff\": -89, \"enemy_nickame\": \"MasterZERG\", \"enemy_mmr\": 4093, \"expected_winrate\": 0.4420429143656749}, {\"time_played_at\": \"2020-05-27T10:21:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 98, \"enemy_nickame\": \"Froze\", \"enemy_mmr\": 3887, \"expected_winrate\": 0.563757090736234}, {\"time_played_at\": \"2020-05-27T10:32:29+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4004, \"mmr_diff\": -169, \"enemy_nickame\": \"giletjaune\", \"enemy_mmr\": 4173, \"expected_winrate\": 0.3912166399665741}, {\"time_played_at\": \"2020-05-27T10:56:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4030, \"mmr_diff\": -73, \"enemy_nickame\": \"CleanSweep\", \"enemy_mmr\": 4103, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2020-05-29T12:17:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4054, \"mmr_diff\": 125, \"enemy_nickame\": \"&lt;SeoYN&gt;<sp/>General\", \"enemy_mmr\": 3929, \"expected_winrate\": 0.5810467174657031}, {\"time_played_at\": \"2020-05-29T17:58:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4072, \"mmr_diff\": 32, \"enemy_nickame\": \"Sclera\", \"enemy_mmr\": 4040, \"expected_winrate\": 0.520920370849089}, {\"time_played_at\": \"2020-05-29T18:27:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4093, \"mmr_diff\": 12, \"enemy_nickame\": \"&lt;Hasu&gt;<sp/>RunGen\", \"enemy_mmr\": 4081, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2020-05-30T20:50:13+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4071, \"mmr_diff\": 122, \"enemy_nickame\": \"Hellfighter\", \"enemy_mmr\": 3949, \"expected_winrate\": 0.579134641806555}, {\"time_played_at\": \"2020-05-30T21:10:17+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4089, \"mmr_diff\": -34, \"enemy_nickame\": \"Onkelelak\", \"enemy_mmr\": 4123, \"expected_winrate\": 0.47777377845970537}, {\"time_played_at\": \"2020-06-01T11:40:30+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4112, \"mmr_diff\": -141, \"enemy_nickame\": \"Minoda\", \"enemy_mmr\": 4253, \"expected_winrate\": 0.4087979217905979}, {\"time_played_at\": \"2020-06-01T11:53:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4094, \"mmr_diff\": -129, \"enemy_nickame\": \"iga\", \"enemy_mmr\": 4223, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2020-06-02T18:39:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4076, \"mmr_diff\": 17, \"enemy_nickame\": \"IIIIIIIII\", \"enemy_mmr\": 4059, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2020-06-02T18:56:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4097, \"mmr_diff\": 69, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Wawszyn\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5450136951714643}, {\"time_played_at\": \"2020-06-03T17:53:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4117, \"mmr_diff\": 171, \"enemy_nickame\": \"&lt;DisES&gt;<sp/>Kamenashi\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.6100290069264851}, {\"time_played_at\": \"2020-06-03T17:54:42+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4133, \"mmr_diff\": -27, \"enemy_nickame\": \"Etharis\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2020-06-03T18:04:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4156, \"mmr_diff\": -88, \"enemy_nickame\": \"Liverpool\", \"enemy_mmr\": 4244, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2020-06-03T18:34:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4180, \"mmr_diff\": -124, \"enemy_nickame\": \"feetlover\", \"enemy_mmr\": 4304, \"expected_winrate\": 0.41959037361733365}, {\"time_played_at\": \"2020-06-04T19:03:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4203, \"mmr_diff\": 21, \"enemy_nickame\": \"JOOPSTAR\", \"enemy_mmr\": 4182, \"expected_winrate\": 0.5137335580481893}, {\"time_played_at\": \"2020-06-04T19:18:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4181, \"mmr_diff\": -189, \"enemy_nickame\": \"&lt;AiR\\u01c2&gt;<sp/>SuperNova\", \"enemy_mmr\": 4370, \"expected_winrate\": 0.37882641391385774}, {\"time_played_at\": \"2020-06-09T17:03:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4208, \"mmr_diff\": 14, \"enemy_nickame\": \"Ziiim\", \"enemy_mmr\": 4194, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2020-06-09T17:11:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4186, \"mmr_diff\": 39, \"enemy_nickame\": \"djakette\", \"enemy_mmr\": 4147, \"expected_winrate\": 0.5254894805551138}, {\"time_played_at\": \"2020-06-09T17:24:17+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4164, \"mmr_diff\": -68, \"enemy_nickame\": \"StaMinA\", \"enemy_mmr\": 4232, \"expected_winrate\": 0.45563522259336753}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nI'd say it's a steady climb upwards, but sometimes it feels nothing like that.\nI'm also going to limit my current analysis to 2019 replays (I did have more before October, but I think I lost them somewhere):\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndata2019 = data[(data['time_played_at'] > '2019-01-01') & (data['time_played_at'] < '2020-01-01')]\ndata2019\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      time_played_at\n      win\n      race\n      enemy_race\n      mmr\n      mmr_diff\n      enemy_nickame\n      enemy_mmr\n      expected_winrate\n    \n  \n  \n    \n      428\n      2019-10-06 12:23:56+00:00\n      True\n      Protoss\n      Protoss\n      3751\n      25\n      MJM\n      3726\n      0.516348\n    \n    \n      8\n      2019-10-06 12:36:36+00:00\n      True\n      Protoss\n      Protoss\n      3826\n      78\n      vasea\n      3748\n      0.550847\n    \n    \n      322\n      2019-10-08 19:33:28+00:00\n      False\n      Protoss\n      Protoss\n      3893\n      -53\n      Wavelength\n      3946\n      0.465386\n    \n    \n      54\n      2019-10-10 07:41:27+00:00\n      False\n      Protoss\n      Zerg\n      3828\n      26\n      PereiRa\n      3802\n      0.517001\n    \n    \n      343\n      2019-10-10 07:55:19+00:00\n      True\n      Protoss\n      Zerg\n      3760\n      -56\n      &lt;PROOO&gt;<sp/>Jesperpro\n      3816\n      0.463433\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      388\n      2019-12-27 20:24:27+00:00\n      False\n      Protoss\n      Zerg\n      3933\n      -100\n      HiveMind\n      4033\n      0.434956\n    \n    \n      25\n      2019-12-27 20:40:39+00:00\n      True\n      Protoss\n      Zerg\n      3914\n      0\n      Racin\n      3914\n      0.500000\n    \n    \n      205\n      2019-12-27 21:24:06+00:00\n      True\n      Protoss\n      Terran\n      3936\n      -41\n      &lt;DemuCl&gt;<sp/>Jazzz\n      3977\n      0.473206\n    \n    \n      59\n      2019-12-28 20:58:25+00:00\n      True\n      Protoss\n      Terran\n      3959\n      22\n      rOoSter\n      3937\n      0.514387\n    \n    \n      361\n      2019-12-28 21:06:48+00:00\n      True\n      Protoss\n      Zerg\n      3980\n      -260\n      contremaitre\n      4240\n      0.336192\n    \n  \n\n142 rows \u00d7 9 columns\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \naltair.Chart(data2019).mark_circle().encode(\n    altair.X('time_played_at'),\n    altair.Y('mmr',\n             scale=altair.Scale(zero=False)),\n    color='enemy_race',\n).interactive()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-b3a398756b184736824024cfe15956bd\") {\n      outputDiv = document.getElementById(\"altair-viz-b3a398756b184736824024cfe15956bd\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-7464f7b13068e315102d31f4862b1a3f\"}, \"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"x\": {\"type\": \"temporal\", \"field\": \"time_played_at\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"mmr\", \"scale\": {\"zero\": false}}}, \"selection\": {\"selector003\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-7464f7b13068e315102d31f4862b1a3f\": [{\"time_played_at\": \"2019-10-06T12:23:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3751, \"mmr_diff\": 25, \"enemy_nickame\": \"MJM\", \"enemy_mmr\": 3726, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickame\": \"vasea\", \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickame\": \"Wavelength\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickame\": \"PereiRa\", \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickame\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickame\": \"Pippuri\", \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickame\": \"Supermaru\", \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickame\": \"&lt;IDLK&gt;<sp/>jasben\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickame\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickame\": \"NiGHTKiNG\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickame\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickame\": \"Zergorix\", \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickame\": \"Tomaso\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:14:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3871, \"mmr_diff\": 890, \"enemy_nickame\": \"YellowCoke\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.9112303439884303}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickame\": \"beh\", \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:18:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3767, \"mmr_diff\": 27, \"enemy_nickame\": \"Hannibal\", \"enemy_mmr\": 3740, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickame\": \"Tyson\", \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickame\": \"Granaatappel\", \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Sven\", \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickame\": \"&lt;NerCC&gt;<sp/>speck\", \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickame\": \"Ghalib\", \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickame\": \"KKroer\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:46:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": 85, \"enemy_nickame\": \"&lt;A\\u01c2move&gt;<sp/>AmoveZerg\", \"enemy_mmr\": 3606, \"expected_winrate\": 0.5553741249668821}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickame\": \"Hazard\", \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickame\": \"Pleydellia\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Noose\", \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickame\": \"&lt;FreeHK&gt;<sp/>jellun\", \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickame\": \"North\", \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickame\": \"Fleetz\", \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickame\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickame\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickame\": \"smthFISHYcmg\", \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickame\": \"ProtoZZavr\", \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickame\": \"Zend\", \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;UATeam&gt;<sp/>click\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickame\": \"midhigh\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickame\": \"TrashCanMan\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickame\": \"MightyMurloc\", \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickame\": \"\\u0432\\u043b\\u0430\\u0434\", \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickame\": \"OlympusRoyal\", \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickame\": \"InsighT\", \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickame\": \"Raver\", \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickame\": \"Cosmobrother\", \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickame\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickame\": \"Pudgey\", \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickame\": \"&lt;TDDA&gt;<sp/>EMM\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickame\": \"YvanDuR\\u00eave\", \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickame\": \"&lt;CocoCo&gt;<sp/>Goty\", \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickame\": \"&lt;kOzY&gt;<sp/>Dave\", \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickame\": \"Crombo\", \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickame\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickame\": \"Doomweed\", \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickame\": \"SkyFlare\", \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickame\": \"Chief\", \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickame\": \"Romio\", \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickame\": \"&lt;vGL&gt;<sp/>Celestial\", \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickame\": \"Inquisition\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickame\": \"&lt;ERHELM&gt;<sp/>Erik\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickame\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickame\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickame\": \"kalarazar\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickame\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickame\": \"AlexMacedon\", \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickame\": \"Niinja\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickame\": \"Delaam\", \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickame\": \"PeterLax\", \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickame\": \"Heradrass\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickame\": \"NS\\u0192Faxo\", \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickame\": \"Legionaru\", \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickame\": \"Ciprian\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickame\": \"Fraze\", \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickame\": \"NazelHut\", \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickame\": \"cloud\", \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickame\": \"Xaenor\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickame\": \"Vidra\", \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickame\": \"Noobofsc\", \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickame\": \"&lt;Div303&gt;<sp/>Dupsko\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>HaPe\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickame\": \"FrozenZerg\", \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickame\": \"utopike\", \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickame\": \"Nyx\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickame\": \"CapSto\", \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickame\": \"&lt;TAW&gt;<sp/>Pote\", \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickame\": \"Neydark\", \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickame\": \"Albus\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickame\": \"RXX\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickame\": \"xYn\", \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickame\": \"Stefan\", \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickame\": \"Xenocide\", \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickame\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickame\": \"Bingo\", \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickame\": \"Jungla\", \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickame\": \"Nyxeu\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickame\": \"IntrinsiCat\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickame\": \"\\u00e6\\u00e6\\u00e6\", \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickame\": \"Listig\", \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickame\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickame\": \"ARCMAN\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickame\": \"PPO\", \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickame\": \"HiveMind\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickame\": \"Racin\", \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickame\": \"rOoSter\", \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nWe can now take a look at whether our expected_winrate metric makes sense:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \naltair.Chart(data2019).mark_circle().encode(\n    x=altair.X('enemy_mmr', scale=altair.Scale(zero=False)),\n    y=altair.Y('expected_winrate'),\n    color='win',\n).interactive()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-5f3ba7db1a8a476d948c2283bbd6979b\") {\n      outputDiv = document.getElementById(\"altair-viz-5f3ba7db1a8a476d948c2283bbd6979b\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-7464f7b13068e315102d31f4862b1a3f\"}, \"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"win\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"enemy_mmr\", \"scale\": {\"zero\": false}}, \"y\": {\"type\": \"quantitative\", \"field\": \"expected_winrate\"}}, \"selection\": {\"selector004\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-7464f7b13068e315102d31f4862b1a3f\": [{\"time_played_at\": \"2019-10-06T12:23:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3751, \"mmr_diff\": 25, \"enemy_nickame\": \"MJM\", \"enemy_mmr\": 3726, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickame\": \"vasea\", \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickame\": \"Wavelength\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickame\": \"PereiRa\", \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickame\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickame\": \"Pippuri\", \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickame\": \"Supermaru\", \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickame\": \"&lt;IDLK&gt;<sp/>jasben\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickame\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickame\": \"NiGHTKiNG\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickame\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickame\": \"Zergorix\", \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickame\": \"Tomaso\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:14:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3871, \"mmr_diff\": 890, \"enemy_nickame\": \"YellowCoke\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.9112303439884303}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickame\": \"beh\", \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:18:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3767, \"mmr_diff\": 27, \"enemy_nickame\": \"Hannibal\", \"enemy_mmr\": 3740, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickame\": \"Tyson\", \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickame\": \"Granaatappel\", \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Sven\", \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickame\": \"&lt;NerCC&gt;<sp/>speck\", \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickame\": \"Ghalib\", \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickame\": \"KKroer\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:46:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": 85, \"enemy_nickame\": \"&lt;A\\u01c2move&gt;<sp/>AmoveZerg\", \"enemy_mmr\": 3606, \"expected_winrate\": 0.5553741249668821}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickame\": \"Hazard\", \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickame\": \"Pleydellia\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Noose\", \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickame\": \"&lt;FreeHK&gt;<sp/>jellun\", \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickame\": \"North\", \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickame\": \"Fleetz\", \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickame\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickame\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickame\": \"smthFISHYcmg\", \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickame\": \"ProtoZZavr\", \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickame\": \"Zend\", \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;UATeam&gt;<sp/>click\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickame\": \"midhigh\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickame\": \"TrashCanMan\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickame\": \"MightyMurloc\", \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickame\": \"\\u0432\\u043b\\u0430\\u0434\", \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickame\": \"OlympusRoyal\", \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickame\": \"InsighT\", \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickame\": \"Raver\", \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickame\": \"Cosmobrother\", \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickame\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickame\": \"Pudgey\", \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickame\": \"&lt;TDDA&gt;<sp/>EMM\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickame\": \"YvanDuR\\u00eave\", \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickame\": \"&lt;CocoCo&gt;<sp/>Goty\", \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickame\": \"&lt;kOzY&gt;<sp/>Dave\", \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickame\": \"Crombo\", \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickame\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickame\": \"Doomweed\", \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickame\": \"SkyFlare\", \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickame\": \"Chief\", \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickame\": \"Romio\", \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickame\": \"&lt;vGL&gt;<sp/>Celestial\", \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickame\": \"Inquisition\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickame\": \"&lt;ERHELM&gt;<sp/>Erik\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickame\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickame\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickame\": \"kalarazar\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickame\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickame\": \"AlexMacedon\", \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickame\": \"Niinja\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickame\": \"Delaam\", \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickame\": \"PeterLax\", \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickame\": \"Heradrass\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickame\": \"NS\\u0192Faxo\", \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickame\": \"Legionaru\", \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickame\": \"Ciprian\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickame\": \"Fraze\", \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickame\": \"NazelHut\", \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickame\": \"cloud\", \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickame\": \"Xaenor\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickame\": \"Vidra\", \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickame\": \"Noobofsc\", \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickame\": \"&lt;Div303&gt;<sp/>Dupsko\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>HaPe\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickame\": \"FrozenZerg\", \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickame\": \"utopike\", \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickame\": \"Nyx\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickame\": \"CapSto\", \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickame\": \"&lt;TAW&gt;<sp/>Pote\", \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickame\": \"Neydark\", \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickame\": \"Albus\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickame\": \"RXX\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickame\": \"xYn\", \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickame\": \"Stefan\", \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickame\": \"Xenocide\", \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickame\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickame\": \"Bingo\", \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickame\": \"Jungla\", \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickame\": \"Nyxeu\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickame\": \"IntrinsiCat\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickame\": \"\\u00e6\\u00e6\\u00e6\", \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickame\": \"Listig\", \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickame\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickame\": \"ARCMAN\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickame\": \"PPO\", \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickame\": \"HiveMind\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickame\": \"Racin\", \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickame\": \"rOoSter\", \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nSeems like it! The higher up in enemies we go, the less the chances of winning become.\nDigression - race separated data\u00b6Altair makes it very easy to look at data from each of the matchups in the dataset:\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \naltair.Chart(data2019).mark_circle().encode(\n    x=altair.X('enemy_mmr', scale=altair.Scale(zero=False)),\n    y=altair.Y('expected_winrate'),\n    color='win',\n    facet='enemy_race',\n).interactive()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-41684692d98041a18d5e66c12b8bce1c\") {\n      outputDiv = document.getElementById(\"altair-viz-41684692d98041a18d5e66c12b8bce1c\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm//vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm//vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm//vega-lite@4.8.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm//vega-embed@6?noext\",\n    };\n\n    function loadScript(lib) {\n      return new Promise(function(resolve, reject) {\n        var s = document.createElement('script');\n        s.src = paths[lib];\n        s.async = true;\n        s.onload = () => resolve(paths[lib]);\n        s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n        document.getElementsByTagName(\"head\")[0].appendChild(s);\n      });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else if (typeof vegaEmbed === \"function\") {\n      displayChart(vegaEmbed);\n    } else {\n      loadScript(\"vega\")\n        .then(() => loadScript(\"vega-lite\"))\n        .then(() => loadScript(\"vega-embed\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-7464f7b13068e315102d31f4862b1a3f\"}, \"mark\": \"circle\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"win\"}, \"facet\": {\"type\": \"nominal\", \"field\": \"enemy_race\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"enemy_mmr\", \"scale\": {\"zero\": false}}, \"y\": {\"type\": \"quantitative\", \"field\": \"expected_winrate\"}}, \"selection\": {\"selector005\": {\"type\": \"interval\", \"bind\": \"scales\", \"encodings\": [\"x\", \"y\"]}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-7464f7b13068e315102d31f4862b1a3f\": [{\"time_played_at\": \"2019-10-06T12:23:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3751, \"mmr_diff\": 25, \"enemy_nickame\": \"MJM\", \"enemy_mmr\": 3726, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-10-06T12:36:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3826, \"mmr_diff\": 78, \"enemy_nickame\": \"vasea\", \"enemy_mmr\": 3748, \"expected_winrate\": 0.550846817630644}, {\"time_played_at\": \"2019-10-08T19:33:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3893, \"mmr_diff\": -53, \"enemy_nickame\": \"Wavelength\", \"enemy_mmr\": 3946, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-10-10T07:41:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3828, \"mmr_diff\": 26, \"enemy_nickame\": \"PereiRa\", \"enemy_mmr\": 3802, \"expected_winrate\": 0.5170011742274881}, {\"time_played_at\": \"2019-10-10T07:55:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3760, \"mmr_diff\": -56, \"enemy_nickame\": \"&lt;PROOO&gt;<sp/>Jesperpro\", \"enemy_mmr\": 3816, \"expected_winrate\": 0.46343336634463533}, {\"time_played_at\": \"2019-10-10T20:42:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3827, \"mmr_diff\": 126, \"enemy_nickame\": \"Pippuri\", \"enemy_mmr\": 3701, \"expected_winrate\": 0.5816835383970852}, {\"time_played_at\": \"2019-10-14T19:15:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3878, \"mmr_diff\": 17, \"enemy_nickame\": \"Supermaru\", \"enemy_mmr\": 3861, \"expected_winrate\": 0.5111186061324027}, {\"time_played_at\": \"2019-10-21T11:14:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3819, \"mmr_diff\": -88, \"enemy_nickame\": \"&lt;IDLK&gt;<sp/>jasben\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.44268836623770724}, {\"time_played_at\": \"2019-10-22T11:34:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3881, \"mmr_diff\": -185, \"enemy_nickame\": \"&lt;\\u041d\\u0422\\u0422&gt;<sp/>SPQR\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.3812924158311464}, {\"time_played_at\": \"2019-10-22T11:42:30+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3840, \"mmr_diff\": 83, \"enemy_nickame\": \"NiGHTKiNG\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.5540815127263503}, {\"time_played_at\": \"2019-10-22T12:04:14+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3885, \"mmr_diff\": -465, \"enemy_nickame\": \"&lt;\\u041c\\u041486&gt;<sp/>Moldovanin\", \"enemy_mmr\": 4350, \"expected_winrate\": 0.22851649491264128}, {\"time_played_at\": \"2019-10-22T12:19:39+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3862, \"mmr_diff\": -102, \"enemy_nickame\": \"Zergorix\", \"enemy_mmr\": 3964, \"expected_winrate\": 0.433670620409041}, {\"time_played_at\": \"2019-10-29T09:32:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -73, \"enemy_nickame\": \"Tomaso\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.4523921838509467}, {\"time_played_at\": \"2019-10-29T11:14:53+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3871, \"mmr_diff\": 890, \"enemy_nickame\": \"YellowCoke\", \"enemy_mmr\": 2981, \"expected_winrate\": 0.9112303439884303}, {\"time_played_at\": \"2019-10-29T11:20:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3915, \"mmr_diff\": -17, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3932, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-10-29T11:28:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3873, \"mmr_diff\": -79, \"enemy_nickame\": \"abelian\", \"enemy_mmr\": 3952, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-10-29T11:42:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3836, \"mmr_diff\": -119, \"enemy_nickame\": \"llllllllllll\", \"enemy_mmr\": 3955, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-10-29T18:17:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3802, \"mmr_diff\": -110, \"enemy_nickame\": \"beh\", \"enemy_mmr\": 3912, \"expected_winrate\": 0.4285368825916186}, {\"time_played_at\": \"2019-10-29T18:18:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3767, \"mmr_diff\": 27, \"enemy_nickame\": \"Hannibal\", \"enemy_mmr\": 3740, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-10-29T18:34:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3728, \"mmr_diff\": -16, \"enemy_nickame\": \"&lt;Dobro&gt;<sp/>\\u043f\\u0438\\u0440\\u0430\\u0436\\u043e\\u043a\", \"enemy_mmr\": 3744, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-10-30T07:06:31+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": 389, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3492, \"expected_winrate\": 0.7345530624972029}, {\"time_played_at\": \"2019-10-31T18:12:23+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3881, \"mmr_diff\": -761, \"enemy_nickame\": \"Tyson\", \"enemy_mmr\": 4642, \"expected_winrate\": 0.12012861418038036}, {\"time_played_at\": \"2019-10-31T18:55:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3766, \"mmr_diff\": 10, \"enemy_nickame\": \"Granaatappel\", \"enemy_mmr\": 3756, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-10-31T19:07:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3730, \"mmr_diff\": 66, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>Sven\", \"enemy_mmr\": 3664, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-01T09:05:49+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": -78, \"enemy_nickame\": \"&lt;NerCC&gt;<sp/>speck\", \"enemy_mmr\": 3769, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-11-01T09:15:52+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3729, \"mmr_diff\": -142, \"enemy_nickame\": \"Ghalib\", \"enemy_mmr\": 3871, \"expected_winrate\": 0.40816569372083916}, {\"time_played_at\": \"2019-11-01T13:42:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3696, \"mmr_diff\": 65, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Garethax\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5424171287450194}, {\"time_played_at\": \"2019-11-02T17:45:05+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3661, \"mmr_diff\": 30, \"enemy_nickame\": \"KKroer\", \"enemy_mmr\": 3631, \"expected_winrate\": 0.5196142341997408}, {\"time_played_at\": \"2019-11-02T17:46:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3691, \"mmr_diff\": 85, \"enemy_nickame\": \"&lt;A\\u01c2move&gt;<sp/>AmoveZerg\", \"enemy_mmr\": 3606, \"expected_winrate\": 0.5553741249668821}, {\"time_played_at\": \"2019-11-02T17:51:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3718, \"mmr_diff\": 33, \"enemy_nickame\": \"Hazard\", \"enemy_mmr\": 3685, \"expected_winrate\": 0.5215733330511455}, {\"time_played_at\": \"2019-11-02T17:55:38+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3688, \"mmr_diff\": 62, \"enemy_nickame\": \"Pleydellia\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-11-02T20:06:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3655, \"mmr_diff\": 8, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3647, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-11-02T20:15:14+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3684, \"mmr_diff\": 58, \"enemy_nickame\": \"lllllll\", \"enemy_mmr\": 3626, \"expected_winrate\": 0.5378676713661427}, {\"time_played_at\": \"2019-11-02T20:29:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3711, \"mmr_diff\": -25, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>Noose\", \"enemy_mmr\": 3736, \"expected_winrate\": 0.48365224166479165}, {\"time_played_at\": \"2019-11-03T11:18:56+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3740, \"mmr_diff\": -44, \"enemy_nickame\": \"&lt;DaGOAT&gt;<sp/>Sinus\", \"enemy_mmr\": 3784, \"expected_winrate\": 0.4712494361077314}, {\"time_played_at\": \"2019-11-03T11:35:01+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3769, \"mmr_diff\": -87, \"enemy_nickame\": \"&lt;LESeV&gt;<sp/>iceclaw\", \"enemy_mmr\": 3856, \"expected_winrate\": 0.44333401172275544}, {\"time_played_at\": \"2019-11-04T20:40:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3799, \"mmr_diff\": -67, \"enemy_nickame\": \"&lt;FreeHK&gt;<sp/>jellun\", \"enemy_mmr\": 3866, \"expected_winrate\": 0.4562842910331827}, {\"time_played_at\": \"2019-11-04T20:46:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3825, \"mmr_diff\": -22, \"enemy_nickame\": \"North\", \"enemy_mmr\": 3847, \"expected_winrate\": 0.48561281583400134}, {\"time_played_at\": \"2019-11-04T20:53:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3800, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;MiClan&gt;<sp/>MiSHANYA\", \"enemy_mmr\": 3883, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-11-04T20:57:05+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3777, \"mmr_diff\": 16, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3761, \"expected_winrate\": 0.5104647674609881}, {\"time_played_at\": \"2019-11-05T18:35:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3752, \"mmr_diff\": 66, \"enemy_nickame\": \"Fleetz\", \"enemy_mmr\": 3686, \"expected_winrate\": 0.5430664920222119}, {\"time_played_at\": \"2019-11-05T18:43:20+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3774, \"mmr_diff\": -53, \"enemy_nickame\": \"&lt;XsR&gt;<sp/>Ajotaele\", \"enemy_mmr\": 3827, \"expected_winrate\": 0.4653858512231642}, {\"time_played_at\": \"2019-11-05T18:48:41+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3752, \"mmr_diff\": -19, \"enemy_nickame\": \"&lt;dumbfu&gt;<sp/>cheesus\", \"enemy_mmr\": 3771, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-05T18:58:24+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3776, \"mmr_diff\": 24, \"enemy_nickame\": \"smthFISHYcmg\", \"enemy_mmr\": 3752, \"expected_winrate\": 0.5156942865406842}, {\"time_played_at\": \"2019-11-06T21:43:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3798, \"mmr_diff\": -5, \"enemy_nickame\": \"ProtoZZavr\", \"enemy_mmr\": 3803, \"expected_winrate\": 0.4967293291893}, {\"time_played_at\": \"2019-11-08T09:33:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3821, \"mmr_diff\": -101, \"enemy_nickame\": \"Zend\", \"enemy_mmr\": 3922, \"expected_winrate\": 0.4343133632425947}, {\"time_played_at\": \"2019-11-12T09:42:59+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;UATeam&gt;<sp/>click\", \"enemy_mmr\": 3888, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-11-12T09:49:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3870, \"mmr_diff\": -30, \"enemy_nickame\": \"midhigh\", \"enemy_mmr\": 3900, \"expected_winrate\": 0.4803857658002591}, {\"time_played_at\": \"2019-11-12T10:06:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3890, \"mmr_diff\": -72, \"enemy_nickame\": \"Paulie\", \"enemy_mmr\": 3962, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-11-17T09:58:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3913, \"mmr_diff\": -79, \"enemy_nickame\": \"TrashCanMan\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.44850589025232834}, {\"time_played_at\": \"2019-11-17T10:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3894, \"mmr_diff\": 96, \"enemy_nickame\": \"MightyMurloc\", \"enemy_mmr\": 3798, \"expected_winrate\": 0.5624696497063278}, {\"time_played_at\": \"2019-11-18T15:44:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3913, \"mmr_diff\": 116, \"enemy_nickame\": \"&lt;lLiTl&gt;<sp/>Eniman\", \"enemy_mmr\": 3797, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-11-18T15:58:52+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 103, \"enemy_nickame\": \"\\u0432\\u043b\\u0430\\u0434\", \"enemy_mmr\": 3790, \"expected_winrate\": 0.5669718993599533}, {\"time_played_at\": \"2019-11-18T16:08:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -55, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4640840730548977}, {\"time_played_at\": \"2019-11-18T16:17:57+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3891, \"mmr_diff\": 10, \"enemy_nickame\": \"OlympusRoyal\", \"enemy_mmr\": 3881, \"expected_winrate\": 0.506541061734927}, {\"time_played_at\": \"2019-11-18T17:08:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3912, \"mmr_diff\": 89, \"enemy_nickame\": \"InsighT\", \"enemy_mmr\": 3823, \"expected_winrate\": 0.557957085634325}, {\"time_played_at\": \"2019-11-18T17:26:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3888, \"mmr_diff\": -16, \"enemy_nickame\": \"trouth\", \"enemy_mmr\": 3904, \"expected_winrate\": 0.4895352325390119}, {\"time_played_at\": \"2019-11-18T17:32:43+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3910, \"mmr_diff\": -10, \"enemy_nickame\": \"Raver\", \"enemy_mmr\": 3920, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-11-18T17:48:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3889, \"mmr_diff\": -18, \"enemy_nickame\": \"&lt;TheDOH&gt;<sp/>secretspace\", \"enemy_mmr\": 3907, \"expected_winrate\": 0.4882275932388606}, {\"time_played_at\": \"2019-11-18T18:03:36+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3911, \"mmr_diff\": -50, \"enemy_nickame\": \"Cosmobrother\", \"enemy_mmr\": 3961, \"expected_winrate\": 0.4673393974095765}, {\"time_played_at\": \"2019-11-19T07:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3934, \"mmr_diff\": 60, \"enemy_nickame\": \"IIIIIIIIIIII\", \"enemy_mmr\": 3874, \"expected_winrate\": 0.5391681935344519}, {\"time_played_at\": \"2019-11-19T19:02:22+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3954, \"mmr_diff\": 384, \"enemy_nickame\": \"&lt;EESC&gt;<sp/>penduloSFX\", \"enemy_mmr\": 3570, \"expected_winrate\": 0.7319942855046018}, {\"time_played_at\": \"2019-11-19T19:05:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3972, \"mmr_diff\": -387, \"enemy_nickame\": \"Pudgey\", \"enemy_mmr\": 4359, \"expected_winrate\": 0.2664685738023793}, {\"time_played_at\": \"2019-11-19T19:10:36+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3947, \"mmr_diff\": -62, \"enemy_nickame\": \"&lt;TDDA&gt;<sp/>EMM\", \"enemy_mmr\": 4009, \"expected_winrate\": 0.45953181733049886}, {\"time_played_at\": \"2019-11-19T19:33:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3950, \"mmr_diff\": 91, \"enemy_nickame\": \"YvanDuR\\u00eave\", \"enemy_mmr\": 3859, \"expected_winrate\": 0.5592474000561543}, {\"time_played_at\": \"2019-11-20T07:59:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3969, \"mmr_diff\": -19, \"enemy_nickame\": \"BuRneR\", \"enemy_mmr\": 3988, \"expected_winrate\": 0.4875738328873896}, {\"time_played_at\": \"2019-11-20T08:19:24+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3948, \"mmr_diff\": 63, \"enemy_nickame\": \"&lt;CocoCo&gt;<sp/>Goty\", \"enemy_mmr\": 3885, \"expected_winrate\": 0.5411179718915647}, {\"time_played_at\": \"2019-11-25T17:38:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3925, \"mmr_diff\": -95, \"enemy_nickame\": \"&lt;kOzY&gt;<sp/>Dave\", \"enemy_mmr\": 4020, \"expected_winrate\": 0.43817438762285926}, {\"time_played_at\": \"2019-11-25T17:53:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3949, \"mmr_diff\": 14, \"enemy_nickame\": \"Crombo\", \"enemy_mmr\": 3935, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-11-26T18:58:28+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3927, \"mmr_diff\": 19, \"enemy_nickame\": \"\\u043f\\u0440\\u043e\\u0440\\u0432\\u0435\\u043c\\u0441\\u044f\", \"enemy_mmr\": 3908, \"expected_winrate\": 0.5124261671126104}, {\"time_played_at\": \"2019-11-26T19:04:47+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3905, \"mmr_diff\": -691, \"enemy_nickame\": \"Doomweed\", \"enemy_mmr\": 4596, \"expected_winrate\": 0.1408736498380834}, {\"time_played_at\": \"2019-11-26T19:11:43+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3899, \"mmr_diff\": -952, \"enemy_nickame\": \"SkyFlare\", \"enemy_mmr\": 4851, \"expected_winrate\": 0.07649305137834163}, {\"time_played_at\": \"2019-11-26T19:20:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3924, \"mmr_diff\": -17, \"enemy_nickame\": \"Chief\", \"enemy_mmr\": 3941, \"expected_winrate\": 0.4888813938675973}, {\"time_played_at\": \"2019-11-26T19:32:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3944, \"mmr_diff\": 136, \"enemy_nickame\": \"Romio\", \"enemy_mmr\": 3808, \"expected_winrate\": 0.5880364496644981}, {\"time_played_at\": \"2019-11-28T19:00:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3962, \"mmr_diff\": 20, \"enemy_nickame\": \"&lt;SILeSp&gt;<sp/>Galactus\", \"enemy_mmr\": 3942, \"expected_winrate\": 0.5130798849527788}, {\"time_played_at\": \"2019-11-28T19:09:44+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3940, \"mmr_diff\": 86, \"enemy_nickame\": \"&lt;vGL&gt;<sp/>Celestial\", \"enemy_mmr\": 3854, \"expected_winrate\": 0.556020151303233}, {\"time_played_at\": \"2019-11-28T19:23:15+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 3, \"enemy_nickame\": \"Inquisition\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-11-29T18:07:04+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3981, \"mmr_diff\": 5, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.5032706708107001}, {\"time_played_at\": \"2019-11-29T18:14:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -39, \"enemy_nickame\": \"zzTp\", \"enemy_mmr\": 3998, \"expected_winrate\": 0.47451051944488615}, {\"time_played_at\": \"2019-11-29T18:31:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": -14, \"enemy_nickame\": \"&lt;ERHELM&gt;<sp/>Erik\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.49084301506895067}, {\"time_played_at\": \"2019-12-02T19:29:02+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3961, \"mmr_diff\": -107, \"enemy_nickame\": \"&lt;IWtD&gt;<sp/>DiabloFeTo\", \"enemy_mmr\": 4068, \"expected_winrate\": 0.4304602938093038}, {\"time_played_at\": \"2019-12-02T19:42:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3985, \"mmr_diff\": 25, \"enemy_nickame\": \"&lt;OnkelS&gt;<sp/>Prolow\", \"enemy_mmr\": 3960, \"expected_winrate\": 0.5163477583352083}, {\"time_played_at\": \"2019-12-02T20:09:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4006, \"mmr_diff\": -10, \"enemy_nickame\": \"kalarazar\", \"enemy_mmr\": 4016, \"expected_winrate\": 0.49345893826507303}, {\"time_played_at\": \"2019-12-03T18:33:42+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4028, \"mmr_diff\": -27, \"enemy_nickame\": \"&lt;Furri&gt;<sp/>PrinceOfIEM\", \"enemy_mmr\": 4055, \"expected_winrate\": 0.48234546801180256}, {\"time_played_at\": \"2019-12-03T18:55:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4007, \"mmr_diff\": 82, \"enemy_nickame\": \"&lt;IBeA\\u015aI&gt;<sp/>Bummsjordy\", \"enemy_mmr\": 3925, \"expected_winrate\": 0.5534349310880278}, {\"time_played_at\": \"2019-12-03T19:10:16+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4026, \"mmr_diff\": -78, \"enemy_nickame\": \"Orian\", \"enemy_mmr\": 4104, \"expected_winrate\": 0.4491531823693559}, {\"time_played_at\": \"2019-12-05T19:21:37+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4007, \"mmr_diff\": 18, \"enemy_nickame\": \"AlexMacedon\", \"enemy_mmr\": 3989, \"expected_winrate\": 0.5117724067611394}, {\"time_played_at\": \"2019-12-05T19:43:40+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4028, \"mmr_diff\": 27, \"enemy_nickame\": \"Niinja\", \"enemy_mmr\": 4001, \"expected_winrate\": 0.5176545319881974}, {\"time_played_at\": \"2019-12-09T20:18:26+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4049, \"mmr_diff\": -188, \"enemy_nickame\": \"Delaam\", \"enemy_mmr\": 4237, \"expected_winrate\": 0.3794423330829675}, {\"time_played_at\": \"2019-12-09T20:28:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4032, \"mmr_diff\": -129, \"enemy_nickame\": \"PeterLax\", \"enemy_mmr\": 4161, \"expected_winrate\": 0.4164076397687468}, {\"time_played_at\": \"2019-12-09T20:36:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4015, \"mmr_diff\": -9, \"enemy_nickame\": \"&lt;OGCO\\u0421K&gt;<sp/>ShushYo\", \"enemy_mmr\": 4024, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-09T20:39:03+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4036, \"mmr_diff\": -72, \"enemy_nickame\": \"Heradrass\", \"enemy_mmr\": 4108, \"expected_winrate\": 0.4530404772551185}, {\"time_played_at\": \"2019-12-10T19:05:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4017, \"mmr_diff\": -108, \"enemy_nickame\": \"NS\\u0192Faxo\", \"enemy_mmr\": 4125, \"expected_winrate\": 0.42981892053631354}, {\"time_played_at\": \"2019-12-11T20:04:00+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4042, \"mmr_diff\": 14, \"enemy_nickame\": \"&lt;PiGPan&gt;<sp/>TNTea\", \"enemy_mmr\": 4028, \"expected_winrate\": 0.5091569849310493}, {\"time_played_at\": \"2019-12-11T20:23:18+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4020, \"mmr_diff\": 8, \"enemy_nickame\": \"Legionaru\", \"enemy_mmr\": 4012, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-12T18:10:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4041, \"mmr_diff\": 49, \"enemy_nickame\": \"Ciprian\", \"enemy_mmr\": 3992, \"expected_winrate\": 0.5320091949397798}, {\"time_played_at\": \"2019-12-12T18:48:15+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4061, \"mmr_diff\": -83, \"enemy_nickame\": \"&lt;Nutri&gt;<sp/>Highscribe\", \"enemy_mmr\": 4144, \"expected_winrate\": 0.44591848727364963}, {\"time_played_at\": \"2019-12-12T19:02:09+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4042, \"mmr_diff\": 13, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4029, \"expected_winrate\": 0.5085030455441815}, {\"time_played_at\": \"2019-12-12T19:21:45+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4063, \"mmr_diff\": 12, \"enemy_nickame\": \"Fraze\", \"enemy_mmr\": 4051, \"expected_winrate\": 0.5078490770578872}, {\"time_played_at\": \"2019-12-12T19:28:57+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4041, \"mmr_diff\": -90, \"enemy_nickame\": \"NazelHut\", \"enemy_mmr\": 4131, \"expected_winrate\": 0.44139765822811194}, {\"time_played_at\": \"2019-12-12T19:42:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 4022, \"mmr_diff\": -385, \"enemy_nickame\": \"cloud\", \"enemy_mmr\": 4407, \"expected_winrate\": 0.2674927102443324}, {\"time_played_at\": \"2019-12-12T19:53:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 4001, \"mmr_diff\": -36, \"enemy_nickame\": \"Xaenor\", \"enemy_mmr\": 4037, \"expected_winrate\": 0.47646823150757606}, {\"time_played_at\": \"2019-12-12T20:52:10+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3980, \"mmr_diff\": 15, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3965, \"expected_winrate\": 0.5098108929820042}, {\"time_played_at\": \"2019-12-12T21:03:25+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 4001, \"mmr_diff\": 57, \"enemy_nickame\": \"&lt;snajpu&gt;<sp/>Auddi\", \"enemy_mmr\": 3944, \"expected_winrate\": 0.5372172158592833}, {\"time_played_at\": \"2019-12-12T21:16:53+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3978, \"mmr_diff\": -191, \"enemy_nickame\": \"Vidra\", \"enemy_mmr\": 4169, \"expected_winrate\": 0.3775957486362336}, {\"time_played_at\": \"2019-12-12T21:29:56+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 75, \"enemy_nickame\": \"Noobofsc\", \"enemy_mmr\": 3882, \"expected_winrate\": 0.5489039163154777}, {\"time_played_at\": \"2019-12-14T10:50:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3933, \"mmr_diff\": -85, \"enemy_nickame\": \"&lt;Div303&gt;<sp/>Dupsko\", \"enemy_mmr\": 4018, \"expected_winrate\": 0.4446258750331179}, {\"time_played_at\": \"2019-12-18T16:35:46+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3957, \"mmr_diff\": -109, \"enemy_nickame\": \"&lt;IndyK&gt;<sp/>HaPe\", \"enemy_mmr\": 4066, \"expected_winrate\": 0.42917778277580165}, {\"time_played_at\": \"2019-12-18T16:53:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3938, \"mmr_diff\": 110, \"enemy_nickame\": \"FrozenZerg\", \"enemy_mmr\": 3828, \"expected_winrate\": 0.5714631174083814}, {\"time_played_at\": \"2019-12-20T18:17:10+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 0, \"enemy_nickame\": \"&lt;\\u01aeesXG&gt;<sp/>Rocky\", \"enemy_mmr\": 3957, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-20T18:36:11+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3935, \"mmr_diff\": -246, \"enemy_nickame\": \"utopike\", \"enemy_mmr\": 4181, \"expected_winrate\": 0.3444157777997608}, {\"time_played_at\": \"2019-12-20T18:42:21+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3955, \"mmr_diff\": -205, \"enemy_nickame\": \"Nyx\", \"enemy_mmr\": 4160, \"expected_winrate\": 0.36902597468573733}, {\"time_played_at\": \"2019-12-20T18:59:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3939, \"mmr_diff\": 53, \"enemy_nickame\": \"CapSto\", \"enemy_mmr\": 3886, \"expected_winrate\": 0.5346141487768358}, {\"time_played_at\": \"2019-12-20T19:06:55+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3959, \"mmr_diff\": -4, \"enemy_nickame\": \"&lt;TAW&gt;<sp/>Pote\", \"enemy_mmr\": 3963, \"expected_winrate\": 0.49738344991611666}, {\"time_played_at\": \"2019-12-20T19:21:46+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3937, \"mmr_diff\": 62, \"enemy_nickame\": \"Neydark\", \"enemy_mmr\": 3875, \"expected_winrate\": 0.5404681826695011}, {\"time_played_at\": \"2019-12-21T13:30:37+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3957, \"mmr_diff\": 1, \"enemy_nickame\": \"Albus\", \"enemy_mmr\": 3956, \"expected_winrate\": 0.5006541431191143}, {\"time_played_at\": \"2019-12-21T13:41:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -40, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3976, \"expected_winrate\": 0.47385811986038295}, {\"time_played_at\": \"2019-12-21T13:54:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 6, \"enemy_nickame\": \"tiwai\", \"enemy_mmr\": 3953, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-21T14:00:35+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3937, \"mmr_diff\": 180, \"enemy_nickame\": \"RXX\", \"enemy_mmr\": 3757, \"expected_winrate\": 0.6156164673184111}, {\"time_played_at\": \"2019-12-21T14:10:12+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3915, \"mmr_diff\": -92, \"enemy_nickame\": \"xYn\", \"enemy_mmr\": 4007, \"expected_winrate\": 0.44010774162905025}, {\"time_played_at\": \"2019-12-21T14:27:45+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3896, \"mmr_diff\": -15, \"enemy_nickame\": \"Stefan\", \"enemy_mmr\": 3911, \"expected_winrate\": 0.49018910701799573}, {\"time_played_at\": \"2019-12-21T16:46:23+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3918, \"mmr_diff\": -49, \"enemy_nickame\": \"Xenocide\", \"enemy_mmr\": 3967, \"expected_winrate\": 0.4679908050602201}, {\"time_played_at\": \"2019-12-21T16:49:32+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3941, \"mmr_diff\": -994, \"enemy_nickame\": \"&lt;\\u0413\\u043d\\u043e\\u043c\\u0438\\u043a&gt;<sp/>IndeX\", \"enemy_mmr\": 4935, \"expected_winrate\": 0.06908215857285668}, {\"time_played_at\": \"2019-12-22T20:55:54+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3965, \"mmr_diff\": 67, \"enemy_nickame\": \"Bingo\", \"enemy_mmr\": 3898, \"expected_winrate\": 0.5437157089668173}, {\"time_played_at\": \"2019-12-22T21:04:09+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3941, \"mmr_diff\": 61, \"enemy_nickame\": \"Jungla\", \"enemy_mmr\": 3880, \"expected_winrate\": 0.5398182558231894}, {\"time_played_at\": \"2019-12-22T21:07:48+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3918, \"mmr_diff\": -9, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3927, \"expected_winrate\": 0.4941129806268964}, {\"time_played_at\": \"2019-12-22T21:11:02+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3897, \"mmr_diff\": -51, \"enemy_nickame\": \"DeepMind\", \"enemy_mmr\": 3948, \"expected_winrate\": 0.4666881010864951}, {\"time_played_at\": \"2019-12-22T21:26:35+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3877, \"mmr_diff\": 44, \"enemy_nickame\": \"Nyxeu\", \"enemy_mmr\": 3833, \"expected_winrate\": 0.5287505638922686}, {\"time_played_at\": \"2019-12-23T16:23:00+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3897, \"mmr_diff\": 3, \"enemy_nickame\": \"IntrinsiCat\", \"enemy_mmr\": 3894, \"expected_winrate\": 0.5019624204002703}, {\"time_played_at\": \"2019-12-23T16:30:33+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3898, \"mmr_diff\": 116, \"enemy_nickame\": \"\\u00e6\\u00e6\\u00e6\", \"enemy_mmr\": 3782, \"expected_winrate\": 0.5753034142357183}, {\"time_played_at\": \"2019-12-23T16:51:19+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3873, \"mmr_diff\": 87, \"enemy_nickame\": \"Listig\", \"enemy_mmr\": 3786, \"expected_winrate\": 0.5566659882772446}, {\"time_played_at\": \"2019-12-24T11:03:44+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3892, \"mmr_diff\": 47, \"enemy_nickame\": \"&lt;W\\u00f8&gt;<sp/>poichiche\", \"enemy_mmr\": 3845, \"expected_winrate\": 0.5307060544650376}, {\"time_played_at\": \"2019-12-24T11:17:11+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3869, \"mmr_diff\": 6, \"enemy_nickame\": \"&lt;isIMBA&gt;<sp/>naincraft\", \"enemy_mmr\": 3863, \"expected_winrate\": 0.5039247803417513}, {\"time_played_at\": \"2019-12-24T11:33:55+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Protoss\", \"mmr\": 3847, \"mmr_diff\": -119, \"enemy_nickame\": \"ARCMAN\", \"enemy_mmr\": 3966, \"expected_winrate\": 0.4227798108220997}, {\"time_played_at\": \"2019-12-24T18:36:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3872, \"mmr_diff\": 8, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3864, \"expected_winrate\": 0.5052329568614776}, {\"time_played_at\": \"2019-12-24T18:53:21+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3893, \"mmr_diff\": 50, \"enemy_nickame\": \"Vakhtang\", \"enemy_mmr\": 3843, \"expected_winrate\": 0.5326606025904235}, {\"time_played_at\": \"2019-12-24T19:08:58+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3914, \"mmr_diff\": 74, \"enemy_nickame\": \"PPO\", \"enemy_mmr\": 3840, \"expected_winrate\": 0.5482559480584295}, {\"time_played_at\": \"2019-12-27T20:24:27+00:00\", \"win\": false, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3933, \"mmr_diff\": -100, \"enemy_nickame\": \"HiveMind\", \"enemy_mmr\": 4033, \"expected_winrate\": 0.4349563270554942}, {\"time_played_at\": \"2019-12-27T20:40:39+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3914, \"mmr_diff\": 0, \"enemy_nickame\": \"Racin\", \"enemy_mmr\": 3914, \"expected_winrate\": 0.5}, {\"time_played_at\": \"2019-12-27T21:24:06+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3936, \"mmr_diff\": -41, \"enemy_nickame\": \"&lt;DemuCl&gt;<sp/>Jazzz\", \"enemy_mmr\": 3977, \"expected_winrate\": 0.47320580952080993}, {\"time_played_at\": \"2019-12-28T20:58:25+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Terran\", \"mmr\": 3959, \"mmr_diff\": 22, \"enemy_nickame\": \"rOoSter\", \"enemy_mmr\": 3937, \"expected_winrate\": 0.5143871841659987}, {\"time_played_at\": \"2019-12-28T21:06:48+00:00\", \"win\": true, \"race\": \"Protoss\", \"enemy_race\": \"Zerg\", \"mmr\": 3980, \"mmr_diff\": -260, \"enemy_nickame\": \"contremaitre\", \"enemy_mmr\": 4240, \"expected_winrate\": 0.3361922887074761}]}}, {\"mode\": \"vega-lite\"});\n\n\n\n\n\n\n\n\n\n\n\nThere are a few things we can already say from this:\n\nEnemy Protosses at 4k MMR were already a large challenge, as I won no games whatsoever against those. This is, in fact, what inspired me to write this post!\nPvT was my best matchup - there are the most wins there.\nPvZ games were mostly even, though there are a good amount of lost games that I should probably have won! This seems to point to MMR not being enough to estimate my winrate properly - for example, strategical variation in Zerg play. I'm still sort of confused on what to do with a very defensive, lategame-oriented Zerg player.\n\nLet's see if our estimates were right:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndata2019.groupby('enemy_race').win.mean()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\nenemy_race\nProtoss    0.309524\nTerran     0.729167\nZerg       0.519231\nName: win, dtype: float64\n\n\n\n\n\n\n\n\n\n\n\nOuch. That PvP still hurts. Well, enough sulking! We'll get back to this point later - promise - but for nowo, let's get right to\nThe Bayesian model\u00b6The idea is going to be simple. I'm going to assume that:\n\nmy true MMR is some random number about 4k, oscillating at most 300 up and down from that number: $\\mu \\sim \\text{Normal}(4000, 300)$.\nin each game, my effective MMR is a random normal variable $\\text{MMR}n \\sim \\text{Normal}(\\mu, \\sigma)$ (where by the superscript I denote the fact that we're sampling n of these, one per game) that includes a ton of effects, some of which can be:\nthe size of my breakfast of that day\ntime of day\nenemy race\nwhether I'd exercised before (I should really start tracking that, come to think of it...)\nthe map the game is played on\n\n\nI have no idea how much my effective per-game MMR varies, so I'm just going to say the variance of MMR is going to be some positive number, and I'll assume a half-normal distribution with a scale of 100: $\\sigma \\sim \\text{HalfNormal}(100)$. Let's take a look at that distribution:\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nfrom scipy.stats import halfnorm\nx = np.linspace(0, 500)\nPDF = halfnorm(scale=100).pdf(x)\nplt.plot(x, PDF);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwhich is another way of saying \"some positive number, small-ish, probably not larger than 200\".\nOkay, but that's the MMR. We need some way of connecting that to our won and lost games! Luckily, we have the MMR_winrate formula: we know that the ladder system essentially models\neach game as a biased coin (Pro) toss (that joke is much funnier when you're the Protoss on the ladder), with the bias being equal to the estimated winrate. The probability of a coin toss giving heads is usually modelled with the Bernoulli distribution.\nLet's now go ahead and use PyMC3 to encode that into a Bayesian model:\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nimport pymc3 as pm\nimport arviz as az\n\nwith pm.Model() as bernoulli_model:\n    mmr_\u03bc = pm.Normal('\u03bc', 4000, 300)\n    mmr_\u03c3 = pm.HalfNormal('\u03c3', 100)\n    mmr = pm.Normal('MMR', mmr_\u03bc, mmr_\u03c3, shape=data2019.enemy_mmr.size)\n\n\n    \n\n\n\n\n\n\n\nNote the shape part - we sample one effective MMR for each game in the dataset. Now, we deal with calculating the expected winrates for our games:\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nwith bernoulli_model:\n    diffs = pm.Deterministic('MMR_diff', mmr - data2019.enemy_mmr)\n    p = pm.Deterministic('winrate', MMR_winrate(diffs))\n\n\n    \n\n\n\n\n\n\n\nDeterministic variables are stuff that depends in a predictable way on your random variables, once you know their values. We could skip that, but I label them as Deterministic to easily track them later.\nWe can now add the actual data using the observed keyword:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nwith bernoulli_model:\n    wl = pm.Bernoulli('win', p=p, observed=data2019.win)\n\n\n    \n\n\n\n\n\n\n\nAnd now we press the magic inference pymc3.sample button! I'll go into details on it another time (when I understand it better myself!). In a nutshell, though, sample is going to launch a few \"random walks\" (Hamiltonian simulations of particle motion, technically! Those are the details I wasn't going to explore today...) in parameter space. Ideally, these can explore a good amount of parameter value sets and find ones that fit the data well.\nI'll also wrap it in the neat arviz Bayesian visualization library.\nIf you're running this live, this is a good time to put the kettle on:\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nwith bernoulli_model:\n    bern_data = az.from_pymc3(trace=pm.sample(2000, tune=2000, chains=4))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 2 jobs)\nNUTS: [MMR, \u03c3, \u03bc]\nSampling 4 chains, 1,297 divergences: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16000/16000 [00:44<00:00, 360.37draws/s]\nThere were 927 divergences after tuning. Increase `target_accept` or reparameterize.\nThe acceptance probability does not match the target. It is 0.23962550742848526, but should be close to 0.8. Try to increase the number of tuning steps.\nThere were 119 divergences after tuning. Increase `target_accept` or reparameterize.\nThere were 249 divergences after tuning. Increase `target_accept` or reparameterize.\nThe acceptance probability does not match the target. It is 0.6604859684507034, but should be close to 0.8. Try to increase the number of tuning steps.\nThere were 2 divergences after tuning. Increase `target_accept` or reparameterize.\nThe rhat statistic is larger than 1.05 for some parameters. This indicates slight problems during sampling.\nThe estimated number of effective samples is smaller than 200 for some parameters.\n\n\n\n\n\n\n\n\n\n\n\nAaaaand everything crashed. We can take a look at these results, but they won't be pretty:\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nvar_names = ['\u03bc', '\u03c3']\naz.plot_trace(bern_data, var_names=var_names);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEach colored line represents each of the trajectories, with histograms of their values on the left, and actual (pseudo)time trajectories during the sampling on the right. As we can see, the chains don't exactly agree with each other. Divergences (vertical lines at the bottom... yeah) mean that our random walkers, or probability space particles, flew off to infinity, forgetting all about energy conservation and that kind of jazz. A model with divergences is... basically, bad. They didn't manage to sample parameters well, getting stuck in multiple regions of parameter space, with slow variations and definitely not independent steps. This completely messes up the histograms. If the chains disagree as badly as they do here, well, that's not a model to be trusted.\nWe can also look at where in particular in parameter space the model started having trouble:\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \naz.plot_pair(bern_data, var_names=var_names, divergences=True);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell, there's clearly some issues at the bottom, at low values of $\\sigma$. It is, however, kind of unhelpful.\nI don't quite understand the next part myself just yet, but as I (probably not particularly well) think of it: what people usually do in this case is decouple sampling the amplitude or variance $\\sigma$ of our estimated MMR from sampling the direction and value of each particular iteration, and from the mean itself. We treat the mean as we did before:\n$$\\mu \\sim \\text{Normal}(4000, 300)$$We'll also take the variance as usual:\n$$\\sigma \\sim \\text{HalfNormal}(100)$$What we'll also do, however, is grab a set of normal variables:\n$$\\sigma_\\text{norm}n \\sim \\text{Normal}(0, 1)$$And we'll calculate the effective MMR per game as:\n$$\\text{MMR}n = \\mu + \\sigma * \\sigma_\\text{norm}n$$This is called a noncentered formulation, and is a big deal apparently. If I'm correct, it makes exploring variations in the amplitude easier when the possibly small variations from the separate normal helper random variables are disconnected from it, and from the mean. More about this as I know more about this.\nWithout further ado, the corrected model:\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nwith pm.Model() as bernoulli_model_noncentered:\n    mmr_\u03bc = pm.Normal('\u03bc', 4000, 300)\n    mmr_\u03c3 = pm.HalfNormal('\u03c3', 100)\n    mmr_\u03c3_norm = pm.Normal('\u03c3_norm', 0, 1, shape=data2019.enemy_mmr.size)\n    \n    mmr = pm.Deterministic('MMR', mmr_\u03bc + mmr_\u03c3 * mmr_\u03c3_norm)\n    diffs = pm.Deterministic('MMR_diff', mmr - data2019.enemy_mmr)\n    p = pm.Deterministic('winrate', MMR_winrate(diffs))\n    \n    wl = pm.Bernoulli('win', p=p, observed=data2019.win)\n    \n    trace = pm.sample(2000, tune=2000, chains=4)\n    bern_noncentered_data = az.from_pymc3(\n        trace=trace,\n        prior=pm.sample_prior_predictive(),\n        posterior_predictive=pm.sample_posterior_predictive(trace),\n    )\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 2 jobs)\nNUTS: [\u03c3_norm, \u03c3, \u03bc]\nSampling 4 chains, 0 divergences: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 16000/16000 [00:20<00:00, 782.58draws/s]\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 8000/8000 [00:06<00:00, 1187.82it/s]\n\n\n\n\n\n\n\n\n\n\n\nThat seems to have worked nicely!\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nvar_names = ['\u03bc', '\u03c3']\naz.summary(bern_noncentered_data, var_names=var_names) \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      mean\n      sd\n      hpd_3%\n      hpd_97%\n      mcse_mean\n      mcse_sd\n      ess_mean\n      ess_sd\n      ess_bulk\n      ess_tail\n      r_hat\n    \n  \n  \n    \n      \u03bc\n      3972.677\n      65.433\n      3849.004\n      4094.180\n      0.550\n      0.389\n      14148.0\n      14148.0\n      14160.0\n      5935.0\n      1.0\n    \n    \n      \u03c3\n      80.602\n      60.331\n      0.018\n      188.067\n      0.787\n      0.592\n      5879.0\n      5193.0\n      5308.0\n      4121.0\n      1.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nSo my true MMR in 2019 was somewhere around 3973, with a standard deviation of ~65. A more Bayesian approach is saying that we can say with 97% (I'm not completely sure it's not 94%, because of symmetry...) certainty that the true MMR is between 3850 and 4094. That's the Highest Posterior Density - hpd - metric.\nNote how this standard deviation is an okay metric for the non-gaussian $\\mu$, but completely fails to make any sense for $\\sigma$, where I'm just going to say I'm 97% sure it's not larger than 188, with a mean of 81.\nAlso note that HPD means what it means - we're 97% (or 94%, because I'm not sure about that detail!) sure that the variable is in these bounds, according to this model. The comparable metric in frequentist statistics - the $\\chi2$ test - says... something that nobody really understands. I can find the papers on that for you if you'd like, but basically... people think it says what HPD says, and it doesn't, really.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \naz.plot_trace(bern_noncentered_data, var_names=var_names);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe chains mostly agree on the values!\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \naz.plot_pair(bern_noncentered_data, var_names=var_names, divergences=True);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also compare the prior (our assumptions) and the posterior (the results of our model):\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nfig, ax = plt.subplots()\nbern_noncentered_data.prior.MMR_diff.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Prior\");\nbern_noncentered_data.posterior.MMR_diff.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Posterior\");\nax.legend();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor the MMR difference, the distribution got peaked: which makes sense! The game doesn't usually find me opponents 500 MMR away from mine!\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nfig, ax = plt.subplots()\nbern_noncentered_data.prior.winrate.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Prior\");\nbern_noncentered_data.posterior.winrate.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Posterior\");\nax.legend();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe winrate got closer in mean to 50%, which is what the system tries to optimize for. Reasonable! Note that the prior seems to not have been all that good - it predicted a winrate of more than 50%! Could have been better, but it seems to have handled the adjustment nicely.\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nfig, ax = plt.subplots()\nbern_noncentered_data.prior.MMR.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Prior\");\nbern_noncentered_data.posterior.MMR.plot.hist(bins=200, ax=ax, density=True, alpha=0.8, label=\"Posterior\");\nax.legend();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd it definitely got more confident about my MMR being just below 4k!\n\n\n\n\n\n\n\nWhere to from here?\u00b6This was just the basic overview, and honestly - the same analysis could probably have been handled using frequentist methods. We had a good number of data points. Call .mean(), call .std(), call it a day, right?\nBut.\nSuppose I wanted to go deeper?\nRemember the point about performance varying per matchup? Well, we could find an effective MMR per race this way! Bayesian inference makes that easy. We'd have less data, as the games are split between PvT, PvZ and unfortunately PvP; but using what we know about MMR in all the matchups, we have - effectively - a prior for per-matchup data.\nThere are also more factors we could include. Maps? Sure! Game duration? Probably! And Bayesian inference makes it particularly simple to add those kinds of data in, once you figure out a reasonable assumption about how that data affects your play.  For example, for the duration, I could postulate an equal chance of winning at each time; that's a flat prior. Of course, it's going to get modified when confronted with data; and that's neat, because it lets me figure out whether I should try to avoid dragging games out, or whether I should focus more on shoring up my lacking early game play. Combine that with matchup data and you get information like \"End PvZs early or lose a ton\" - and now you've got a strong quantitative basis to support that!\nBut that's a story for another day, as I just barely made it with this post today :) I'll come back to that topic soon-ish.\nIn the meantime, if you have ideas about possible applications or questions you'd like answered, don't hesitate to leave a comment below! :)\n\n\n\n\n\n\n\n{\"state\": {}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "bayes,pymc3,python,starcraft",
      "url": "https://stanczakdominik.github.io/posts/bayes-sc2-part-1/"
    },
    {
      "title": "Dealing with backlogs",
      "text": "I have a backlog problem.\nLike probably many of you in 2020, I suffer from having too much interesting\ncontent to read, watch, listen to or play through. I've been thinking about\nways to tackle my gathering points, and I think I finally have something I'm\nwilling to share that could be useful for you as well.\n\n\nThe journey for me started with Pocket, which is basically a centralized link\ngathering service for articles you'd like to read.  I use it to dump\ninteresting links from RSS and from all over the web that I don't have a\nparticular need to read right where and when I find them. This, of course,\nvastly exceeds the number of articles I actually read. And that's fine; you\nhave to say no to a lot of content nowadays, becuse a vast amount of news\ncontent (I'm looking at you, politics!) becomes out of date pretty much\ninstantly. If you let them stew for a week or two, it often turns out you\ndidn't need to read them in the first place anyway.\nStill, my backlog has become a hoard of way too many articles to get through in\nmy lifteime. I could just set a goal of \"read 5 articles a day\", but that can\nbe easily gamed - just go through all the trash politics news you don't\nactually care about, bingo, go do something else while your backlog gently\nexpands.\nWhile reading up on Beeminder (on which you can expect another post soon-ish!),\nI found this interesting method for dealing with this issue on\nbeemind.me by Gal\nTsubery. To your backlog, you assign a numerical\nvalue calculated as\n$$ F = \\sum_{articles} \\text{Days since article was added} $$\nAnd then you try to minimize that. You can easily plug this into Beeminder to\nget easy tracking of progress on decreasing your backlog, and a deadline if you slack\noff on getting through it:\n\nThis idea is particularly neat for a few reasons:\n\nto grab these juicy drops in F, you can always remove articles you know you're not going to get to;\nreading old articles becomes the default action, and the tail end of your backlog gets filtered by the previous point to become stuff you actually care about;\nreading important new articles becomes preventive action; you stop them from growing into these huge threats;\ndeleting unimportant new articles becomes more of a habit due to 2;\nwith your experience from 4, you start paying more attention to your information diet, skipping articles that catch your attention via clickbaity articles but are going to stop being important in a fortnight's time.\n\nI liked it, so I tinkered a bit with Python, Systemd (though a cron job to run the script periodically would do) and the Beeminder web API and some neat libraries to apply the same concept to:\nTodoist\nThis tracks my old tasks (all the Julia tutorials I'm never going to get to,\nstuff I've quietly given up on over the years, etc etc):\n\nA little helper function to do the Beeminder API call is nice to have:\nimport requests\nimport os\nbeeminder_auth_token = os.environ['BEEMINDER_TOKEN']\nbeeminder_username = os.environ['BEEMINDER_USERNAME']\n\ndef increment_beeminder(desc, beeminder_goal, value=1):\n    data = {\n        \"value\": value,\n        \"auth_token\": beeminder_auth_token,\n        \"comment\": desc,\n    }\n\n    response = requests.post(\n        f\"https://www.beeminder.com/api/v1/users/{beeminder_username}/goals/{beeminder_goal}/datapoints.json\",\n        data=data,\n    )\n    return response\n\n\nAnd now we use the Todoist API to get at out tasks:\n#!/usr/bin/python\nimport datetime\nimport numpy as np\nimport dateutil\nimport dateutil.parser\nimport todoist\nimport os\nnow = datetime.datetime.now(datetime.timezone.utc)\nkey = os.environ['TODOIST_KEY']\napi = todoist.TodoistAPI(key)\napi.sync()\n\nundone_tasks = api.items.all(lambda x: not x['checked'])\ndates = [dateutil.parser.parse(task['date_added']) for task in undone_tasks]\ndeltas = [date - now for date in dates]\ntotal = -np.sum(deltas)\ntotal_days = total.days + total.seconds / 3600 / 24\n\nmessage = f\"Incremented automatically from {len(undone_tasks)} tasks at {now}\"\nincrement_beeminder(message, \"todoist-backlog\", total_days)\n\n\nYoutube videos\n\nThis took a bit of legwork because YouTube's Watch Later playlist is not\naccessible from remote API's, as I've written about\nbefore; but once you get accustomed to\nusing another playlist for you kitten vids SciPy tutorials, it's as simple\nas the following:\n#!/usr/bin/python\nimport pafy\nimport dateutil.parser\nfrom datetime import datetime, timedelta\nfrom sc2replib import increment_beeminder\nurl = \"https://www.youtube.com/playlist?list=PL8B03F998924DA45B\"  # example playlist ID\nplaylist = pafy.get_playlist(url)\n\nnow = datetime.now()\ntotal = timedelta(seconds=0)\nfor item in playlist['items']:\n    added_date = dateutil.parser.parse(item['playlist_meta']['added'])\n    total += now - added_date\n\n\ntotal_days = total.days + total.seconds / 3600 / 24\n\nmessage = f\"Incremented automatically from {len(playlist['items'])} movies at {now}\"\nincrement_beeminder(message, \"youtube-backlog-upgrade\", total_days)\n\n\nFuture work?\nI'm probably going to simplify these scripts using my Beeminder-CLI\nlibrary I've been writing recently.\nI'm also wondering about other applications of this idea:\n\nMy pubs (another piece of really cool software!) articles-to-read list is definitely the next move. They store article add dates in .yaml files, so it's going to be simple to loop over all those, filter out only the ones marked as actually to be read, then sum them up.\nI use Antennapod for podcasts, but that's Android-only and I haven't yet found a simple way to run Python scripts on mobile; even then, I have no clue how to extract podcast queue-addition dates from it.\nSteam games would be another neat idea, but I don't know if they have a library API I could read. I also don't know of any way to neatly remove a game from the immediate library. Tags could work, I guess, if they have them.",
      "tags": "python,scripting",
      "url": "https://stanczakdominik.github.io/posts/backlogs/"
    },
    {
      "title": "First JOSS review!",
      "text": "Several months ago, I stumbled upon the journal they call\nJoss. Well, actually, JOSS - the\nJournal of Open Source Software, \"a developer friendly, open access journal for\nresearch software packages\". It's a completely free,\nopen-source and open-access alternative to established,\nfor-(often-a-lot-of)-profit\njournals such as those by Reed-Elsevier or Springer.\nAnd a few days ago, I've been called into\nservice\nto review VlaPy, \"1D-1V Vlasov-Poisson(-Fokker-Planck) Plasma Physics\nSimulation Tool\". While I'm digging into that code, I thought I'd write something up about JOSS in general!\n\n\nJOSS, as a software-centric journal, is mostly managed via GitHub. Reviewers\nsign up here (which is a link\nI'd like to recommend that you follow!). It's mostly meant to solve one issue:\nResearch software attribution\nAcknowledgement and funding for developing and maintaining research software\ntends to be sparse. Remember the black hole image from last year? To quote\nAndreas Mueller on\nTwitter:\nSlightly\nironic that in the same week @NSF rejects a grant to\nfund the scipy ecosystem saying that working on it is not impactful enough and\nhiring developers to work on it is too expensive. Cc @thisgreyspirit\n(Katie doesn't seem to be on Twitter?)\u2014 Andreas Mueller\n(@amuellerml) April\n14, 2019 \nTo counteract that, scientific developers tend to chase exciting new results\nthat accompany new releases of their software. However, that often leads to\n\"more software\" instead of \"better and more stable software\".\nAs for attribution, citations are everything in the current (rather flawed, in\nmy opinion - I'm not ready with a pull request just yet, though) system of\nevaluation of scientific work. Package authors tend to try to write books about\ntheir works that are then cited. This seems to have improved in the recent years,\nbut I distinctly remember that most __citation__ atributes for packages in the\nPythonosphere were books a while ago. Getting software that \"just works\" and \nsimplifies your life published, from what I've heard, can be difficult if not\naccompanied by a \"novel\" result.\nJOSS is sort of a hack on this\nsystem -\nit allows for software to be thoroughly reviewed and appreciated for its own merits.\nOf course, it's not a permanent solution; but I'm going to leave deliberating on another one\nfor another time :)",
      "tags": "open-science,science,status",
      "url": "https://stanczakdominik.github.io/posts/first-joss-review/"
    },
    {
      "title": "Recent happenings",
      "text": "Just grasshopper noise since February, huh? There goes my new year's resolution.\n\n\nI do have good news, though. Work is going well, I managed to move despite the\npandemic, which comes with much more peace and quiet, my master's thesis is\ncoming along nicely, university work is stabilizing and I intend to write a\nseries of posts on applying Bayesian inference to stellarator data, which is\nnice.\n\nI've also started reading the docs for scipy, because I realized a problem\nthat seems to exist everywhere. Everyone's replicating their functionality.\nPeople you consider great programmers will still be spending their valuable\ntime personally implementing functionality that would have been handled with a\nsimple from scipy import thing in a much more bug-free, verified and\nuniversal way, simply because scipy is so large that few people are actually\naware of their full functionality.\nI don't mean to rip on scipy in any way, here, but I'm just stating an issue\nthat I don't see people addressing - more educational work is needed.\nI found the pdf for the current version's docs, put it on my Kindle, managed to\nrun it (poor old thing is choking under the weight of all those pretty plots),\nand...  had to skip ~250 pages of release notes.\n\nAlso, Nick Murphy of PlasmaPy fame recommended Clean Code to me and it turns\nout to be a neat book.\n\nAnd... that's about all I have for now. Coming next, and soon: a return to our more\nregularly scheduled, technical programming!",
      "tags": "status",
      "url": "https://stanczakdominik.github.io/posts/recent-happenings/"
    },
    {
      "title": "Export YouTube's Watch Later playlist",
      "text": "YouTube is increasingly becoming a walled garden. One of the dark patterns I see in it is that the Watch Later playlist, which you may have gathered over what feels like a millenia (so many lectures, so little time...), cannot be exported - you can only add one video at a time to another playlist. That obviously doesn't scale. Here's a quick trick to solve that!\n\nTake this URL:\nhttps://www.youtube.com/playlist?list=WL\n\nAppend &disable_polymer=true to it:\nhttps://www.youtube.com/playlist?list=WL&disable_polymer=true\n\nAnd this should bring you to an older version of the website, where if you click the 3-dot \"More\" menu, you'll find an \"Add all to...\" button. This allows you to export your Watch Later playlist to another playlist, without the annoying limitations. Once you're there, you can use better software (NewPipe, for example, or another solution from the many available) to store the playlist elsewhere. I did not investigate those, as I simply wanted to mirror my Watch Later playlist in NewPipe.\nSadly, the same method does not work for the Liked Videos page - which is why you should probably not trust YouTube with your data as much as you likely do now.",
      "tags": "tech,youtube",
      "url": "https://stanczakdominik.github.io/posts/youtube-watch-later-export.rst/"
    },
    {
      "title": "Self-organized criticality - student project post-mortem",
      "text": "We just got finished with our student team project, which you can find here, and I thought I'd do a little post mortem on it.\nIt's a neat little project that implements various simulations of self organized criticality on 2D grids. What is self organized criticality, you might ask? Dunno, I can't tell you.\nAll right, I do know a little. Imagine the ising system I've written about before. In the version without an external magnetic field, it has a single important parameter that we can set - the temperature. If you sweep through the values of temperature, you can find a single point where the behavior of the system changes qualitatively - order wins over disorder at temperatures below roughly 2.72 in reasonable [set everything to 1] units. Near that value - at criticality - you get large scale behavior, huge fluctuations, exponential slowdowns, etc.\nSelf organized criticality, as I currently understand it, is basically that, except that as you run your simulation, you realize that it displays criticality for a wide range of parameters (here - temperature). To quote Wikipedia (emphasis mine):\n\nthe complexity observed emerged in a robust manner that did not depend on finely tuned details of the system: variable parameters in the model could be changed widely without affecting the emergence of critical behavior: hence, self-organized criticality.\n\n\nHere's an example, a simulation of forest fire (yellow being fire, green being trees, and purple being ash, from which trees can regrow):\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \nimport SOC\nmodel = SOC.Forest(L=100, f=0.0001)  # f being probability of lightning strike\nmodel.run(500, wait_for_n_iters=500)\nmodel.animate_states(notebook=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nWaiting for wait_for_n_iters=500 iterations before collecting data. This should let the system thermalize.\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(FloatProgress(value=0.0, max=1000.0), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n  \n  Your browser does not support the video tag.\n\n\n\n\n\n\n\n\n\n\n\nWhat we did look for from a practical standpoint in our simulations was power law scaling of the number of iterations for each avalanche in a system, of avalanche size... and we did find that!\nHere's another model we implemented, called the Manna model:\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nmanna = SOC.Manna(L=30)\nmanna.run(500, wait_for_n_iters = 500)\nmanna.animate_states(notebook=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nWaiting for wait_for_n_iters=500 iterations before collecting data. This should let the system thermalize.\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(FloatProgress(value=0.0, max=1000.0), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n  \n  Your browser does not support the video tag.\n\n\n\n\n\n\n\n\n\n\n\nThis deserves a bit of a longer runtime:\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nmanna_long = SOC.Manna(L=30, save_every = 100)\nmanna_long.run(50000, wait_for_n_iters = 20000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nWaiting for wait_for_n_iters=20000 iterations before collecting data. This should let the system thermalize.\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(FloatProgress(value=0.0, max=70000.0), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nmanna_long.get_exponent(low = 10, high=100)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\ny = 23317.107 exp(-1.3904 x)\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\n{'exponent': -1.3903903386497791, 'intercept': 4.367674673827714}\n\n\n\n\n\n\n\n\n\n\n\nYou can find the project on GitHub here.\nApparently, SOC has applications basically everywhere, but I haven't dug into those yet. There's are two articles on my to-read list that relate SOC to ELMs in fusion reactors and turbulent transport. I might do writeups on those in a later post.\n\n\n\n\n\n\n\n{\"state\": {\"006b18c4c02342dfba52f998a3088784\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_55e29d51dcbf49e4b3caffd03d945c6d\", \"IPY_MODEL_42a7aaa693d74bef89f1ced1403c62cc\"], \"layout\": \"IPY_MODEL_106ee5af82714c3fabbbb28ed368bf89\"}}, \"0138097c811249b19696b584d781b183\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"047bfc9894ff4f7ead3d90593781153d\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"0569bc1e611a43378476986a15f5a9e9\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"06c15915e7064e86b36cc7274f62652d\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"074284f3605e4889a7625906e8763bc9\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_bd0d13cfda43478da6eb446c72b8f9ff\", \"max\": 3000, \"style\": \"IPY_MODEL_1356cf834bc14a49b10e76cb0547d75c\", \"value\": 3000}}, \"075b2abaa458428ab925795dd5fbbb33\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_8973176204974eda88cc6602f6885adc\", \"IPY_MODEL_abe49ced1add428eb5ac5aafc08c58e3\"], \"layout\": \"IPY_MODEL_498901bec88540ed851b9c33c62b4917\"}}, \"07af14b253a844a3ad063523f0e2d180\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_bdb3f76b77ab4c5da94476049124a9b2\", \"IPY_MODEL_7e64df1ad5774e9c8d970d1d0cc1cdb1\"], \"layout\": \"IPY_MODEL_1e62455cbf3c4274b9f14e364b8fe516\"}}, \"0b752a853f5949ecabae0def17cef1f1\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"0ce8d7f5054640839b72f4f03b87f34f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"106ee5af82714c3fabbbb28ed368bf89\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"1356cf834bc14a49b10e76cb0547d75c\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"17a5d153712849eab6aa590553a305f1\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_bce90aa97e7a451296ce5a420ce42158\", \"max\": 1000, \"style\": \"IPY_MODEL_0b752a853f5949ecabae0def17cef1f1\", \"value\": 1000}}, \"184c5100ce7c492d9bd4fc22f4fe6ebd\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"189c40cc24624b4593db2b5ea051233f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"191fa70cd5a7456390b8efa1e2199812\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"1b2c44c72d5f44f0b7c114002f5b773c\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"1c47301615ed49f9880e367125f63d8f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"1e62455cbf3c4274b9f14e364b8fe516\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"1e6c857f9c2744b5bfa64ea94d144143\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_074284f3605e4889a7625906e8763bc9\", \"IPY_MODEL_d7134c4df0fa46588a08f33c75a91d98\"], \"layout\": \"IPY_MODEL_3f283d13eb0b4a71bf8e95e8cf8b894b\"}}, \"1f3b883315a4452698312c0eddc0cb6e\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_747478bcf38540c0a022638b1fe4f1bb\", \"IPY_MODEL_b8911b09f9734aa8b7c80e403b5dffd2\"], \"layout\": \"IPY_MODEL_e49c91459c1b4b67a4a6981fe1ad799b\"}}, \"261cdf09822f499ab14559eb8ee0ac7a\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"299832094d474726994bf38d140a53f7\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_0138097c811249b19696b584d781b183\", \"style\": \"IPY_MODEL_ddf7b57700194116a9ace472fe2ad396\", \"value\": \" 1356/3000 [00:40&amp;lt;00:22, 72.01it/s]\"}}, \"2a3a50badad64fc790ae6bbeefec28f2\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_5fe4890ee76c40b79680414a30f69286\", \"max\": 1000, \"style\": \"IPY_MODEL_aa924e9d7b7449bdb39cd87d953cf1b9\", \"value\": 1000}}, \"2de7da3d53264768972844147be16644\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"2f095a594c614661b537260781fb6690\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"32b97edc054042818237c17259222c6e\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"34203a88540742df89a1949a388ad86b\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"34594a065c6947a6a6140f8e28658bbb\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_aced2c4149ac4666b843b7ea60695d9f\", \"style\": \"IPY_MODEL_32b97edc054042818237c17259222c6e\", \"value\": \" 7000/7000 [21:59&amp;lt;00:00,  5.30it/s]\"}}, \"377c0371d7bf441ba0f78627af6802bb\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"379aa2cf88e5419fab61ae62e4cba5ae\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_db4667078171470daf14664eabe46a9d\", \"IPY_MODEL_ca854c0886404a5983899da0367b2411\"], \"layout\": \"IPY_MODEL_047bfc9894ff4f7ead3d90593781153d\"}}, \"382b3160cd184b88b2b1e7bc21fe01f4\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"danger\", \"description\": \" 50%\", \"layout\": \"IPY_MODEL_f38de1c1fc244361b4da1c06e2bb6820\", \"max\": 7000, \"style\": \"IPY_MODEL_c36ec375acd04449bc03ef3511f7411a\", \"value\": 3487}}, \"39465a4df1804691bbcd05be4302e540\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_4b289665ef7d48f4b5d47c2ac89351b0\", \"max\": 7000, \"style\": \"IPY_MODEL_41c19320636e402792842481ebf9f7de\", \"value\": 7000}}, \"3b5de5be432a4ba881fe1619d394735b\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_2a3a50badad64fc790ae6bbeefec28f2\", \"IPY_MODEL_c12389b37057489398bf585709aa47f0\"], \"layout\": \"IPY_MODEL_189c40cc24624b4593db2b5ea051233f\"}}, \"3f283d13eb0b4a71bf8e95e8cf8b894b\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"3f4ec7240b464c93b12801deb235f287\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_cc239cd7b8474442a54dfa08ab834d55\", \"IPY_MODEL_a6183030748c4d1dbb9b84f38d07c18e\"], \"layout\": \"IPY_MODEL_1c47301615ed49f9880e367125f63d8f\"}}, \"41c19320636e402792842481ebf9f7de\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"42a7aaa693d74bef89f1ced1403c62cc\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_0ce8d7f5054640839b72f4f03b87f34f\", \"style\": \"IPY_MODEL_f7b64aeaa7254a5db767db15d3bfea16\", \"value\": \" 799/7000 [00:21&amp;lt;00:39, 155.49it/s]\"}}, \"463cd1b0113b49af93ef2667f10431fd\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"4946fe208cb247308142b537f9fd5534\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"498901bec88540ed851b9c33c62b4917\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"4a2cc885f95d4c29a81f4562cb008bbd\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"4b289665ef7d48f4b5d47c2ac89351b0\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"4da1520e561740d78e3ab2632098a499\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"4fffd6b5e980482790ee0a9dab6bc9bd\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"5217380f7a184cafa172c1a137ed548d\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"55e29d51dcbf49e4b3caffd03d945c6d\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"danger\", \"description\": \" 11%\", \"layout\": \"IPY_MODEL_261cdf09822f499ab14559eb8ee0ac7a\", \"max\": 7000, \"style\": \"IPY_MODEL_4946fe208cb247308142b537f9fd5534\", \"value\": 799}}, \"58ae756ce2934e5180ebc47611436469\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"594c0b04a9364936ba3c2cd13734238c\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_382b3160cd184b88b2b1e7bc21fe01f4\", \"IPY_MODEL_9fd80264c4924dd49bec0c09f7f6a317\"], \"layout\": \"IPY_MODEL_4da1520e561740d78e3ab2632098a499\"}}, \"5c114bcb16ab4ea0919443672a2850af\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"5d1e5c17167a484d83ec5dcaa82d80a3\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"5e843d602439474a8cbae2dc06dfecf7\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"5f36d2930a6a46d3b571a8cdc8fc5e67\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_fa9733b5044d4c709c3ce303c7a135b9\", \"style\": \"IPY_MODEL_a710fc188cac48e8ac45d76aaca54331\", \"value\": \" 2204/7000 [00:25&amp;lt;00:28, 170.37it/s]\"}}, \"5fe4890ee76c40b79680414a30f69286\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"61d8e36606e34b9b813394907b31a6ff\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_a4e4f6e0503d4def874f67e49b576bb0\", \"style\": \"IPY_MODEL_0569bc1e611a43378476986a15f5a9e9\", \"value\": \" 1000/1000 [07:00&amp;lt;00:00,  2.38it/s]\"}}, \"62f85150290d49e8ab40a922e4b5cf5d\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"danger\", \"description\": \" 45%\", \"layout\": \"IPY_MODEL_8de5a2293dd34e7787c397b03eb634dd\", \"max\": 3000, \"style\": \"IPY_MODEL_2f095a594c614661b537260781fb6690\", \"value\": 1356}}, \"634f07da3baf4fc58bf8da8445fcf40a\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"65597a2efbb744ab951f6d3264d7603d\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"658118b4c87f4dac9912185a33bb1cb1\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_ceb2725427d84bba8d73e886f5acfd60\", \"IPY_MODEL_5f36d2930a6a46d3b571a8cdc8fc5e67\"], \"layout\": \"IPY_MODEL_8faa5aef545347978ac0049b31f44b09\"}}, \"68db20a4c1f74e809ee745c82f6447fc\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"692eb903b20842868b332365b4f9ac85\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"69652e460993413abadd4e00e7553820\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_39465a4df1804691bbcd05be4302e540\", \"IPY_MODEL_34594a065c6947a6a6140f8e28658bbb\"], \"layout\": \"IPY_MODEL_06c15915e7064e86b36cc7274f62652d\"}}, \"6a90b793bd0b441997e7a34c3396639b\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"70dcc4fe6c68466ba99c09bb483058ea\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_b30be6d58684487284ea5d3f497d07b9\", \"max\": 70000, \"style\": \"IPY_MODEL_e25ed7033e7c43b08f172412e3722c99\", \"value\": 70000}}, \"747478bcf38540c0a022638b1fe4f1bb\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_9f8d12e6d9a143f78281317b204191ac\", \"max\": 1000, \"style\": \"IPY_MODEL_5e843d602439474a8cbae2dc06dfecf7\", \"value\": 1000}}, \"789bc656b13a46acb7599757674ec39b\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_cfaddec7cff641c88656c8a63f1c7bca\", \"style\": \"IPY_MODEL_34203a88540742df89a1949a388ad86b\", \"value\": \" 1000/1000 [03:27&amp;lt;00:00,  4.83it/s]\"}}, \"7bef3a7af44a4cd3b0f50a924aebc344\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"7e64df1ad5774e9c8d970d1d0cc1cdb1\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_8a9177dda6d641cc94a1e07b37ad558d\", \"style\": \"IPY_MODEL_5c114bcb16ab4ea0919443672a2850af\", \"value\": \" 7000/7000 [01:35&amp;lt;00:00, 73.68it/s]\"}}, \"86508994c5f54d10bcbe2f60a17ebac8\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_62f85150290d49e8ab40a922e4b5cf5d\", \"IPY_MODEL_299832094d474726994bf38d140a53f7\"], \"layout\": \"IPY_MODEL_cec1e4b76a004af79536529e98337056\"}}, \"88d83fe4ef644715b9116e1ba418abc7\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_d77e08e4572f467b9ac3df83a90a3079\", \"style\": \"IPY_MODEL_5d1e5c17167a484d83ec5dcaa82d80a3\", \"value\": \" 70000/70000 [00:22&amp;lt;00:00, 3118.56it/s]\"}}, \"8973176204974eda88cc6602f6885adc\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_7bef3a7af44a4cd3b0f50a924aebc344\", \"max\": 1000, \"style\": \"IPY_MODEL_e71def60f0f74754ab0b459b6b04a0d1\", \"value\": 1000}}, \"8a9177dda6d641cc94a1e07b37ad558d\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"8de5a2293dd34e7787c397b03eb634dd\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"8faa5aef545347978ac0049b31f44b09\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"9823f91a8e2d499e8b655af0a08de3f0\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"9a40b297eb504c29af28725f28dc7ea5\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_70dcc4fe6c68466ba99c09bb483058ea\", \"IPY_MODEL_88d83fe4ef644715b9116e1ba418abc7\"], \"layout\": \"IPY_MODEL_191fa70cd5a7456390b8efa1e2199812\"}}, \"9b5fcbe152954465b4f393ead02f1bd0\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"9dff614886be46db8c9c9b4371a39611\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_c23e8ae7a285447a9e735450c03d6f1a\", \"IPY_MODEL_789bc656b13a46acb7599757674ec39b\"], \"layout\": \"IPY_MODEL_ff557540e3b3492c95da011774d80d85\"}}, \"9f8d12e6d9a143f78281317b204191ac\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"9fd80264c4924dd49bec0c09f7f6a317\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_6a90b793bd0b441997e7a34c3396639b\", \"style\": \"IPY_MODEL_eda1f91c3f29491faf846070e9639529\", \"value\": \" 3487/7000 [05:35&amp;lt;07:29,  7.82it/s]\"}}, \"a4e4f6e0503d4def874f67e49b576bb0\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"a6183030748c4d1dbb9b84f38d07c18e\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_f233a8d7ec564fc8b43bc33282591fbc\", \"style\": \"IPY_MODEL_c2a7636b38074a239e7a42268b38819e\", \"value\": \" 1000/1000 [01:29&amp;lt;00:00, 11.14it/s]\"}}, \"a710fc188cac48e8ac45d76aaca54331\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"a73dfd1728ad46bab131d898b1b2f707\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"a97a15f37cfc4adb9b9adf2eb0d4ba37\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HBoxModel\", \"state\": {\"children\": [\"IPY_MODEL_17a5d153712849eab6aa590553a305f1\", \"IPY_MODEL_61d8e36606e34b9b813394907b31a6ff\"], \"layout\": \"IPY_MODEL_4fffd6b5e980482790ee0a9dab6bc9bd\"}}, \"aa924e9d7b7449bdb39cd87d953cf1b9\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"abe49ced1add428eb5ac5aafc08c58e3\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_ee1af763315a4a4db555a4d183872a5f\", \"style\": \"IPY_MODEL_5217380f7a184cafa172c1a137ed548d\", \"value\": \" 1000/1000 [02:31&amp;lt;00:00,  6.60it/s]\"}}, \"aced2c4149ac4666b843b7ea60695d9f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"b0b69ab477ca403495ab06145aa8b695\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"b179e2a7d1dc41faab9b4ddbc962dd1f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"b30be6d58684487284ea5d3f497d07b9\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"b8911b09f9734aa8b7c80e403b5dffd2\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_9823f91a8e2d499e8b655af0a08de3f0\", \"style\": \"IPY_MODEL_bb9ab0ea458d4b79adf49d095ffeea49\", \"value\": \" 1000/1000 [01:00&amp;lt;00:00, 16.64it/s]\"}}, \"bb9ab0ea458d4b79adf49d095ffeea49\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"bce90aa97e7a451296ce5a420ce42158\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"bd0d13cfda43478da6eb446c72b8f9ff\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"bdb3f76b77ab4c5da94476049124a9b2\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_68db20a4c1f74e809ee745c82f6447fc\", \"max\": 7000, \"style\": \"IPY_MODEL_2de7da3d53264768972844147be16644\", \"value\": 7000}}, \"c12389b37057489398bf585709aa47f0\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_184c5100ce7c492d9bd4fc22f4fe6ebd\", \"style\": \"IPY_MODEL_463cd1b0113b49af93ef2667f10431fd\", \"value\": \" 1000/1000 [03:24&amp;lt;00:00,  4.90it/s]\"}}, \"c23e8ae7a285447a9e735450c03d6f1a\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_b179e2a7d1dc41faab9b4ddbc962dd1f\", \"max\": 1000, \"style\": \"IPY_MODEL_9b5fcbe152954465b4f393ead02f1bd0\", \"value\": 1000}}, \"c2a7636b38074a239e7a42268b38819e\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"c36ec375acd04449bc03ef3511f7411a\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"ca854c0886404a5983899da0367b2411\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_692eb903b20842868b332365b4f9ac85\", \"style\": \"IPY_MODEL_4a2cc885f95d4c29a81f4562cb008bbd\", \"value\": \" 1000/1000 [01:07&amp;lt;00:00, 14.92it/s]\"}}, \"cc239cd7b8474442a54dfa08ab834d55\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_f14755f2fc7a4861a75e6ece92b50070\", \"max\": 1000, \"style\": \"IPY_MODEL_377c0371d7bf441ba0f78627af6802bb\", \"value\": 1000}}, \"ceb2725427d84bba8d73e886f5acfd60\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"danger\", \"description\": \" 31%\", \"layout\": \"IPY_MODEL_1b2c44c72d5f44f0b7c114002f5b773c\", \"max\": 7000, \"style\": \"IPY_MODEL_a73dfd1728ad46bab131d898b1b2f707\", \"value\": 2204}}, \"cec1e4b76a004af79536529e98337056\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"cfaddec7cff641c88656c8a63f1c7bca\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"d7134c4df0fa46588a08f33c75a91d98\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"HTMLModel\", \"state\": {\"layout\": \"IPY_MODEL_634f07da3baf4fc58bf8da8445fcf40a\", \"style\": \"IPY_MODEL_b0b69ab477ca403495ab06145aa8b695\", \"value\": \" 3000/3000 [03:32&amp;lt;00:00, 14.12it/s]\"}}, \"d77e08e4572f467b9ac3df83a90a3079\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"db4667078171470daf14664eabe46a9d\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"FloatProgressModel\", \"state\": {\"bar_style\": \"success\", \"description\": \"100%\", \"layout\": \"IPY_MODEL_58ae756ce2934e5180ebc47611436469\", \"max\": 1000, \"style\": \"IPY_MODEL_65597a2efbb744ab951f6d3264d7603d\", \"value\": 1000}}, \"ddf7b57700194116a9ace472fe2ad396\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"e25ed7033e7c43b08f172412e3722c99\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"e49c91459c1b4b67a4a6981fe1ad799b\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"e71def60f0f74754ab0b459b6b04a0d1\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"ProgressStyleModel\", \"state\": {\"description_width\": \"initial\"}}, \"eda1f91c3f29491faf846070e9639529\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"ee1af763315a4a4db555a4d183872a5f\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"f14755f2fc7a4861a75e6ece92b50070\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"f233a8d7ec564fc8b43bc33282591fbc\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"f38de1c1fc244361b4da1c06e2bb6820\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"f7b64aeaa7254a5db767db15d3bfea16\": {\"model_module\": \"@jupyter-widgets/controls\", \"model_module_version\": \"1.5.0\", \"model_name\": \"DescriptionStyleModel\", \"state\": {\"description_width\": \"\"}}, \"fa9733b5044d4c709c3ce303c7a135b9\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}, \"ff557540e3b3492c95da011774d80d85\": {\"model_module\": \"@jupyter-widgets/base\", \"model_module_version\": \"1.2.0\", \"model_name\": \"LayoutModel\", \"state\": {}}}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "ising,projects",
      "url": "https://stanczakdominik.github.io/posts/self-organized-criticality-student-project-post-mortem/"
    },
    {
      "title": "Update on the year 2019",
      "text": "2019 has been a weird year.\nI don't feel like it's been all too good for my mental health, as I've definitely experienced burnout, mayhaps even depression. Suffice to say, the lows were low. I feel a bit like I procrastinated all there was to procrastinate.\nIt wasn't all bad, though - I'd say it was right up there in my top 25.\nIn trying to get some more work-life balance, I did get back to playing StarCraft - I'd cut it out of my life previously, along with all gaming - but I figured I do need some of that competitive drive in my life, and I still think there's a lot it can still teach me. You wouldn't drop chess from your life if you were passionate about it, right? So far, it's been treating me all right.\nAt the start of December, I started a research software job at the Institute for Plasma Physics and Laser Microfusion here in Warsaw, Poland! This is also where I'll be writing and developing my master's thesis, related to Bayesian inference for plasma diagnostics on Wendelstein 7-x, using Python and more specifically PyMC3. A step forwards for modern, open, reproducible and maintainable science software! At least, I hope so. :)\nI was planning on putting some photos, stats etc here, but I haven't found the time to get to do those yet (remember all that procrastination? Yeah, it's coming back to bite me in the predictive posterior), and Matthew Rocklin says I should write shorter blog posts more frequently, anyway, and that sounds like good advice.\nThus, to  get this out the door more quickly... onwards to 2020!",
      "tags": "status",
      "url": "https://stanczakdominik.github.io/posts/update-on-the-year-2019/"
    },
    {
      "title": "Better Numba calculation of inter-particle distance matrices",
      "text": "Recently, I've been looking for efficient ways to compute a distance matrix in Python. I'm deliberately trying to implement a naive n-body simulation so as to find optimized ways of calculating those, as practice. Let's do that using Numba.\n\nAs usual, we're going to be using the standard Python scientific stack... and we'll also use Numba, transitioning onto the GPU next week. Let's get those imports prepped:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport scipy, scipy.spatial\nimport numba\nimport sys\nnp.__version__, scipy.__version__, numba.__version__, sys.version\nfrom numpy.testing import assert_allclose\n\n\n    \n\n\n\n\n\n\n\nLet's get ourselves some sample 3D position data, for twenty thousand particles:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nN = int(1e4)\nnp.random.seed(743)\nr = np.random.random(size=(N, 3))\nr\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\narray([[0.83244056, 0.94442527, 0.57451672],\n       [0.09049263, 0.08428888, 0.43300003],\n       [0.29973189, 0.11463598, 0.27817412],\n       ...,\n       [0.49628111, 0.1462252 , 0.18381982],\n       [0.80535628, 0.07900376, 0.19831322],\n       [0.75236151, 0.02655101, 0.54791037]])\n\n\n\n\n\n\n\n\n\n\n\nPart I: CPU distance matrix calculations\u00b6Let's start out by following up on the 2013 results of Jake Vanderplas:\nDirect numpy summation\u00b6This is the classic approach, but with a major flaw - it allocates a lot of temporary arrays in the meantime, and that takes a while.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndef pairwise_numpy(X):\n    \"\"\"\n    Reproduced from https://jakevdp.github.io/blog/2013/06/15/numba-vs-cython-take-2/\n    \"\"\"\n    return np.sqrt(((X[:, None, :] - X) ** 2).sum(-1))\npairwise_numpy_timing = %timeit -o pairwise_numpy(r)\npairwise_numpy_result = pairwise_numpy(r)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n5.02 s \u00b1 43.5 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\n\n\n\n\n\n\n\n\n\n\nIt's nice to have it for comparison, though.\nDirect (slow) Python loop\u00b6We'll now switch over to doing things Numba-style. This means that we'll use math instead of numpy, so that the $\\sqrt{x}$ we'll doing is explicitly a scalar operation.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nimport math\ndef scalar_distance(r, output):\n    N, M = r.shape\n    for i in range(N):\n        for j in range(N):\n            tmp = 0.0\n            for k in range(M):\n                tmp += (r[i, k] - r[j, k])**2\n            output[i,j] = math.sqrt(tmp)\noutput = np.zeros((N, N), dtype=float)\n\n\n    \n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n# warning: LONG\ndirect_summation_timeit = %timeit -o -n1 -r1 scalar_distance(r, output)\n\n# sanity check!\nassert_allclose(pairwise_numpy_result, output)\n\nprint(f\"The direct summation implementation is {direct_summation_timeit.average / pairwise_numpy_timing.average:.2f} slower than NumPy.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n4min 6s \u00b1 0 ns per loop (mean \u00b1 std. dev. of 1 run, 1 loop each)\nThe direct summation implementation is 49.11 slower than NumPy.\n\n\n\n\n\n\n\n\n\n\n\nAnd now, let's simply wrap this in numba.njit.\nNote that the below is equivalent to\n@numba.njit\ndef scalar_distance(...):\n    ...\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nnumba_jit_scalar_distance = numba.njit(scalar_distance)\nnumba_jit_timing = %timeit -o numba_jit_scalar_distance(r, output)\n\nassert_allclose(pairwise_numpy_result, output)\n\nprint(f\"Our Numba implementation is {pairwise_numpy_timing.average/numba_jit_timing.average:.2f} times faster than NumPy!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n408 ms \u00b1 16.1 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nOur Numba implementation is 12.31 times faster than NumPy!\n\n\n\n\n\n\n\n\n\n\n\nNot bad! But we can still get speedups by replacing range with numba.prange, which tells Numba that \"yes, this loop is trivially parallelizable\". To do so we use the parallel=True flag to njit:\nOptimal numba solution\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n@numba.njit(parallel=True)\ndef numba_jit_scalar_distance_parallel(r, output):\n    N, M = r.shape\n    for i in numba.prange(N):\n        for j in numba.prange(N):\n            tmp = 0.0\n            for k in range(M):\n                tmp += (r[i, k] - r[j, k])**2\n            output[i,j] = math.sqrt(tmp)\n\nnumba_jit_parallel_timing = %timeit -o numba_jit_scalar_distance_parallel(r, output)\n\nassert_allclose(pairwise_numpy_result, output)\n\nprint(f\"Using `parallel=True` grants us a further {numba_jit_timing.average/numba_jit_parallel_timing.average:.2f}x speedup.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n105 ms \u00b1 5.98 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\nUsing `parallel=True` grants us a further 3.90x speedup.\n\n\n\n\n\n\n\n\n\n\n\nNote that I've got four cores on this laptop, so this problem is truly trivially parallelilzable. This is nice because numba.prange is actually a no-op when not using it from within numba:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndef scalar_distance_prange(r, output):\n    N, M = r.shape\n    for i in numba.prange(N):\n        for j in numba.prange(N):\n            tmp = 0.0\n            for k in range(M):\n                tmp += (r[i, k] - r[j, k])**2\n            output[i,j] = math.sqrt(tmp)\n\ndirect_summation_prange_timeit = %timeit -o -n1 -r1 scalar_distance_prange(r, output)\nassert_allclose(pairwise_numpy_result, output)\nprint(f\"{direct_summation_prange_timeit.average:.5f}s vs {direct_summation_timeit.average:.5f}s.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n4min 2s \u00b1 0 ns per loop (mean \u00b1 std. dev. of 1 run, 1 loop each)\n242.71444s vs 246.70353s.\n\n\n\n\n\n\n\n\n\n\n\nIt's something you can just throw in \"for free\", lets you debug stuff just as easily, and once you end up turning on parallel = True, it lets speed ups kick in.\nHowever, suppose we wanted to have this run really fast. What we then could do is turn to the GPU. And this is exactly what we'll be doing next week!",
      "tags": "nbody,numba,python,simulation",
      "url": "https://stanczakdominik.github.io/posts/distance-matrix-numba/"
    },
    {
      "title": "Simple Binder usage with Sphinx-Gallery through Jupytext",
      "text": "It's been a busy week for PlasmaPy. I recently found out about Binder support in sphinx-gallery. The latter is a package that we use to\nturn python scripts with comments into Sphinx pages and Jupyter Notebooks. I figured adding that could be a nice fit for our existing example gallery .\nHowever, I quickly realized that the system in place is a bit unwieldy. Binder takes a link to an existing GitHub repository and executes .ipynb notebooks located there online. However, with sphinx-gallery, we don't have those notebooks in the repository - we have .py files with comments. The currently recommended way of setting this up with sphinx-gallery is keeping your built documentation in another repository and hosting it via something along the lines of GitHub Pages rather than ReadTheDocs, which we are currently using.\nI added the results of this investigation to sphinx-gallery's docs, but I didn't want to switch away from RTD, so I figured I'd go ahead and find another way. I think I've got something that works well enough now!\nTrigger warning: later on during this post, there may be monkeypatching of sphinx_gallery internals. Beware.\n\n\nUsing Jupytext\nThe Jupytext project is kind of like nbconvert, but two-way. It lets you turn notebooks into scripts and vice versa. The interesting thing is that, as per Jupytext's documentation, it is possible to let Binder's jupyter instance parse sphinx-gallery style .py files as jupyter notebooks. This was done in PlasmaPy#656 . First, let's instruct the in-binder Jupyter instance to parse .py files in .jupyter/jupyter_notebook_config.py via blatant copy-paste:\nc.NotebookApp.contents_manager_class = \"jupytext.TextFileContentsManager\"\nc.ContentsManager.preferred_jupytext_formats_read = \"py:sphinx\"\nc.ContentsManager.sphinx_convert_rst2md = True\n\nAnd then let's also add a binder/requirements.txt file that lets Binder know what Python packages to download while building the repository's image. The version I had there was pretty shoddy, as CI/setup.py/packaging errors surfaced while I was tinkering with this. Long story short, something like this should do:\n-r ../requirements/automated-documentation-tests.txt\njupytext\n.\n\nWhere, in didactic order:\n\njupytext should be pretty self-explanatory,\n. is the repository's package itself (here, PlasmaPy), as accessed by setup.py\n-r ../requirements/automated-documentation-tests.txt reads a pip requirements file specifying our documentation requirements. I think with a proper extras_require specified in setup.py, these two lines could be collapsed simply into .[dev] or some such. Note that -r takes a path relative to the file, thus the ../\n\nAt this point all this really is is implementing what's mentioned in Jupytext's docs. The result is as follows:\n\nBut you might notice an inconsistency in the Sphinx-rendered gallery itself: even if we were to configure docs to display Binder links they will point to a path as imagined by the current implementation in Sphinx-Gallery, such as:\nhttps://gke.mybinder.org/v2/gh/PlasmaPy/PlasmaPy/master?filepath=plasmapy/examples/auto_examples/plot_physics.ipynb\n\nNote the spurious auto_examples directory supposedly including an .ipynb file. This obviously doesn't work for our use case, so we'd like to be able to change the generated links somehow...\n\n\nMonkeypatching\nThis (or rather, PlasmaPy#658 ) is where it gets dirty. The solution developed in cooperation with Stuart Mumford (of SunPy fame, who contributed the idea which I implemented) is monkeypatching sphinx-gallery's link generation code. It's simple, yet effective.\nLet's use this config for sphinx-gallery:\nsphinx_gallery_conf = {\n        # path to your examples scripts\n        'examples_dirs': '../plasmapy/examples',\n        # path where to save gallery generated examples\n        'backreferences_dir': 'gen_modules/backreferences',\n        'gallery_dirs': 'auto_examples',\n        'binder': {\n                'org': 'PlasmaPy',\n                'repo': 'PlasmaPy',\n                'branch': 'master',\n                'binderhub_url': 'https://mybinder.org',\n                'dependencies': ['../binder/requirements.txt'],\n                'notebooks_dir': 'plasmapy/examples',\n        }\n}\n\nand add this fragment of sphinx_gallery.binder code with a modification into Sphinx's conf.py file:\n# Patch sphinx_gallery.binder.gen_binder_rst so as to point to .py file in repository\nimport sphinx_gallery.binder\ndef patched_gen_binder_rst(fpath, binder_conf, gallery_conf):\n    \"\"\"Generate the RST + link for the Binder badge.\n    ...\n    \"\"\"\n    binder_conf = sphinx_gallery.binder.check_binder_conf(binder_conf)\n    binder_url = sphinx_gallery.binder.gen_binder_url(fpath, binder_conf, gallery_conf)\n\n    # I added the line below:\n    binder_url = binder_url.replace(gallery_conf['gallery_dirs'] + os.path.sep, \"\").replace(\"ipynb\", \"py\")\n\n    rst = (\n            \"\\n\"\n            \"  .. container:: binder-badge\\n\\n\"\n            \"    .. image:: https://mybinder.org/badge_logo.svg\\n\"\n            \"      :target: {}\\n\"\n            \"      :width: 150 px\\n\").format(binder_url)\n    return rst\n\n# And then we finish our monkeypatching misdeed by redirecting sphinx-gallery to use our function:\nsphinx_gallery.binder.gen_binder_rst = patched_gen_binder_rst\n\nThe current gallery is located here, and an example link is https://mybinder.org/v2/gh/PlasmaPy/PlasmaPy/master?filepath=plasmapy/examples/particle_stepper.py - and you should instantly see it points to the right spot!\nObviously, it would be better to implement such link customization in sphinx-gallery itself somehow, but it's up to their maintainers to decide whether this kind of combo usage with Jupytext is in scope for their project. For now, the monkeypatch solution works decently. I'll try to update this post if that comes about.\n\n\nUpdate - requirements\n@jdkent on GitHub suggests that if the above doesn't work for you, you should make sure the Sphinx version you're using is 2 or newer.",
      "tags": "plasmapy,python,sphinx",
      "url": "https://stanczakdominik.github.io/posts/simple-binder-usage-with-sphinx-gallery-through-jupytext/"
    },
    {
      "title": "Post mortem for my engineering thesis code, PythonPIC",
      "text": "I'm giving a presentation on this less-than-glorious subject on Friday, so\nI figured, hey, it might be a nice time to write a summary of what that old\nrepository on my GitHub page is. In a single video:\n\nAdmittedly, this post is going to be rather personal - this messy little code\nwas basically my life for a few hundreds of hours.\n\n\nThe motivation\nAt the time, I was quite enamored with Python, NumPy, the ideals of open\nsource scientific software and literate computing. I had seen\nhow most scientific software seems to be written in uglier,\nless maintainable languages and thoroughly disliked the notion that\nWe, the Scientific Community would have to keep struggling with those, no no\nno.\nSo I figured, hey, I can probably do better. I know NumPY! It's basically\nwriting FORTRAN without ever touching FORTRAN!\n\nnarrator voice: It isn't.\n\nSo I went to the amazing S\u0142awomir Jab\u0142o\u0144ski of IPPLM (to whom,\na shout out, for he is truly an amazing person without whom this work would\nhave gone nowhere). I discussed the idea with him and he seemed to like it. He\nagreed to supervise me on this idea.\nWhat happened next?\nThe breakdown\nWell, stuff happened, not least important of which was procrastination on\na scale I had never performed. One of my personal flaws is a tendency to\nisolate myself and work alone on projects that are better undertaken in groups.\nI basically started writing a framework, refactoring it endlessly, delaying\nwork on the critical bugs like the actual physics of my simulation, running\ntest cases... What I had thought would have been simple turned out not to be.\nDon't get me wrong, I learned a metric ton of Python and numerics knowledge\n- but I wasn't getting much closer, and I wasn't reaching out for feedback that\nwhat I was doing was, pretty much, crap.\nI may have had a tiny nervous\nbreakdown then. Eventually I reached out again to IPPLM and mr. Jab\u0142o\u0144ski, who\nagreed the situation is pretty bad but didn't think it worth giving up on. The\ncode ended up working after many adventures:\n|\\\n* | 207371b wat\n| |\\  \n| * | 00b554c started writing diagnostics\n| * | 3942c6e continue writing diagnostics, abandoning idea of multifunction simulation load'\n| | * e726000 revert to old simulation init, energy calculation\n| |/  \n| *   ca0742a merged\n| * 62fe945 energy still blows up\n|/  \n*   6e172d6 merged\n...\n* 5068dfb langmuir waves kinda sorta running?\n...\n* b9580ac Finish fixing tests\n* 864d27a Turn recurrent deposition into deposition on a while loop\n* 280d176 Start fixing Laser simulation\n...\n* a5c4623 Fix difficult to find bugs in longitudinal current deposition\n...\n* 080a226 what may amount to release\n\n\nand I was able to benchmark it nicely.\n\nThe benchmarking\nI then - only then, certainly a failure of foresight on my part - realized that\nI would need a comparable C/C++ code to benchmark my Python NumPy monstrosity\nagainst. That was not a happy thought. \nBut there was no way the low level drudgery could be avoided, so I went ahead,\nstarted learning the Eigen3 linear algebra library that has many similarities\nto NumPy - I needed something that in principle could work\nsimilarly, with mostly whole array based computations. The result of that is in\nthis repository.\nAdmittedly, to this day I'm not even one hundred percent sure it does the same\nthing! The results seemed to be correct for the test cases I did run, but I'm\nnot exactly sure I got all of the bugs. Most of the problems stem from the fact\nI used numpy.bincount for most of the current and charge deposition\nfunctionality (don't do that, by the way, as that was the least efficient part\nof the code). That functionality is lacking in Eigen (or at the very least\nI was unable to find it), so I went ahead and implemented it by hand.\nI then started benchmarking the two codes for identical initial conditions, and\nit turned out that - \n\nsuccess! PythonPIC is just as fast as the compiled C version!\n... until you compile the C code with -O, the simplest optimization flag:\n\nI didn't bother checking -O3, though a friend was happy to remind me of its\nexistence. I might thus be the proud\nauthor of the cleanest (well, not the least clean) and least efficient\nparticle-in-cell code on the planet. Gotta start somewhere, right?\nThe defense\nThere's not much to say. I went ahead, printed out a few copies of the thesis,\nrealized via review I had made mistakes in plots etc. and had to print them out\nagain. I went ahead, took my final exam, didn't get grilled too hard, got\na random exam question about - I think, as it's been a while - the Schroedinger\nequation, and poof, trust me, I'm an\nengineer of Applied\nPhysics. I'm still not sure how that happened.\nI took a break from PIC codes for a while afterwards. A snippet of PythonPIC\nlater went into PlasmaPy's\nparticle stepper capabilities. I still have a thorough dislike for that code\nand think it could be optimized.\nAll in all, I'm not sure about Python for PICs. On the one hand, they're pretty\ninevitably going to be slower than C, C++ for now. You could write the\ncomputationally intensive parts in Julia or something - that would probably\nwork and I've been itching to try my hand at that recently - but by that logic,\nyou could probably implement the whole thing in Julia anyway, because Python\nreally isn't giving you anything of value there - maybe besides analysis, but\nthat's done post-run anyway.\nBut on the other hand, not all PICs are HPiCs - and if you're just studying\nplasma physics alongside, say, Birdsall and\nLangdon,\nthen you can probably live with having your code run a little slower than the\nsickest optimal C run time. I've been able to use my code (mostly before the\nbreak... remember the part where I was adding a ton of test cases?) to\nreproduce a bunch of their results and it's worked out nicely.\nI'd like to think PythonPIC has, thus, at least some value and use. It's probably\nnot too useful for high performance and research, but you need to funnel people into those\nsomehow.\nThe lessons learned\nFocus on the physics\nNo matter how beautiful and readable your code is, if it doesn't do what it's supposed to be doing, it isn't worth a dime.\nPrecrastinate\nI've once heard a summary of estimating time for completing programming projects (unfortunately I haven't been able to find the source):\n\nfor any programming problem, make an estimate, double it, then increment the time unit to the next higher one.\n\nIt's worth starting your stuff early...\nPlan ahead and anticipate issues\n... this part tells you how early to start. Still, unexpected difficulties will\ninevitably happen - they're part of the learning process. Accept them and leave\nyourself enough time to deal with them constructively.\nReach out and talk about your problems\nThis goes both for scientific programming and for mental health. I would have\ntruly gotten nowhere if I hadn't had help from amazing people for both of\nthese.\n\nAnd... that's about it! Phew. That's a load off my chest, to be frank - the\nidea of writing this has haunted me for a while. Still, while the handling\ncould have been better, I'm happy I wrote that little code.",
      "tags": "particle-in-cell,plasma,projects,python,simulation",
      "url": "https://stanczakdominik.github.io/posts/post-mortem-for-my-engineering-thesis-code-pythonpic/"
    },
    {
      "title": "On the recent \"On the Boris solver in Particle-in-cell simulations\" paper",
      "text": "I recently came across a pretty cool paper by Zenitani and Umeda named \"On the Boris solver in particle-in-cell simulation\". There are many splendid descriptions of the Boris solver on the Internet, so while I would rather not duplicate them, here's a brief overview. In PIC simulations, the Boris solver (or pusher) is the usual algorithm of choice for moving and accelerating particles in given electric and magnetic fields.\nYou may wonder, since the equations of motion are ordinary differential equations, what's wrong with using the usual Runge-Kutta 4 solver? As it turns out, that one has a pretty major flaw. It has great accuracy for short term calculations, but over time your particle's motion will lose energy. This is a deal breaker for periodic motion, and simulations of, for example, plasma waves need to conserve that energy to provide accurate results.\nBoris came up with his solver in the 1950's, and in a single sentence: the algorithm splits the acceleration via electric field into two parts and sticks a rotation about the magnetic field between them. This turns out to conserve energy and will probably come up again on this blog as I read more about symplexicity.\n\nHowever, there's a catch. There's a single basic and dense textbook for particle simulation, called \"Plasma Physics via Computer Simulation\" by Birdsall and Langdon. It has been referenced in most PIC papers I've read. The Boris solver as described by this PIC bible involves a vector quantity (following the authors we'll call this part of the Boris-B algorithm):\n$$\\vec{t} = \\frac{\\theta}{2} \\vec{b} \\tag{Boris-B}$$$\\vec{b}$ being the unit vector in the direction of the magnetic field $\\vec{B}$ and $\\theta \\sim dt |\\vec{B}|$. However, what Boris originally had in his derivation was (the Boris-A algorithm):\n$$\\vec{t} = \\tan{\\frac{\\theta}{2}} \\vec{b} \\tag{Boris-A}$$And there's a subtle difference there! Well, it's subtle if you have $\\frac{\\theta}{2} << 1$ and quickly stops being subtle if you\n\nhave large $\\theta$, which you probably shouldn't as it's proportional to the timestep\ncare about the performance of your pusher, which you probably should\n\nThe version in B&L's book is a simplification (admittedly one that B&L pointed out was being made) that incorporates a slight error in the calculation, but turns out to be a bit faster (tangents were quite expensive to calculate back then). For a very simple comparison of the two:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nfrom math import tan\ntheta = 0.1\n\njust_division = %timeit -o theta/2\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n38 ns \u00b1 2.43 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ntangent_division = %timeit -o tan(theta/2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n81.2 ns \u00b1 3.39 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n(tangent_division.average) / just_division.average\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n2.138698576440618\n\n\n\n\n\n\n\n\n\n\n\nAnd that's on a modern CPU with a modern math library in a modern language! At the time of writing of B&L's book, this was indeed something people found valuable to optimize out of their code.\nWhat the authors of this paper did was take a few more steps of the calculation in the entire Boris-A algorithm and rewrite them into the Boris-C version, which turns out to be\n\njust as accurate as Boris-A (see the plots in the paper for some really neat results)\n\"only 25% slower than the Boris-B solver\"\n\"faster than the Boris-A solver\" (where Boris-A was 46% slower than Boris-B)\n\nThis is neat, so I figured we could maybe do this in Python really quickly to show how it works.\nLet's start with the classic version. We'll first include a couple of helpers:\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nimport numpy as np\n\ncharge = 1\nmass = 1\nlightspeed = 1\n\n\ndef epsilon(electric_field, timestep):\n    return charge * timestep / (2*mass) * electric_field \n\ndef gamma_from_velocity(velocity):\n    return np.sqrt(1 - np.sum((velocity / lightspeed)**2))\n\ndef gamma_from_u(u):\n    return np.sqrt(1+np.sum((u/lightspeed)**2))\n\n\n    \n\n\n\n\n\n\n\nWe can now proceed to implement the various versions of the Boris solver. I'm mostly just going through the paper and turning the equations into code, nothing crazy.u_t_minus_half is the velocity at time $t-\\Delta t /2$, as the Boris solver takes particle velocities as shifted in time: with a timestep $\\Delta t$, you get positions at $t = 0, \\Delta t, 2 \\Delta t ...$, while your velocities are defined at times $t = -\\Delta t / 2, + \\Delta t / 2, 3 \\Delta t / 2...$\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndef BorisA(position, u_t_minus_half, electric_field, magnetic_field, timestep):\n    # Equations 3, 6, 7a, 8, 9, 5\n    uminus = u_t_minus_half + epsilon(electric_field, timestep)  # Eq. 3\n    magfield_norm = np.linalg.norm(magnetic_field)\n    theta = charge * timestep / mass / gamma_from_u(uminus) * magfield_norm  # Eq. 6\n        \n    b = magnetic_field / magfield_norm\n    \n    t = np.tan(theta/2) * b # Eq. 7a\n    \n    uprime = uminus + np.cross(uminus, t)  # Eq. 8\n    uplus = uminus + 2/(1+(t**2).sum()) * np.cross(uprime, t)  # Eq. 9\n    u_t_plus_half = uplus + epsilon(electric_field, timestep) # Eq. 5\n    new_position = u_t_plus_half / gamma_from_u(u_t_plus_half) * timestep + position # Eq. 1\n    return new_position, u_t_plus_half \n\ndef BorisB(position, u_t_minus_half, electric_field, magnetic_field, timestep):\n    # 3, 7b, 8, 9, 5\n    uminus = u_t_minus_half + epsilon(electric_field, timestep)  # Eq. 3\n    \n    # Eq. 7a\n    t = charge * timestep / (2 * mass * gamma_from_u(uminus)) * magnetic_field\n    \n    uprime = uminus + np.cross(uminus, t)  # Eq. 8\n    uplus = uminus + 2/(1+(t**2).sum()) * np.cross(uprime, t)  # Eq. 9\n    u_t_plus_half = uplus + epsilon(electric_field, timestep) # Eq. 5\n    new_position = u_t_plus_half / gamma_from_u(u_t_plus_half) * timestep + position # Eq. 1\n    return new_position, u_t_plus_half \n    \ndef BorisC(position, u_t_minus_half, electric_field, magnetic_field, timestep):\n    # 3, 6, 11, 12, 5\n    uminus = u_t_minus_half + epsilon(electric_field, timestep)  # Eq. 3\n    magfield_norm = np.linalg.norm(magnetic_field)\n    theta = charge * timestep / mass / gamma_from_u(uminus) * magfield_norm  # Eq. 6\n    \n    b = magnetic_field / magfield_norm\n    \n    u_parallel_minus = np.dot(uminus, b) * b # Eq. 11\n    uplus = u_parallel_minus + (uminus - u_parallel_minus) * np.cos(theta) + np.cross(uminus, b) * np.sin(theta) # Eq. 12\n    u_t_plus_half = uplus + epsilon(electric_field, timestep) # Eq. 5\n    new_position = u_t_plus_half / gamma_from_u(u_t_plus_half) * timestep + position # Eq. 1\n    return new_position, u_t_plus_half \n\n\n    \n\n\n\n\n\n\n\nWe can now start implementing the authors' test cases as seen in the paper. We'll first define a helper plotting function:\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndef plot(r, v, trajectory_format = \".:\", timeseries_format = \".--\"):\n    x, y, z = r.T\n    fig, axes = plt.subplots(2, 2, figsize=(12, 8))\n    axes[0,0].plot(x, timeseries_format, label=\"x\")\n    axes[0,0].plot(y, timeseries_format, label=\"y\")\n    axes[0,0].plot(z, timeseries_format, label=\"z\")\n    axes[0,0].set_xlabel(\"Iteration\")\n    axes[0,0].legend(loc='best')\n    \n    axes[1,0].plot(x, y, trajectory_format)\n    axes[1,0].set_xlabel(\"X\")\n    axes[1,0].set_ylabel(\"Y\")\n    \n    vx, vy, vz = v.T\n    axes[0, 1].plot(vx, timeseries_format, label=\"Vx\")\n    axes[0, 1].plot(vy, timeseries_format, label=\"Vy\")\n    axes[0, 1].plot(vz, timeseries_format, label=\"Vz\")\n    axes[0, 1].legend(loc='best')\n    axes[0, 1].set_xlabel(\"Iteration\")\n    axes[0, 1].set_ylabel(\"Velocity\")\n                      \n    axes[1, 1].plot(vx, vy, trajectory_format)\n    axes[1, 1].set_xlabel(\"X Velocity\")\n    axes[1, 1].set_ylabel(\"Y Velocity\")\n    plt.tight_layout()\n    return r, v\n\n\n    \n\n\n\n\n\n\n\nAnd now we can start to implement the first test case:\nMovement in constant crossed electric and magnetic fields\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndef drift(pusher, E=1, B=1):\n    electric_field = np.array([E, 0, 0])\n    magnetic_field = np.array([0, 0, B])\n    \n    # initial conditions\n    u_t_minus_half = np.array([1, 0, 0])\n    position = np.zeros(3)\n    timestep = np.pi/6\n    \n    # I'm taking this a bit longer than the authors, so that the plots look nicer\n    t = np.arange(0, 120/np.pi, timestep) \n    \n    positions = []\n    velocities = []\n    for i in t:\n        positions.append(position)\n        velocities.append(u_t_minus_half)\n        position, u_t_minus_half = pusher(position, u_t_minus_half, electric_field, magnetic_field, timestep)\n\n    \n    r = np.array(positions)\n    v = np.array(velocities)\n    return r, v\n\nplot(*drift(BorisA, E=0, B=1));\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat looks reasonable.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nplot(*drift(BorisB, E=0, B=1));\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nplot(*drift(BorisC, E=0, B=1));\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPretty indistinguishable from the BorisA case! In fact, that's what the authors claim and what we can check numerically:\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nfor name, array_A, array_B, array_C in zip([\"position\", \"velocity\"], drift(BorisA), drift(BorisB), drift(BorisC)):\n    print(f\"BorisA and BorisC {'' if np.allclose(array_A, array_C, atol=1e-20, rtol=1e-15) else 'DO NOT '}agree on {name} for rotation.\")\n    print(f\"BorisB and BorisC {'' if np.allclose(array_B, array_C, atol=1e-20, rtol=1e-15) else 'DO NOT '}agree on {name} for rotation.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBorisA and BorisC agree on position for rotation.\nBorisB and BorisC DO NOT agree on position for rotation.\nBorisA and BorisC agree on velocity for rotation.\nBorisB and BorisC DO NOT agree on velocity for rotation.\n\n\n\n\n\n\n\n\n\n\n\nI went through the different cases presented for this part in the paper, and they seem to agree as well. Let's reproduce another example, the $\\vec{E} \\times \\vec{B}$ drift. I won't show the BorisB plot here, as it doesn't visually differ, though the difference is there:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nborisC_drift = plot(*drift(BorisC, E=1, B=1))\nborisB_drift = drift(BorisB, E=1, B=1)\nborisA_drift = drift(BorisA, E=1, B=1)\nfor name, array_A, array_B, array_C in zip([\"position\", \"velocity\"], borisA_drift, borisB_drift, borisC_drift):\n    print(f\"BorisA and BorisC {'' if np.allclose(array_A, array_C, atol=1e-20, rtol=1e-15) else 'DO NOT '}agree on {name} on the ExB drift.\")\n    print(f\"BorisB and BorisC {'' if np.allclose(array_B, array_C, atol=1e-20, rtol=1e-15) else 'DO NOT '}agree on {name} on the ExB drift.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBorisA and BorisC agree on position on the ExB drift.\nBorisB and BorisC DO NOT agree on position on the ExB drift.\nBorisA and BorisC agree on velocity on the ExB drift.\nBorisB and BorisC DO NOT agree on velocity on the ExB drift.\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLong term stability tests\u00b6The authors define this as a long time run in the following fields:\n$$ \\phi = \\frac{0.01}{\\sqrt{x2 + y2)}} $$$$ \\vec{B} = \\sqrt{x2 + y2} $$with $\\vec{E} = -\\nabla \\phi$ as usual. Let's just calculate the derivative with SymPy really quickly here:\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nfrom sympy.abc import x, y\nphi = 0.01 * (x**2 + y**2)**-0.5\nphi\n\nfrom sympy import lambdify\n\nEx = -phi.diff(x)\nEy = -phi.diff(y)\nEx = lambdify((x, y), Ex)\nEy = lambdify((x, y), Ey)\n\ndef stability(pusher, time_range=8e2):\n    u_t_minus_half = np.array([0.1, 0, 0])\n    position = np.array([0.9, 0, 0])\n    timestep = np.pi/10\n    t = np.arange(0, time_range, timestep)    \n    \n    positions = []\n    velocities = []\n    for i in t:\n        x, y, z = position\n        magnetic_field = np.array([0, 0, np.sqrt(x**2 + y**2)])\n        electric_field = np.array([Ex(x, y), Ey(x, y), 0])\n        positions.append(position)\n        velocities.append(u_t_minus_half)\n        position, u_t_minus_half = pusher(position, u_t_minus_half, electric_field, magnetic_field, timestep)\n    \n    r = np.array(positions)\n    v = np.array(velocities)\n    return r, v\n   \n\nplot(*stability(BorisA), trajectory_format=\".\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nplot(*stability(BorisC), trajectory_format=\".\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nplot(*stability(BorisB), trajectory_format=\".\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote how the inner side of the velocity space trajectory becomes circular for the BorisB case and keeps making a neat pattern in the BorisA and BorisC cases!\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nrtol = 1e-9\nfor name, array_A, array_B, array_C in zip([\"position\", \"velocity\"], stability(BorisA), stability(BorisB), stability(BorisC)):\n    print(f\"BorisA and BorisC {'' if np.allclose(array_A, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n    print(f\"BorisB and BorisC {'' if np.allclose(array_B, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBorisA and BorisC agree on position for long term stability for relative tolerance 1e-09.\nBorisB and BorisC DO NOT agree on position for long term stability for relative tolerance 1e-09.\nBorisA and BorisC agree on velocity for long term stability for relative tolerance 1e-09.\nBorisB and BorisC DO NOT agree on velocity for long term stability for relative tolerance 1e-09.\n\n\n\n\n\n\n\n\n\n\n\nDo note that there does seem to be some long term error creeping in, as I had to lower rtol:\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nrtol = 1e-10\nfor name, array_A, array_B, array_C in zip([\"position\", \"velocity\"], stability(BorisA), stability(BorisB), stability(BorisC)):\n    print(f\"BorisA and BorisC {'' if np.allclose(array_A, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n    print(f\"BorisB and BorisC {'' if np.allclose(array_B, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBorisA and BorisC agree on position for long term stability for relative tolerance 1e-10.\nBorisB and BorisC DO NOT agree on position for long term stability for relative tolerance 1e-10.\nBorisA and BorisC DO NOT agree on velocity for long term stability for relative tolerance 1e-10.\nBorisB and BorisC DO NOT agree on velocity for long term stability for relative tolerance 1e-10.\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nrtol = 1e-15\nfor name, array_A, array_B, array_C in zip([\"position\", \"velocity\"], stability(BorisA), stability(BorisB), stability(BorisC)):\n    print(f\"BorisA and BorisC {'' if np.allclose(array_A, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n    print(f\"BorisB and BorisC {'' if np.allclose(array_B, array_C, atol=1e-20, rtol=rtol) else 'DO NOT '}agree on {name} for long term stability for relative tolerance {rtol}.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBorisA and BorisC DO NOT agree on position for long term stability for relative tolerance 1e-15.\nBorisB and BorisC DO NOT agree on position for long term stability for relative tolerance 1e-15.\nBorisA and BorisC DO NOT agree on velocity for long term stability for relative tolerance 1e-15.\nBorisB and BorisC DO NOT agree on velocity for long term stability for relative tolerance 1e-15.\n\n\n\n\n\n\n\n\n\n\n\nStill, the results look all right, especially if we were to overlay the trajectories. Let's calculate a bunch of long-time trajectories (like the authors do) and make a quick adjustment to the plotting function:\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nborisA_stability = stability(BorisA, time_range=2e5)\nborisB_stability = stability(BorisB, time_range=2e5)\nborisC_stability = stability(BorisC, time_range=2e5)\n\ndef plot_shared(*tuples, r_format=\",\", v_format = \".\", alpha=0.1, start_at):\n    fig, axes = plt.subplots(ncols=2, figsize=(12, 7))\n    for r, v in tuples:\n        x, y, z = r[int(start_at):].T\n        axes[0].set_title(\"x-y position trajectory\")\n        axes[0].plot(x, y, r_format, alpha=alpha)\n        vx, vy, vz = v[int(start_at):].T\n        \n        axes[1].set_title(\"x-y velocity trajectory\")\n        axes[1].plot(vx, vy, v_format, alpha=alpha)\n    plt.tight_layout()\n\n\n    \n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nplot_shared(borisA_stability,\n            borisC_stability,\n            r_format=\".\",\n            v_format=\".\",\n            alpha=0.8,\n            start_at = len(borisA_stability[0]) * 0.99\n           )\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nplot_shared(borisB_stability,\n            borisC_stability,\n            r_format=\".\",\n            v_format=\".\",\n            alpha=0.8,\n            start_at = len(borisA_stability[0]) * 0.99\n           )\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBenchmark\u00b6And to finalize, let's benchmark the results, to see if BorisC is indeed faster than BorisA:\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nelectric_field = np.array([1, 0, 0])\nmagnetic_field = np.array([0, 0, 1])\n\n# initial conditions\nu_t_minus_half = np.array([1, 0, 0])\nposition = np.zeros(3)\ntimestep = np.pi/6\n\n%timeit BorisA(position, u_t_minus_half, electric_field, magnetic_field, timestep)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n101 \u00b5s \u00b1 1.29 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \n%timeit BorisB(position, u_t_minus_half, electric_field, magnetic_field, timestep)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n89.9 \u00b5s \u00b1 2.03 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \n%timeit BorisC(position, u_t_minus_half, electric_field, magnetic_field, timestep)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n71.8 \u00b5s \u00b1 2.3 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n\n\n\n\n\n\n\n\n\n\n... and this clearly points to some inefficiency in my BorisB implementation. BorisC does seem to beat BorisA, though, so I guess we didn't manage to falsify the result!\n\n\n\n\n\n\n\n{\"state\": {}, \"version_major\": 2, \"version_minor\": 0}",
      "tags": "paper,particle-in-cell,plasma,python,simulation",
      "url": "https://stanczakdominik.github.io/posts/on-the-recent-on-the-boris-solver-in-particle-in-cell-simulations-paper/"
    },
    {
      "title": "Particle in Cell methods",
      "text": "I think it might finally be about time to do some plasma physics\ndiscussion on this blog, stay true to the name and so on\u2026\nBasically the only actual \u201cscientific\u201d work I have actually done with\nplasmas up until now is writing a PIC simulation, PIC standing for\nParticle-in-Cell. I thought I would take this opportunity to explain in\nmy own words what the concept is - I think it\u2019s a clever one.\n\nThere are many reasons why you might want to simulate a plasma.\nSimulations are often way cheaper than making a tokamak and causing the\nplasma to develop turbulence, or sending out a probe to watch check\nsolar flares for traces of magnetic reconnection. There\u2019s also the case\nof needing simulations to understand and explain your experimental\nresults. For now, however, let\u2019s just assume you have a burning desire\nto make a few pretty plots and animations like\nthese using data that\nyou don\u2019t have simple access to via experiment.\n\n\n\n\nPlasma simulation in general\nPlasmas are, in general, difficult to simulate. Many of the interesting\nprocesses in plasmas that you would like to simulate occur far from\nequilibrium, both spatial and thermal. For example, you\u2019d like to\nsimulate interactions between a plasma and a laser pulse (this is, in\nfact, what I did for my engineering\nthesis). This is a\nmassively non-equilibrium process. This mostly rules out fluid\nsimulations such as two-fluid and magnetohydrodynamics, which are based\non averaging the Vlasov\nequation over all\npossible velocities. You could, in theory, use the Vlasov equation\ndirectly - but that\u2019s a pretty darn high dimensional problem to be\nsolving a PDE on (though something I most certainly want to try my hand\nat, one of these days!).\nSuppose you want to take another approach. Maybe you like your\nNewtonian, old fashioned dynamical particle trajectory ODEs, you\u2019ve\ndabbled in some N-body simulations, maybe you\u2019ve done a bit of molecular\ndynamics. You could imagine putting a bunch of charged particles into a\nsimulation, calculating forces between those directly and letting them\nevolve over time.\nUnfortunately, there is a major flaw in that plan. You\u2019ve got long range\n(Coulomb) \\(r{-2}\\) interactions between huge numbers of particles,\nso you cannot use the neat trick common in molecular dynamics of only\nincluding a few neighbor particles in your simulation. This means your\nsimulation will scale as full \\(O(N2)\\) in the number of particles\nif you do that (though there have been attempts at doing that\nrecently).\nI guess you could also try a Barnes-Hut treecode of some sort, and that\nalso appears to have been\ndone\n- that doesn\u2019t seem like it\u2019s caught on, though, whatever the reason.\nWe\u2019ve now set the stage and can move on to the main attraction\u2026\n\n\nThe particle in cell method\nThe logic for a PIC is as follows, starting from the simple molecular\ndynamics or N-body framework:\n\nIf we were to know the force on each particle for every time step, we\ncould push them - update their velocities and positions as usual,\nin \\(O(N)\\) steps. Each particle is assumed independent of\nothers.\nIt\u2019s hard to calculate the forces directly in \\(O(N2)\\) steps.\nOn the other hand, It\u2019s relatively easier to solve a PDE for the\nelectromagnetic field given a charge and current distribution. The\nparticles we\u2019re moving are charged, so we can do the following\ntranslation:\n\nParticle positions \\(\\implies\\) charge distribution\nParticle positions and velocities \\(\\implies\\) current\ndistribution\n\nThis means we could deposit the particles onto a grid or mesh by\nsome kind of interpolation. We can also set the grid size so that\nmany particles go into a single grid cell: this implies that the\nnumber of grid cells is much lower than our particle count. That, in\nturn, fits our assumptions for plasmas [1]. A picture is worth a\nthousand words, so here\u2019s a very basic example of a particle\u2019s charge\nwith a linear (triangular, and thus, centered on the middle)\ndistribution being split between three cells.\n\n\n\nOnce we have the charge and current distribution on our grid, we can\nuse those quantities to solve Maxwell\u2019s equations for the\nelectromagnetic field. You could, for example, use a spectral method\nor a relaxation algorithm, like conjugate gradients.\nOnce we know the fields at the grid cell locations, we can gather\nthe field from those to the particle locations. Remember step 1,\nwhere we wished for forces - readily available given fields - at\nparticle locations? Well, here we go, wish granted!\ngoto 1\n\nAnd that\u2019s it, the particle-in-cell method in a nutshell. Of course,\nlogically it makes more sense to start from 2. (as you would usually\nstart your simulation with a set of initial conditions for the particle\npositions, velocities and maybe external fields), but to me it\u2019s cleaner\nnarratively to think of the algorithm in this order.\n\nThe advantages\n\nIt\u2019s close to fundamental physics and thus understandable! You get a\nfull picture of what each of the particles does, how the fields\nbehave, while making very few assumptions.\nIt\u2019s lightning fast! The \\(O(N2)\\) force calculation is reduced\nto the complexity of your three replacement steps. While you can\nexpect deposition and gathering to be roughly \\(O(Nm)\\)\n(\\(m\\) being the number of cells), \\(N\\) is much larger than\n\\(m\\), and the field solver is going to scale independently of\n\\(N\\) - so that\u2019s still a massive gain over direct summation.\nIt\u2019s easy to parallelize! Each particle is essentially independent\nfor the pushing step (as they only interact with each other via\nfields), so those movements are trivially parallel. Grid operations\ncan also be done in parallel (though admittedly I haven\u2019t looked into\nthat much, yet - I fully intend to do so).\n\nAnd of course, no description of a simulation method is complete\nwithout\u2026\n\n\nThe disadvantages\n\nThe method is mostly explicit, so that limits your time step and grid\nsize quite a lot. Otherwise, you get spurious instabilities.\nStatistical noise makes life a pain when you\u2019re working on PIC\nsimulations, precisely because you\u2019re modeling your large numbers of\nreal particles with fewer virtual discrete ones. The trick seems to\nbe increasing the particle numbers, but Wikipedia\nclaims\nthat this source of error is more figured out for traditional grid\nmethods. In a way, this also means PICs are a prime target for GPUs,\nas exhibited by\nPIConGPU.\n\nStill, PICs are used in many awesome applications, such as plasma\nturbulence research, and their parallelizability means they\u2019re only\ngoing to get more important in the coming exascale computing era.\nI\u2019ll be writing a few follow-up posts going over particular aspects of\nPIC codes - tricks I\u2019ve picked up along the way, etc. Stay tuned!\n\nReferences\n\nRelativistic kinetic turbulence\nvideo by Joonas\nN\u00e4ttil\u00e4, using the plasmabox\ncode.\nPythonPIC, my\nless-than-amazing engineering thesis code.\nVlasov Equation - Wikipedia\nPlasma simulation via molecular dynamics\nexample.\nBarnes-Hut plasma simulation\nexample\nParticle in Cell applications -\nWikipedia\nGPU PIC\nPIConGPU\n\n\n\n[1]\nIf you want to learn more about those, I don\u2019t feel like I can give\nthis subject justice better than chapter 1-1 of Birdsall and\nLangdon\u2019s seminal Plasma Physics via Computer Simulation text.",
      "tags": "particle-in-cell,plasma,popular science",
      "url": "https://stanczakdominik.github.io/posts/particle-in-cell-methods/"
    },
    {
      "title": "First dive into Julia",
      "text": "I'm currently sitting in at a tutorial on the basics of Julia and parallel processing therein by Bogumi\u0142 Kami\u0144ski. This is actually my first dive into Julia, so I thought I would write it down on-the-go here!\n\nLet's jump right into it:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nR = randn(10000, 10000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n10000\u00d710000 Array{Float64,2}:\n -0.324424   -0.565317    0.74943    \u2026  -0.518865    -0.0841272   0.935276 \n  2.7421      0.127783   -0.406756       1.69075      1.58605     0.302112 \n  2.00937    -0.36474    -1.6031         2.46846     -0.319774   -0.362626 \n  1.0957     -0.328512    0.0765665      0.551588    -0.63376    -0.642072 \n -1.5761      0.0990041   0.649661       0.123745     1.53702     0.748066 \n  0.0294794   0.841421    0.935812   \u2026  -0.124979    -0.0319694  -0.308331 \n  2.4428     -0.0981946   2.16323       -1.74004     -0.838027   -0.562755 \n -0.362584   -0.342403    1.11269       -1.99102      2.13044     1.05996  \n -0.85741     0.224304    0.89256       -0.357627    -0.25959     0.271416 \n  1.02282    -0.470008    1.75296        1.34871     -0.16343     0.194525 \n -0.357741    0.252059   -1.02996    \u2026  -0.125655    -1.20237     0.0220102\n  0.793983    0.334861   -0.628246      -0.768169     1.08063    -0.870663 \n -0.111529   -0.557087    0.714131      -0.0785655    0.577348   -0.659775 \n  \u22ee                                  \u22f1                                     \n  0.454754    0.905449   -1.04019       -2.14169     -0.830821    0.363394 \n  0.165472   -0.099097    1.58675       -0.314269    -0.500922   -2.24592  \n -0.74685     0.854795   -0.606661   \u2026   0.390252    -1.45657     1.22648  \n -0.0369208  -0.139647    1.26695       -0.00442996  -2.24374     0.348733 \n  0.620604   -0.835141   -1.59741       -0.026424    -0.491713    0.705191 \n -2.49094     0.471711    0.677353       0.51443     -0.234433    1.61501  \n -0.600199    0.907787   -0.0977633      1.39034     -1.20908     1.06054  \n -1.26894     0.718772    0.334036   \u2026   0.994015    -1.28285    -2.15419  \n -0.411544   -0.0794345   1.58904        1.14895      0.0363      2.14895  \n -0.437881   -0.451166   -0.0647529     -0.276704     0.392206   -0.128466 \n  0.86126     0.774654    0.429458      -2.03196     -0.371577    0.547281 \n -1.07246     0.421693   -0.244775      -0.479385    -0.858759   -0.300843 \n\n\n\n\n\n\n\n\n\n\n\nOkay, that did what you'd expect. There's apparently a help statement that works inversely from what you'd expect from IPython:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n?randn\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nsearch: randn rand transcode macroexpand @macroexpand1 @macroexpand\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nrandn([rng=GLOBAL_RNG], [T=Float64], [dims...])\n\nGenerate a normally-distributed random number of type T with mean 0 and standard deviation 1. Optionally generate an array of normally-distributed random numbers. The Base module currently provides an implementation for the types Float16, Float32, and Float64 (the default), and their Complex counterparts. When the type argument is complex, the values are drawn from the circularly symmetric complex normal distribution.\nExamples\u00b6jldoctest\njulia> rng = MersenneTwister(1234);\n\njulia> randn(rng, ComplexF64)\n0.6133070881429037 - 0.6376291670853887im\n\njulia> randn(rng, ComplexF32, (2, 3))\n2\u00d73 Array{Complex{Float32},2}:\n -0.349649-0.638457im  0.376756-0.192146im  -0.396334-0.0136413im\n  0.611224+1.56403im   0.355204-0.365563im  0.0905552+1.31012im\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat about global help?\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n?\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nsearch: \u22bb \u228b \u228a \u2289 \u2288 \u2287 \u2286 \u2265 \u2264 \u2262 \u2261 \u2260 \u2249 \u2248 \u222a \u2229 \u221b \u221a \u2218 \u220c \u220b \u2209 \u2208 \u212f \u03c0 \u00f7 ~ |  \\ > < : / - +\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\nWelcome to Julia 1.1.0. The full manual is available at\nhttps://docs.julialang.org/\n\nas well as many great tutorials and learning resources:\nhttps://julialang.org/learning/\n\nFor help on a specific function or macro, type ? followed by its name, e.g. ?cos, or ?@time, and press enter. Type ; to enter shell mode, ] to enter package mode.\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n;ls\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nmnist.zip\nTutorial1.ipynb\n\n\n\n\n\n\n\n\n\n\n\nWe can use @time to benchmark this randn command:\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n@time randn(10000, 10000);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.813875 seconds (6 allocations: 762.940 MiB, 1.56% gc time)\n\n\n\n\n\n\n\n\n\n\n\nFor comparison:\nIn [3]: %timeit np.random.normal(size=(10000, 10000))             \n3.8 s \u00b1 25.8 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nAnd the presenter's R attempt took 5.81 using system.time. Wew, this is pretty fast.\n\n\n\n\n\n\n\nTo start with, we're analyzing a function found on StackOverflow that sums over the lower triangular part of a matrix (apparently, the code is pretty bad):\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfunction upsum(M); n = size(M)[1]; sum = 0\n    for i = 1:n-1\n        for j = i+1:n\n            sum = sum + M[i,j]\n        end\n    end\n    return sum\nend\n\nupsum(R)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n-7802.649783031088\n\n\n\n\n\n\n\n\n\n\n\nLet's check the performance:\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n%timeit upsum(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nThe analogue of IPython's %time statement (also %timeit) in Julia is @time statement.  The analogue of %%time ...code... is\n@time begin\n    ...code...\nend\n\nNote, however, that you should put all performance-critical code into a function, avoiding global variables, before doing performance measurements in Julia; see the performance tips in the Julia manual.\nThe @time macro prints the timing results, and returns the value of evaluating the expression.  To instead return the time (in seconds), use @elapsed statement.\nFor more extensive benchmarking tools, including the ability to collect statistics from multiple runs, see the BenchmarkTools package.\n\n\n\n\n\n\n\n\n\n\n\n\n... All right, I'm starting to like this cheeky little language. Trying again:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n@time upsum(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.464638 seconds (5 allocations: 176 bytes)\n\n\n\n\n\n\n\n\n\n\n\nTo compare that with Python:\nIn [8]: %timeit np.sum(np.tril(R))                                \n245 ms \u00b1 45.8 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nWell, that was faster, but we can improve the Julia code. Let's first look at the inbuilt sum function:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nsum\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\nsum (generic function with 13 methods)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n@time sum(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.090729 seconds (89.03 k allocations: 4.748 MiB, 10.32% gc time)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \n@time sum(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.100551 seconds (5 allocations: 176 bytes)\n\n\n\n\n\n\n\n\n\n\n\nOkay, now this is badass. Julia is dynamically compiled - it's as if Numba came out of Python and became its own language. Apparently there are ways of avoiding the first-call overhead, but this is somehow more advanced.\nNote that all compiled-function cache is cleared on Julia restarts!\nTo compare with Python:\nIn [9]: %timeit np.sum(R)                                         \n53 ms \u00b1 3.67 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\nNot too shabby for the ol' snake!\nLet's try to improve the function, though:\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nfunction uppersum(M)\n    n = size(M, 1)\n    s = zero(eltype(M))  # a zero hard-typed as the same type as the entry of the matrix\n    # eltype stands for ELement TYPE - this is now fully generic\n    for i in 2:n        # Julia uses column-major storage order - faster to traverse any matrix in Julia column-wise\n        @simd for j in 1:(i-1)    # if I know I'm accessing a contiguous block of memory, I can tell Julia that using @simd\n            @inbounds s += M[j, i]    # ignore bound checking and just access memory C-style \n        end\n    end\n    s\nend\n\nuppersum(R)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n-7802.6497830305125\n\n\n\n\n\n\n\n\n\n\n\nWe can look at these @simd and @inbouds annotations:\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n?@simd\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n@simd\n\nAnnotate a for loop to allow the compiler to take extra liberties to allow loop re-ordering\n!!! warning\n    This feature is experimental and could change or disappear in future versions of Julia. Incorrect use of the @simd macro may cause unexpected results.\nThe object iterated over in a @simd for loop should be a one-dimensional range. By using @simd, you are asserting several properties of the loop:\n\nIt is safe to execute iterations in arbitrary or overlapping order, with special consideration for reduction variables.\nFloating-point operations on reduction variables can be reordered, possibly causing different results than without @simd.\n\nIn many cases, Julia is able to automatically vectorize inner for loops without the use of @simd. Using @simd gives the compiler a little extra leeway to make it possible in more situations. In either case, your inner loop should have the following properties to allow vectorization:\n\nThe loop must be an innermost loop\nThe loop body must be straight-line code. Therefore, @inbounds is   currently needed for all array accesses. The compiler can sometimes turn   short &&, ||, and ?: expressions into straight-line code if it is safe   to evaluate all operands unconditionally. Consider using the ifelse   function instead of ?: in the loop if it is safe to do so.\nAccesses must have a stride pattern and cannot be \"gathers\" (random-index   reads) or \"scatters\" (random-index writes).\nThe stride should be unit stride.\n\n!!! note\n    The @simd does not assert by default that the loop is completely free of loop-carried memory dependencies, which is an assumption that can easily be violated in generic code. If you are writing non-generic code, you can use @simd ivdep for ... end to also assert that:\n\nThere exists no loop-carried memory dependencies\nNo iteration ever waits on a previous iteration to make forward progress.\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n?@inbounds\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n@inbounds(blk)\n\nEliminates array bounds checking within expressions.\nIn the example below the in-range check for referencing element i of array A is skipped to improve performance.\nfunction sum(A::AbstractArray)\n    r = zero(eltype(A))\n    for i = 1:length(A)\n        @inbounds r += A[i]\n    end\n    return r\nend\n\n!!! warning\n    Using @inbounds may return incorrect results/crashes/corruption for out-of-bounds indices. The user is responsible for checking it manually. Only use @inbounds when it is certain from the information locally available that all accesses are in bounds.\n\n\n\n\n\n\n\n\n\n\n\n\nRight! Let's time this implementation:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n@time uppersum(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.054047 seconds (5 allocations: 176 bytes)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nfunction uppersum_boundcheck(M)\n    n = size(M, 1)\n    s = zero(eltype(M))  # a zero hard-typed as the same type as the entry of the matrix\n    # eltype stands for ELement TYPE - this is now fully generic\n    for i in 2:n        # Julia uses column-major storage order - faster to traverse any matrix in Julia column-wise\n        @simd for j in 1:(i-1)    # if I know I'm accessing a contiguous block of memory, I can tell Julia that using @simd\n            s += M[j, i]    # ignore bound checking and just access memory C-style \n        end\n    end\n    s    # this is sufficient for a `return` statement\nend\n\nuppersum(R)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n-7802.6497830305125\n\n\n\n\n\n\n\n\n\n\n\nLet's see what kind of gain we get from losing boundchecking:\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n@time uppersum_boundcheck(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.115098 seconds (51.16 k allocations: 2.663 MiB)\n\n\n\n\n\n\n\n\n\n\n\nInteresingly, Julia apparently uses LLVM in the background.\nGoing parallel\u00b6The idea is: we have a triangle and we want to split it into pieces of equal \"mass\". This is done in the code below, via an instruction that is relatively magical to me right now.\nFor threading to work, note that as described in the docs, you need to set the environment variable JULIA_NUM_THREADS. export JULIA_NUM_THREADS=4 in .bashrc worked fine for me.\n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \nusing Base.Threads\n\nfunction upsum_threads(M)\n    n = size(M, 1)\n    chunks = nthreads()\n    sums = zeros(eltype(M), chunks)  # separate subsum for each thread\n    chunkend = round.(Int, n*sqrt.((1:chunks) ./ chunks))   #split jobs so that each thread has approx. same number of numbers to add\n    @assert minimum(diff(chunkend)) > 0\n    chunkstart = [2; chunkend[1:end-1] .+ 1]\n    @threads for job in 1:chunks     # tell Julia that this part is safe for threading\n        s = zero(eltype(M))\n        for i in chunkstart[job]:chunkend[job]\n            @simd for j in 1:(i-1)\n                @inbounds s += M[j, i]\n            end\n        end\n        sums[job] = s\n    end\n    return sum(sums)\nend\n\nupsum_threads(R)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[34]:\n\n\n\n\n\n-7802.649783030595\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \n@time upsum_threads(R);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n  0.037879 seconds (35 allocations: 2.000 KiB)\n\n\n\n\n\n\n\n\n\n\n\nOkay, now this is faster than the Numpy. I'm reasonably impressed - but confused as to that one magical line, though. Let's dig into it.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nchunks = 4\nn = 10000\nround.(Int, n*sqrt.((1:chunks) ./ chunks))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\n4-element Array{Int64,1}:\n  5000\n  7071\n  8660\n 10000\n\n\n\n\n\n\n\n\n\n\n\nHuh. Digging deeper:\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \n(1:chunks)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\n1:4\n\n\n\n\n\n\n\n\n\n\n\nOkay, this is a range...\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \n(1:chunks) ./ chunks\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[38]:\n\n\n\n\n\n0.25:0.25:1.0\n\n\n\n\n\n\n\n\n\n\n\nAnd this is where it starts to hit me, as the presenter introduces the collect command:\n\n\n\n\n\n\nIn\u00a0[39]:\n\n    \ncollect((1:chunks) ./ chunks)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[39]:\n\n\n\n\n\n4-element Array{Float64,1}:\n 0.25\n 0.5 \n 0.75\n 1.0 \n\n\n\n\n\n\n\n\n\n\n\nOOOOOOOOOOOOOH. So ./ is a a lazy operator! In other words, if you do this:\n\n\n\n\n\n\nIn\u00a0[43]:\n\n    \nsqrt((1:chunks) ./ chunks)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nMethodError: no method matching sqrt(::StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}})\nClosest candidates are:\n  sqrt(!Matched::Float16) at math.jl:1018\n  sqrt(!Matched::Complex{Float16}) at math.jl:1019\n  sqrt(!Matched::Missing) at math.jl:1070\n  ...\n\nStacktrace:\n [1] top-level scope at In[43]:1\n\n\n\n\n\n\n\n\n\n\nThis errors because you're operating on a range, but instead if you do this:\n\n\n\n\n\n\nIn\u00a0[44]:\n\n    \nsqrt.((1:chunks) ./ chunks)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[44]:\n\n\n\n\n\n4-element Array{Float64,1}:\n 0.5               \n 0.7071067811865476\n 0.8660254037844386\n 1.0               \n\n\n\n\n\n\n\n\n\n\n\nChains of broadcasting operations \"materialize\" only once - skipping plenty of unnecessary overhead.\nThis is badass and I have to admit that I'm rather hyped up for Julia now!",
      "tags": "julia",
      "url": "https://stanczakdominik.github.io/posts/first-dive-julia/"
    },
    {
      "title": "Parsing and plotting LaTeX expressions with SymPy",
      "text": "Today let's look into some pretty neat SymPy functionality. I was in a fluid dynamics lecture, practicing taking notes with LaTeX on the go and stumbled upon this monstrosity:\n$$ \\Delta(k) = \\frac{\\rho_1-\\rho_2}{\\rho_1 + \\rho_2} gk + \\frac{\\gamma k3}{\\rho_1 + \\rho_2} - \\frac{\\rho_1 \\rho_2}{(\\rho_1 + \\rho_2)2} U2 k2 $$(bonus points for whoever recognizes this!)\nWe were supposed to draw this for a few example sets of values. All right! I opened up pinta and scribbled a few squiggly lines with my small touchpad, following the blackboard drawings. It looked darn ugly, but that got me thinking. SymPy has parsers, right? Can't I just parse that LaTeX equation into Python and make that plot pretty with matplotlib?\nWell, as it turns out, sure...\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nthe_plot.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBut it takes some tinkering.\n\nAll right, let the tinkering commence! Let's get straight to the point. For this to run, you'll need antlr4 (in current Jupyter, you can simply do %conda install antlr-python-runtime from within the Notebook).\nWe're going to simply dump the LaTeX string into sympy.parsing.latex.parse_latex, with the important caveat - this needs to be a r\"raw string\". Otherwise, LaTeX is going to go wild put a carriage return into every \\rho.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport sympy\nfrom sympy.parsing.latex import parse_latex\nlatex_string = r\"\\Delta(k) = \\frac{\\rho_1-\\rho_2}{\\rho_1 + \\rho_2} gk + \\frac{\\gamma k3}{\\rho_1 + \\rho_2} - \\frac{\\rho_1 \\rho_2}{(\\rho_1 + \\rho_2)2} U2 k2\"\nequation = parse_latex(latex_string)\nequation\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nEq(Delta(k), -U**2*k**2*rho_{1}*rho_{2}/(rho_{1} + rho_{2})**2 + (g*k)*((rho_{1} - rho_{2})/(rho_{1} + rho_{2})) + (gamma*k**3)/(rho_{1} + rho_{2}))\n\n\n\n\n\n\n\n\n\n\n\nWe can access the variables we'd like to substitute (as SymPy symbols) using equation.free_symbols:\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nequation.free_symbols\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n{U, g, gamma, k, rho_{1}, rho_{2}}\n\n\n\n\n\n\n\n\n\n\n\nIdeally what I'd like to do is use .subs on the equation to plug in numerical values. To achieve this, it would probably be easiest to turn the symbols into Python variables. However...\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nU, g, gamma, k, rho_1, rho_2 = equation.free_symbols\nU, gamma, rho_1\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n(g, U, gamma)\n\n\n\n\n\n\n\n\n\n\n\n... the unordered nature of Python's set comes back with a vengeance! It's not too trivial to get these out in the right order. You could try sorted, but one does not simply compare Symbols:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nsorted(equation.free_symbols)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-8-f67f3a401c32> in <module>\n----> 1 sorted(equation.free_symbols)\n\n/progs/miniconda3/lib/python3.7/site-packages/sympy/core/relational.py in __nonzero__(self)\n    227 \n    228     def __nonzero__(self):\n--> 229         raise TypeError(\"cannot determine truth value of Relational\")\n    230 \n    231     __bool__ = __nonzero__\n\nTypeError: cannot determine truth value of Relational\n\n\n\n\n\n\n\n\n\n\nWhat I ended up doing here is:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nU, g, gamma, k, rho_1, rho_2 = sorted(equation.free_symbols,\n                                      key = lambda x: str(x)   # the literal key part here - just sort them alphabetically!\n                                     )\nU, g, gamma, k, rho_1, rho_2\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n(U, g, gamma, k, rho_{1}, rho_{2})\n\n\n\n\n\n\n\n\n\n\n\nAnd now we can simply use subs with a dictionary:\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nequation.subs(dict(rho_1=1,\n                   rho_2=2,\n                   gamma=1,\n                   g=1,\n                  )\n             )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\nEq(Delta(k), -U**2*k**2*rho_{1}*rho_{2}/(rho_{1} + rho_{2})**2 + k**3/(rho_{1} + rho_{2}) + k*(rho_{1} - rho_{2})/(rho_{1} + rho_{2}))\n\n\n\n\n\n\n\n\n\n\n\n... or can we? This does not work on rho_{1} and rho_{2}. Here's why:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndict(rho_1=1,\n     rho_2=2,\n     gamma=1,\n     g=1,\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n{'rho_1': 1, 'rho_2': 2, 'gamma': 1, 'g': 1}\n\n\n\n\n\n\n\n\n\n\n\nWell duh, those are string values when input this way, and \"rho_1\" != \"rho_{1}\"!\nWe could instead do the following:\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nbetter_dict = {rho_1: 1,\n rho_2: 2,\n gamma: 1,\n g: 1,\n}\nbetter_dict\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n{rho_{1}: 1, rho_{2}: 2, gamma: 1, g: 1}\n\n\n\n\n\n\n\n\n\n\n\nWill that work?\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nequation.subs(better_dict)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\nEq(Delta(k), -2*U**2*k**2/9 + k**3/3 - k/3)\n\n\n\n\n\n\n\n\n\n\n\nFinally! However, along the way you may have noticed a simpler way to do this:\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nsimpler_equation = equation.subs({\n     \"rho_{1}\": 1,\n     \"rho_{2}\": 2,\n     \"gamma\": 1,\n     \"g\": 1,\n})\nsimpler_equation\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\nEq(Delta(k), -2*U**2*k**2/9 + k**3/3 - k/3)\n\n\n\n\n\n\n\n\n\n\n\nNote how this did not need us to even touch equation.free_symbols or mess around with sorted at all! I'm leaving the exploratory part here though - it might help someone looking to access variables in a parse_latex expression.\nWe may now plot it:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nDeltaK = simpler_equation.rhs\nDeltaK\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n-2*U**2*k**2/9 + k**3/3 - k/3\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nimport sympy.plotting\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = 12, 8\nk_range = (k, 0, 300)\ncolors = [\"blue\", \"green\", \"red\"]\nU_values = [1, 20, 50]\nplots = []\nfor u, color in zip(U_values, colors):\n    plot = sympy.plot(DeltaK.subs(U, u), k_range,\n                      show=False,\n                     line_color=color,\n                     legend=True,\n                     ylabel=r\"$\\Delta(k)$\",\n                     ylim = (-1e6, 1e6),\n                     xlim = (0, 300),\n                     title = f\"${latex_string}$\",\n                     )\n    plots.append(plot)\n\nplots[0].extend(plots[1])\nplots[0].extend(plots[2])\nthe_plot = plots[0]\nthe_plot.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd, while not beautiful, it's much more pretty than what I got together with pinta!",
      "tags": "python,sympy",
      "url": "https://stanczakdominik.github.io/posts/parsing-and-plotting-latex-expressions-with-sympy/"
    },
    {
      "title": "CuPy speedup of naive N-Body vectorized force calculation",
      "text": "I had intended to write a post about speeding up our Numpy Ising implementation, which we found out gave reasonable numerical values, though the small grids we were able to use limited the accuracy a fair bit. However, a few difficulties came up, so I thought instead (to keep writing these a habit!) I would write a little bit about using CuPy to speed up force calculations in N-body simulations. This might be a point I'll come back to later on this blog, as I have an ongoing project implementing that.\n\nThe part of the n-body simulation we'll look at is the calculation of forces, where the force on the i-th point particle or celestial object is:\n$$ F_i = \\sum_j F_{ij} = G \\sum_j \\frac{m_i m_j}{|\\vec{r_i}-\\vec{r_j}|3 } (\\vec{r_i}-\\vec{r_j}) $$From this, Newton's law gives $\\vec{a_i} = \\vec{F_i} / m_i$. I was trying to use my own implementation of this vectorization, but I found a neat implementation by PMende on Stack that's both more general and faster than what I had been doing. Let's take a look!\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy\nimport cupy\nimport numpy_html\n\n\n    \n\n\n\n\n\n\n\nI basically copypasted the following:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndef accelerations(positions, masses, G = 1):\n    '''\n    https://stackoverflow.com/a/52562874\n    \n    Params:\n    - positions: numpy array of size (n,3)\n    - masses: numpy array of size (n,)\n    '''\n    xp = cupy.get_array_module(positions)\n    mass_matrix = masses.reshape((1, -1, 1))*masses.reshape((-1, 1, 1))\n    disps = positions.reshape((1, -1, 3)) - positions.reshape((-1, 1, 3)) # displacements\n    dists = xp.linalg.norm(disps, axis=2)\n    dists[dists == 0] = 1 # Avoid divide by zero warnings\n    forces = G*disps*mass_matrix/xp.expand_dims(dists, 2)**3\n    return forces.sum(axis=1)/masses.reshape(-1, 1)\n\n\n    \n\n\n\n\n\n\n\nThe main change I made was adding this line:\nxp = cupy.get_array_module(positions)\n\nWhich returns numpy if we pass in a numpy.ndarray and cupy if we pass in a CuPy array. This will make this function more generic for our purposes.\nLet's take a look at what each of those lines does. For the illustrations, we'll take some particularly simple values:\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nN = 5\nm = numpy.arange(N) + 1\nr = (numpy.arange(N*3)**2).reshape((N, 3))\nm\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n1\n2\n3\n4\n5\n\n\n\n\n\n\n\n\n\n\n\nPretty printing of arrays, by the way, is provided by the awesome numpy_html package. We can now start digging! Let's first investigate the mass_matrix:\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nmass_matrix = m.reshape((1, -1, 1)) * m.reshape((-1, 1, 1))\nmass_matrix.T\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n\n1 \n2 \n3 \n4 \n5 \n\n\n2 \n4 \n6 \n8 \n10\n\n\n3 \n6 \n9 \n12\n15\n\n\n4 \n8 \n12\n16\n20\n\n\n5 \n10\n15\n20\n25\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis was a (5, 5, 1)-shaped array, but I used a .T transposition so that it would print more nicely, as a (1, 5, 5)-shaped array. This shows that the (i, j)-th entry is just $m_i m_j$ - with the shape it has, we should be able to take advantage of Numpy broadcasting in our calculation.\nLet's now look at the displacements - disps. The line is\ndisps = r.reshape((1, -1, 3)) - r.reshape((-1, 1, 3))\n\nbut let's break it down a little bit more. r is\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nr\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n0  \n1  \n4  \n\n\n9  \n16 \n25 \n\n\n36 \n49 \n64 \n\n\n81 \n100\n121\n\n\n144\n169\n196\n\n\n\n\n\n\n\n\n\n\n\n\nwhile if you reshape it with a single added dimension (signified by 1) in the first place:\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nr.reshape((1, -1, 3))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n\n0  \n1  \n4  \n\n\n9  \n16 \n25 \n\n\n36 \n49 \n64 \n\n\n81 \n100\n121\n\n\n144\n169\n196\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwhile if we were to add a dimension in the second slot:\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nr.reshape((-1, 1, 3))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n\n0  \n1  \n4  \n\n\n\n\n\n\n9  \n16 \n25 \n\n\n\n\n\n\n36 \n49 \n64 \n\n\n\n\n\n\n81 \n100\n121\n\n\n\n\n\n\n144\n169\n196\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe thus have a (1, 5, 3)-shaped array and a (5, 1, 3) array. Numpy (and anything implementing Numpy's broadcasting API by extension) is going to expand that into a (5, 5, 3) array:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndisps = r.reshape((1, -1, 3)) - r.reshape((-1, 1, 3))\ndisps.T\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n\n0   \n-9  \n-36 \n-81 \n-144\n\n\n9   \n0   \n-27 \n-72 \n-135\n\n\n36  \n27  \n0   \n-45 \n-108\n\n\n81  \n72  \n45  \n0   \n-63 \n\n\n144 \n135 \n108 \n63  \n0   \n\n\n\n\n\n\n0   \n-15 \n-48 \n-99 \n-168\n\n\n15  \n0   \n-33 \n-84 \n-153\n\n\n48  \n33  \n0   \n-51 \n-120\n\n\n99  \n84  \n51  \n0   \n-69 \n\n\n168 \n153 \n120 \n69  \n0   \n\n\n\n\n\n\n0   \n-21 \n-60 \n-117\n-192\n\n\n21  \n0   \n-39 \n-96 \n-171\n\n\n60  \n39  \n0   \n-57 \n-132\n\n\n117 \n96  \n57  \n0   \n-75 \n\n\n192 \n171 \n132 \n75  \n0   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich I chose to print with a transpose (as a (3, 5, 5) array) so as to illustrate the structure a bit more. Each of the three (5, 5) arrays displays a different spatial component of $\\vec{r_i} - \\vec{r_j}$. The arrays are antisymmetric as $\\vec{r_{ij}} = - \\vec{r_{ji}}$.\nLet's continue with the calculations! The next line simply calculates the norms of those inter-particle distances, outputting an (N, N) array (summing over the \"spatial dimensions\" axis):\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \ndists = np.linalg.norm(disps, axis=2)\ndists\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n0.          \n27.33130074 \n84.85281374 \n173.35224256\n292.95733478\n\n\n27.33130074 \n0.          \n57.78408085 \n146.47866739\n266.22359024\n\n\n84.85281374 \n57.78408085 \n0.          \n88.74119675 \n208.53776636\n\n\n173.35224256\n146.47866739\n88.74119675 \n0.          \n119.81235329\n\n\n292.95733478\n266.22359024\n208.53776636\n119.81235329\n0.          \n\n\n\n\n\n\n\n\n\n\n\n\nThe next step is pretty clever. Since in disps (see above) each diagonal element is zero (since that's $\\vec{r_{ii}}$), and we'll be dividing those by distances, we're going to have Numpy screaming obscenities at us for dividing by zero. But since 0 / 1 = 0, we lose nothing and gain peace of mind by doing:\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ndists[dists == 0] = 1\ndists\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n1.          \n27.33130074 \n84.85281374 \n173.35224256\n292.95733478\n\n\n27.33130074 \n1.          \n57.78408085 \n146.47866739\n266.22359024\n\n\n84.85281374 \n57.78408085 \n1.          \n88.74119675 \n208.53776636\n\n\n173.35224256\n146.47866739\n88.74119675 \n1.          \n119.81235329\n\n\n292.95733478\n266.22359024\n208.53776636\n119.81235329\n1.          \n\n\n\n\n\n\n\n\n\n\n\n\nSimple and effective! In my own implementation I had np.inf instead of 1 so as to get anything / np.inf == 0, but if anything = 0 for the problematic cases, that's fine as well.\nThe next line simply adds a dimension:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndists.shape, np.expand_dims(dists, 2).shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n((5, 5), (5, 5, 1))\n\n\n\n\n\n\n\n\n\n\n\nFor those curious as to why not just .reshape((-1, -1, 1)):\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ntry:\n    dists.reshape((-1, -1, 1))\nexcept ValueError as e:\n    print(e)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\ncan only specify one unknown dimension\n\n\n\n\n\n\n\n\n\n\n\nAnd now we can finally calculate the forces themselves, first getting each of $\\vec{F_{ij}}$:\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nG = 1  # because let's be real...\nforces = G * disps * mass_matrix / np.expand_dims(dists, 2) ** 3\nforces\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n\n\n0.             \n0.             \n0.             \n\n\n0.00088164     \n0.0014694      \n0.00205716     \n\n\n0.00017678     \n0.0002357      \n0.00029463     \n\n\n6.2195164e-05  \n7.60163116e-05 \n8.98374591e-05 \n\n\n2.86364625e-05 \n3.34092063e-05 \n3.81819501e-05 \n\n\n\n\n\n\n-0.00088164    \n-0.0014694     \n-0.00205716    \n\n\n0.             \n0.             \n0.             \n\n\n0.00083963     \n0.00102622     \n0.00121281     \n\n\n0.00018327     \n0.00021382     \n0.00024436     \n\n\n7.15474501e-05 \n8.10871102e-05 \n9.06267702e-05 \n\n\n\n\n\n\n-0.00017678    \n-0.0002357     \n-0.00029463    \n\n\n-0.00083963    \n-0.00102622    \n-0.00121281    \n\n\n0.             \n0.             \n0.             \n\n\n0.00077271     \n0.00087574     \n0.00097877     \n\n\n0.00017863     \n0.00019848     \n0.00021833     \n\n\n\n\n\n\n-6.2195164e-05 \n-7.60163116e-05\n-8.98374591e-05\n\n\n-0.00018327    \n-0.00021382    \n-0.00024436    \n\n\n-0.00077271    \n-0.00087574    \n-0.00097877    \n\n\n0.             \n0.             \n0.             \n\n\n0.0007326      \n0.00080237     \n0.00087214     \n\n\n\n\n\n\n-2.86364625e-05\n-3.34092063e-05\n-3.81819501e-05\n\n\n-7.15474501e-05\n-8.10871102e-05\n-9.06267702e-05\n\n\n-0.00017863    \n-0.00019848    \n-0.00021833    \n\n\n-0.0007326     \n-0.00080237    \n-0.00087214    \n\n\n0.             \n0.             \n0.             \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd we can contract that to $\\vec{F_i}$ by summing over the other-particle index:\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nforces.sum(axis = 1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n0.00114925     \n0.00181453     \n0.00247981     \n\n\n0.00021281     \n-0.00014827    \n-0.00050936    \n\n\n-6.50662895e-05\n-0.0001877     \n-0.00031034    \n\n\n-0.00028558    \n-0.00036321    \n-0.00044083    \n\n\n-0.00101141    \n-0.00111535    \n-0.00121928    \n\n\n\n\n\n\n\n\n\n\n\n\nAnd from here, a simple division by the masses suffices to get the acceleration, but we need to remember to turn the mass into a (N, 1) array via a simple reshape:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nforces.sum(axis=1)/m.reshape(-1, 1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n0.00114925     \n0.00181453     \n0.00247981     \n\n\n0.00010641     \n-7.4137417e-05 \n-0.00025468    \n\n\n-2.16887632e-05\n-6.25669817e-05\n-0.00010345    \n\n\n-7.13957375e-05\n-9.08016861e-05\n-0.00011021    \n\n\n-0.00020228    \n-0.00022307    \n-0.00024386    \n\n\n\n\n\n\n\n\n\n\n\n\nLet's run a quick test first that also serves to illustrate the results.  We'll first write a simple function that prepares some reasonable parameters - masses and positions in arrays provided by our chosen packages.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \ndef prep(N, np = numpy, seed = 0):\n    np.random.seed(seed)\n    m = np.abs(np.random.normal(loc=100, scale=20, size=N))\n    r = np.random.normal(size=(N, 3))\n    return r, m\n\n\n    \n\n\n\n\n\n\n\nFor a test, we'll set z = 0:\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nr, m = prep(10, numpy, seed = 17)\nr[:, -1] = 0\n\nax, ay, az = accelerations(r, m).T\nx, y, z = r.T\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.scatter(x, y, m);\nplt.quiver(x, y, ax, ay);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooks just about right! The system is evidently self-gravitating. Let's do the same for a few more bodies:\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nr, m = prep(500, numpy, seed = 17)\nr[:, -1] = 0\n\nax, ay, az = accelerations(r, m).T\nx, y, z = r.T\n\nplt.scatter(x, y, m);\nplt.quiver(x, y, ax, ay);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd that's a proper mess, but the arrows seem to be oriented the right way (towards the system's center of mass) and you get a bunch of very long arrows, signifying high forces at short distances - another issue that I might well come back to in another post!\nAnd the nice thing is that our function works just as well on the GPU!\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \nax, ay, az = cupy.asnumpy(accelerations(cupy.asarray(r), cupy.asarray(m)).T)\n\nplt.scatter(x, y, m);\nplt.quiver(x, y, ax, ay);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's now run a quick bechmark:\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nresults = []\nnumbers_of_bodies = [2**n for n in range(4, 13)]\nfor np in [numpy, cupy]:\n    for N in numbers_of_bodies:\n        r, m = prep(N, np, seed=17)\n        time = %timeit -oq accelerations(r, m)\n        results.append({\"library\":np.__name__,\n                        \"N\": N,\n                        \"average\": time.average,\n                        \"stdev\": time.stdev})\n\n\n    \n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nimport pandas\n\ndf = pandas.DataFrame(results)\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[24]:\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      N\n      average\n      library\n      stdev\n    \n  \n  \n    \n      0\n      16\n      0.000076\n      numpy\n      0.000003\n    \n    \n      1\n      32\n      0.000179\n      numpy\n      0.000002\n    \n    \n      2\n      64\n      0.000589\n      numpy\n      0.000020\n    \n    \n      3\n      128\n      0.002245\n      numpy\n      0.000139\n    \n    \n      4\n      256\n      0.012159\n      numpy\n      0.003883\n    \n    \n      5\n      512\n      0.044007\n      numpy\n      0.004827\n    \n    \n      6\n      1024\n      0.187316\n      numpy\n      0.007669\n    \n    \n      7\n      2048\n      0.718909\n      numpy\n      0.027526\n    \n    \n      8\n      4096\n      2.867943\n      numpy\n      0.055799\n    \n    \n      9\n      16\n      0.001288\n      cupy\n      0.000021\n    \n    \n      10\n      32\n      0.001316\n      cupy\n      0.000030\n    \n    \n      11\n      64\n      0.001463\n      cupy\n      0.000146\n    \n    \n      12\n      128\n      0.001430\n      cupy\n      0.000112\n    \n    \n      13\n      256\n      0.001321\n      cupy\n      0.000024\n    \n    \n      14\n      512\n      0.001656\n      cupy\n      0.000022\n    \n    \n      15\n      1024\n      0.005480\n      cupy\n      0.000082\n    \n    \n      16\n      2048\n      0.020252\n      cupy\n      0.000017\n    \n    \n      17\n      4096\n      0.080994\n      cupy\n      0.000289\n    \n  \n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nfig, ax = plt.subplots()\nax.set_ylabel(\"Average runtime [s]\")\nfor label, g in df.groupby('library'):\n    g.plot('N', 'average', ax=ax, label=label, logx=True, logy=True, style=\"o--\")\nax.grid()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThus at low numbers of particles, CuPy has a performance overhead, but at larger numbers of particles (as limited by MemoryErrors on my device, with the regime shifting around 100 particles), the GPU (predictably) wins!\nWe can also calculate the runtime ratios for a speedup estimate:\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nspeedups = df[df.library =='numpy'].set_index('N').average / df[df.library =='cupy'].set_index('N').average\nspeedups\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\nN\n16       0.059079\n32       0.135752\n64       0.402321\n128      1.570570\n256      9.204320\n512     26.570801\n1024    34.179128\n2048    35.498837\n4096    35.409139\nName: average, dtype: float64\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nspeedups.plot(logx=True, style=\"o--\", logy=True)\nplt.ylabel(\"GPU over CPU speedup\");\nplt.grid()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhile this is obviously not a full proper test (we don't know how much host-device memory transfer would impact our timings, etc), it's at least nice to see that we get 35 times the speed on the GPU for the pure acceleration stage basically for free!",
      "tags": "cupy,gpu,nbody,python",
      "url": "https://stanczakdominik.github.io/posts/cupy-nbody-direct-force-calculation/"
    },
    {
      "title": "scipy.integrate.solve_ivp and makeshift Poincar\u00e9 sections of the Rossler attractor",
      "text": "I've just stumbled upon a relatively recent addition to scipy: integrate.solve_ivp, which looks amazing for the simulation of dynamical systems and solving equations where you'd like to detect discrete events occuring (say, collisions). Let's a look at what it's all about, and then use it to simulate the Rossler attractor!\n\n\n\n\n\n\nIn\u00a0[84]:\n\n    \nrossler_attractor\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[84]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs usual, we start with the imports:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.integrate import solve_ivp\nplt.rcParams['figure.figsize'] = [11, 6]  # for larger pictures\n\n\n    \n\n\n\n\n\n\n\nFirst let's remake an example from solve_ivp's documentation - an upward cannon shot, for which we'll want to get the trajectory from the moment of the launch until the cannonball hits the ground.\nWe define a derivative for our ODE (Newton's law with $g = -10 \\text{m}/\\text{s}2$ for simplicity):\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndef upward_cannon(t, y):\n        return [y[1],  # the derivative of the position is the velocity\n            -10    # the derivative of the velocity is the acceleration ~ -10 m/s2\n           ] \n\n\n    \n\n\n\n\n\n\n\nWe then define an event - a function that returns 0 once the event we're looking for has occured (in this case, once $y = 0$). This is pretty simple:\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndef hit_ground(t, y):\n    return y[0]\n\n\n    \n\n\n\n\n\n\n\nThis is where the cool part begins. We want to specify that the iteration should stop once the ground is hit, and we want to additionally specify that the function must go from positive to negative - otherwise, the start (from y = 0) would count! This is done, as per SciPy docs, via monkey patching and I won't deny I giggled when I figured this out:\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nhit_ground.terminal = True\nhit_ground.direction = -1\nhit_ground, hit_ground.terminal, hit_ground.direction\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n(<function __main__.hit_ground(t, y)>, True, -1)\n\n\n\n\n\n\n\n\n\n\n\nLet's run the function now:\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nsol = solve_ivp(upward_cannon,    # derivative function\n                [0, 10],          # time span for integration - make this generous\n                [0, 10],          # initial condition\n                events=hit_ground)\nsol\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n  message: 'A termination event occurred.'\n     nfev: 38\n     njev: 0\n      nlu: 0\n      sol: None\n   status: 1\n  success: True\n        t: array([0.00000000e+00, 9.99900005e-05, 1.09989001e-03, 1.10988901e-02,\n       1.11088891e-01, 1.11098890e+00, 2.00000000e+00])\n t_events: [array([2.])]\n        y: array([[ 0.00000000e+00,  9.99850015e-04,  1.09928513e-02,\n         1.10372974e-01,  1.04918520e+00,  4.93840733e+00,\n         1.77635684e-15],\n       [ 1.00000000e+01,  9.99900010e+00,  9.98900110e+00,\n         9.88901110e+00,  8.88911109e+00, -1.10988896e+00,\n        -1.00000000e+01]])\n\n\n\n\n\n\n\n\n\n\n\nAll right, the cannonball's flight was successfully terminated.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nplt.plot(sol.t, sol.y[0], label=\"vertical position\")\nplt.plot(sol.t, sol.y[1], label=\"vertical velocity\")\nplt.legend();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGosh, ain't that plot ugly, though! We can fix it with the t_eval parameter to solve_ivp, which forces calculations of the function at the prescribed times. We'll also add another event that calculates when the cannonball stops in mid-air:\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndef zero_velocity(t, y):\n    return y[1]\n\nt = np.linspace(0, 10)\nsol_t_eval = solve_ivp(upward_cannon,\n                       [0, 10],\n                       [0, 10],\n                       events=[hit_ground, zero_velocity],\n                       t_eval=t)\nplt.plot(sol_t_eval.t, sol_t_eval.y[0])\nplt.plot(sol_t_eval.t, sol_t_eval.y[1])\nsol_t_eval.t_events\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n[array([2.]), array([1.])]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOf course, the first array of event times corresponds to hitting-the-ground-with-a-thud, and the second corresponds to stopping in midair. Notice how the trajectory seems to stop early, though:\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nsol_t_eval.t.max()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n1.836734693877551\n\n\n\n\n\n\n\n\n\n\n\nBut that's just a case of having few (50 by default) points in our linspace:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nsol_t_eval_fixed = solve_ivp(upward_cannon,\n                           [0, 10],\n                           [0, 10],\n                           events=[hit_ground, zero_velocity],\n                           t_eval=np.linspace(0, 10, 200))\nplt.plot(sol_t_eval_fixed.t, sol_t_eval_fixed.y[0])\nplt.plot(sol_t_eval_fixed.t, sol_t_eval_fixed.y[1])\nsol_t_eval_fixed.t.max()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n1.9597989949748744\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMuch better! And now, let's abandon this toy example and do something I've been putting off for a good while, now:\nPoincar\u00e9 section of the Rossler attractor\u00b6As seen on Wikipedia (and it is amazing that if you go to edit, you can just copypaste the LaTeX source), the Rossler system is defined by the following set of differential equations:\n$$ \\begin{cases}  \\frac{dx}{dt} = -y - z \\\\ \\frac{dy}{dt} = x + ay \\\\ \\frac{dz}{dt} = b + z(x-c) \\end{cases} $$\nWe'll take sample parameters from Wikipedia and set up the derivative function:\n\n\n\n\n\n\nIn\u00a0[55]:\n\n    \na=0.1\nb=0.1\nc=14\nx_section = 10\n\ndef rossler(t, vector):\n    x, y, z = vector   # for readability\n    return [-y -z,\n            x + a * y,\n            b + z * (x - c),\n           ]\n\n\n    \n\n\n\n\n\n\n\nWhat we want to do here is figure out a way to take a Poincar\u00e9 (with whom I have a love-hate relationship, the love coming from his achievements and the hate coming from the \u00e9 I have had to paste multiple times here) section. The way I think about Poincar\u00e9 sections is that they're simply intersections of the trajectory of a system (the $\\vec{y}(t) = (x(t), y(t), z(t)$ curve) with some particular surface. Wikipedia has a more formal definition of those.\nWe'll define our Poincar\u00e9 section as $x = 10, \\dot{x} < 0$. I picked $x=10$ simply because the plots came out nicely that way.\nEDIT: THE NEXT PART HAS TURNED OUT TO BE WILDLY INCORRECT, PLEASE TAKE NOTE THAT WHAT I SAID HERE WAS WRONG. THE PROPER SOLUTION IS BELOW\nUnfortunately, solve_ivp at the time of writing does not seem to support saving values of the vector $\\vec{y} = (x, y, z)$ at event times - it simply saves the times themselves. That's probably a future PR - but for now, we can hack that ourselves, given that we're just interested in collecting a bunch of points at $x \\approx 10$:\n\n\n\n\n\n\nIn\u00a0[56]:\n\n    \nevents = []\ndef poincare(t, vector):\n    x = vector[0]\n    if np.isclose(x, x_section, rtol=1e-9, atol=1e-12):\n        events.append((t, vector))\n    return x - x_section\npoincare.direction = -1    # decreasing x\n\nsol = solve_ivp(rossler,\n               [0, 500000],\n               [-0.2, 0.2, 5.2],\n               events=poincare)\n\n\n    \n\n\n\n\n\n\nIn\u00a0[57]:\n\n    \nlen(sol.t_events[0])/len(events)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[57]:\n\n\n\n\n\n0.4678223495702006\n\n\n\n\n\n\n\n\n\n\n\nTurns out we got about twice as many section events as we should have. This is reasonable - as the solver of the equation defined by poincare(x,y,z) = 0 equation creeps closer and closer to a point where it's exactly satisfied, poincare is evaluated multiple times - and events gets multiple entries from each actual P-section. No matter! For most of our plots, this is going to be fine.\nWe'll plot the whole trajectory we got in glorious 3D, with the Poincar\u00e9 section in orange:\n\n\n\n\n\n\nIn\u00a0[58]:\n\n    \nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.plot(sol.y[0], sol.y[1], sol.y[2], ',')\n\nvectors = np.array([e[1] for e in events])\nt = np.array([e[0] for e in events])\nx, y, z = vectors.T\nax.plot(x, y, z, \".\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll take another picture from a different angle to show that this is indeed the Poincar\u00e9 section we were looking for:\n\n\n\n\n\n\nIn\u00a0[59]:\n\n    \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.view_init(30, -90)\nax.plot(sol.y[0], sol.y[1], sol.y[2], ',')\nax.plot(x, y, z, \".\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also plot simply $y(t_n)$ for each passage through the $x = 10$ plane (in the correct direction):\n\n\n\n\n\n\nIn\u00a0[60]:\n\n    \nplt.plot(t, y, \",\")\nplt.xlabel(\"t\")\nplt.ylabel(\"y\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich is of course rather unenlightening. What we would be ultimately interested in is a Poincar\u00e9 map - a map of $y(t_{n+1})$ plotted against $y(t_n)$. This has many useful properties that I'm just beginning to learn about. Let's see what we get:\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \nplt.plot(y[:-1], y[1:], \",\")\nplt.xlabel(r\"$y(t_n)$\")\nplt.ylabel(r\"$y(t_{n+1})$\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[61]:\n\n\n\n\n\nText(0, 0.5, '$y(t_{n+1})$')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that \",\" passed to plt.plot draws a single pixel at each point's location. If you look closely, you can see something like a 3D-rotated peak of the Rossler attractor (it's sort of shaped like a U, except the open-ended lines are bent towards the left).\nThere is also a line corresponding to $y(t_n) = y(t_{n+1})$. This one is to be expected as an artifact of our faulty point-gathering method. Remember that we gathered about twice as many points as there were points located by solve_ivp? Well, this just shows that those twice-as-many-points are mostly pairs of adjacent points close to each other! To illustrate what I mean, let me calculate $|y(t_{n+1}) - y(t_n)|$ for each $t_n$ in the trajectory and plot a histogram of that:\n\n\n\n\n\n\nIn\u00a0[62]:\n\n    \nplt.hist(np.abs(np.diff(y)), bins=100)\nplt.xlabel(r\"|y(t_n) = y(t_{n+1})|\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[62]:\n\n\n\n\n\nText(0.5, 0, '|y(t_n) = y(t_{n+1})|')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat's about 100k points that didn't move much at all between two hits of the $x=10$ plane! That's clearly incorrect.\nFixed hack-less version\u00b6As MatthewFlamm points out on GitHub, though the documentation I had needed to see was only available on scipy's master branch, the dense_output flag to solve_ivp solves our issue:\n\n\n\n\n\n\nIn\u00a0[65]:\n\n    \ndef poincare(t, vector):\n    x = vector[0]\n    return x - x_section\n\npoincare.direction = -1    # decreasing x\nsol = solve_ivp(rossler,\n               [0, 500000],\n               [-0.2, 0.2, 5.2],\n               events=poincare,\n               dense_output=True)\n\nsol.sol\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[65]:\n\n\n\n\n\n<scipy.integrate._ivp.common.OdeSolution at 0x7f1a0d35cb38>\n\n\n\n\n\n\n\n\n\n\n\nThis returns a callable that we can use to interpolate the solution to any time point we choose, especially the event times:\n\n\n\n\n\n\nIn\u00a0[66]:\n\n    \nt = sol.t_events[0]\nvectors = sol.sol(t)\nvectors\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[66]:\n\n\n\n\n\narray([[10.        , 10.        , 10.        , ..., 10.        ,\n        10.        , 10.        ],\n       [ 6.43880307, 12.76136452,  8.36333749, ...,  7.63756891,\n         9.95585964, 13.35530381],\n       [ 0.03343946,  0.23215879, 19.95229153, ..., 23.0356289 ,\n         0.06066276,  3.4934677 ]])\n\n\n\n\n\n\n\n\n\n\n\nAnd now we just redo the plots we had before, making them a little nicer:\n\n\n\n\n\n\nIn\u00a0[83]:\n\n    \nrossler_attractor = plt.figure(figsize=(12, 8))\nax = rossler_attractor.add_subplot(111, projection='3d')\nax.plot(sol.y[0], sol.y[1], sol.y[2], ',', alpha=0.02)\n\nx, y, z = vectors\nax.plot(x, y, z, \".\", alpha=0.02)\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom the other angle:\n\n\n\n\n\n\nIn\u00a0[51]:\n\n    \nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.view_init(30, -90)\nax.plot(sol.y[0], sol.y[1], sol.y[2], ',')\nax.plot(x, y, z, \".\")\nax.set_xlabel(\"x\")\nax.set_ylabel(\"y\")\nax.set_zlabel(\"z\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[52]:\n\n    \nplt.plot(t, y, \",\")\nplt.xlabel(\"t\")\nplt.ylabel(\"y\");\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$y(t_{n+1})$ plotted against $y(t_n)$:\n\n\n\n\n\n\nIn\u00a0[53]:\n\n    \nplt.plot(y[:-1], y[1:], \",\")\nplt.xlabel(r\"$y(t_n)$\")\nplt.ylabel(r\"$y(t_{n+1})$\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[53]:\n\n\n\n\n\nText(0, 0.5, '$y(t_{n+1})$')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs you can see, that actually looks like it should, the histogram below should also not have a peak at 0:\n\n\n\n\n\n\nIn\u00a0[54]:\n\n    \nplt.hist(np.abs(np.diff(y)), bins=100)\nplt.xlabel(r\"|y(t_n) = y(t_{n+1})|\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[54]:\n\n\n\n\n\nText(0.5, 0, '|y(t_n) = y(t_{n+1})|')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd it does not, indeed!\nThus, solve_ivp becomes even more awesome than I had thought it was! Check it out!",
      "tags": "nonlinear-dynamics,python,rossler,scipy,simulation",
      "url": "https://stanczakdominik.github.io/posts/scipyintegratesolve_ivp-and-makeshift-poincare-sections-of-the-rossler-attractor/"
    },
    {
      "title": "Credits: people I wouldn't have gotten here without",
      "text": "In alphabetic order, as I would rather not judge their relative importances. If\nthe order is unalphabetic or if you think I have forgotten someone, \nPRs are welcome and angry IMs are as well, if you're into that kind of thing.\n\nKabat \"Piotr\" Kabaci\u0144ski, my partner in physics crime and StarCraft misdemeanor from the first years of university. Living proof that reaching out to people with interesting profile pictures (\"oh, isn't that Tassadar?\") is the best investment you can make in life.\nKarolina Czerniak, who's my personal definition of a scientific success story and a constant source of cheer in my life.\nMonika Seniut, who worked with me despite my quirks and always pushed me to improve further and further. Some say she's still out there, continuing to improve further and further to this day.\nPaulina Marikin, my wonderful girlfriend, who's always amazingly supportive, frankly amazing and will always provide you with an interesting fact about graph theory.\nPlasmaPy Community, The: for many a PR collaborated on and many a glorious pun made. I learned a lot from them.\nPythonistas, the people behind the entire open source and scientific computing ecosystem who give us all jobs - and not just those behind Python, of course!\nRichard Feynman, who needs no introduction and whose books basically got me into physics.\n\n... and many others that I'm sure I missed - my sincerest apologies!",
      "tags": "",
      "url": "https://stanczakdominik.github.io/credits/"
    },
    {
      "title": "Quantitative data analysis of the 2D Ising model",
      "text": "Last time, we made a neat little implementation of a 2D Ising model simulation, and we showed that it looks reasonable. Well, that it might, but we can't be certain of that! I know I said that next time we would, er, %timeit, put it on the GPU and make it GO FAST, but perhaps it's a better idea to start with some data analysis first, making sure the result we're getting are quantitatively what we would like them to be - physical.\n\nOne more errata: conveniently forgetting to mention that we were working with the assumption that there's no external magnetic field. Let it be known that we're neglecting any external magnetic field. Let's resummarize the results here:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nplt.rcParams['figure.figsize'] = [11, 6]  # for larger pictures\nsize = (64, 64)\n\nnp.random.seed(0)\na = np.random.randint(low=0, high=2, size=size) * 2 - 1\nplt.imshow(a, cmap='binary')\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI'll modify the better_iteration function we arrived at in two ways: the name could be better, as in, it tries to flip half the spins on the grid, so we'll call it half_iteration. We'll also make it so that the spin matrix a is modified in-place, without copying, to save memory and computation time:\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndef half_iteration(a, mask, J = 1, beta = 1):\n    interactions = np.roll(a, 1, 0) + np.roll(a, 1, 1) + np.roll(a, -1, 0) + np.roll(a, -1, 1)\n    deltaE = 2 * J * a * interactions\n    boltzmann = np.exp(-beta * deltaE) * mask\n    flip_these = np.random.random(a.shape) < boltzmann\n    a[flip_these] *= -1\n\n# make a checkerboard pattern to preserve causality, updating spins on alternating diagonals in each iteration\ndef mask(a):\n    a_mask = np.ones_like(a)\n    a_mask[::2, ::2] = 0\n    a_mask[1::2, 1::2] = 0\n    return a_mask\n\ndef full_iteration(a, mask, J = 1, beta = 1):\n    # this now becomes a VERY thin wrapper!\n    half_iteration(a, mask, J, beta)\n    half_iteration(a, 1-mask, J, beta)\n\n\na_mask = mask(a)\nfull_iteration(a, a_mask)\nplt.imshow(a, cmap='binary')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n<matplotlib.image.AxesImage at 0x7f7e8556edd8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe are now in the exact spot where we left off a week ago. Let's do some quantitative calculation now!\nThere are three main diagnostics (that I know of) that you would be interested in when looking at this kind of system:\n\nthe average magnetization, which is simply the average of all spins\nthe internal energy, which is -0.5 * deltaE in our half_iteration code for each spin (and globally, we would take the average of that, so technically it's the average internal energy per spin)\nthe heat capacity, which is the partial derivative of internal energy with respect to the temperature\n\nThe first two can be grabbed straightforwardly from each snapshot of the iteration, and then averaged to decrease the effect of fluctuations. The third, as seen on Richard Fitzpatrick's website, can be calculated as\n$$C_v = \\frac{dU}{dT} = \\frac{\\sigma_U2}{k_B T2} $$Let's get to it!\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndef magnetization(a):\n    return a.mean(), a.std()\n\ndef internal_energy(a, J = 1):\n    interactions = np.roll(a, 1, 0) + np.roll(a, 1, 1) + np.roll(a, -1, 0) + np.roll(a, -1, 1)\n    current_energy = -J * a * interactions\n    return current_energy.mean(), current_energy.std()\n\nmagnetization(a), internal_energy(a)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n((0.0205078125, 0.9997896926986519), (-2.123046875, 1.816938556075228))\n\n\n\n\n\n\n\n\n\n\n\nWell, that's a whole lot of variance! Our system has definitely not converged to any stable state yet. Let's repeat that after a bunch of iterations:\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \na_bunch = 100\nfor i in range(a_bunch):\n    full_iteration(a, a_mask)\n\nplt.imshow(a, cmap='binary')\nmagnetization(a), internal_energy(a)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n((0.9990234375, 0.04418338291352976), (-3.9921875, 0.19748788530882092))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell, that's better. A little bleak, but it certainly seems stable.\n\n\n\n\n\n\n\nAll right! This is what we wanted. The system has nearly converged to a stable state, so its magnetization (remember that we're way under the critical temperature) is almost fully in one direction, and the internal energy is way lower than what we've had before, suggesting that this state is much closer to equilibrium.\nLet's try to get the energies and plot this:\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nk_b = 1\nT_range = np.linspace(1.5, 3.5, 300)\niterations = 100\nenergies = []\nmagnetizations = []\nfor T in tqdm_notebook(T_range):\n    beta = 1 / (k_b * T)\n    np.random.seed(0)\n    a = np.random.randint(low=0, high=2, size=size) * 2 - 1\n    a_mask = mask(a)\n    for i in range(iterations):\n        full_iteration(a, a_mask, beta=beta)\n    energies.append(internal_energy(a))    \n    magnetizations.append(magnetization(a))   \n\nE, dE = np.array(energies).T\nM, dM = np.array(magnetizations).T\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(IntProgress(value=0, max=300), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll also need a bunch of plots, and we'd like to use $C_v$ to let us find the critical temperature as exhibited by our simulation as its maximum. Let's stick the analysis we want into a function:\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nOnsager_critical_temperature = 2 / np.log(1 + 2**0.5)  # a theoretical value\n\ndef analysis(T_range, E, dE, M, dM, plotting=True):\n    Cv = dE**2 / k_b / T_range**2  # see Fitzpatrick\n    maximum_index = np.argmax(Cv)\n    our_critical_temperature = T_range[maximum_index]\n    if plotting:\n        plt.plot(T_range, E)\n        plt.xlabel(r\"Temperature [in units where $k_B = 1$]\")\n        plt.ylabel(\"Average energy per spin\")\n        plt.xlim(T_range.min(), T_range.max());\n        plt.vlines(Onsager_critical_temperature, E.min(), E.max())\n\n        plt.figure()\n\n        plt.plot(T_range, M)\n        plt.xlabel(r\"Temperature [in units where $k_B = 1$]\")\n        plt.ylabel(\"Average magnetization\")\n        plt.xlim(T_range.min(), T_range.max());\n        plt.vlines(Onsager_critical_temperature, M.min(), M.max())\n\n\n        plt.figure()\n        plt.plot(T_range, Cv, \"o-\")\n        plt.xlabel(r\"Temperature [in units where $k_B = 1$]\")\n        plt.ylabel(\"Heat capacity per spin\")\n        plt.xlim(T_range.min(), T_range.max());\n        plt.vlines(Onsager_critical_temperature, Cv.min(), Cv.max())\n\n    return our_critical_temperature\nanalysis(T_range, E, dE, M, dM)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n2.2959866220735785\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd if I've ever seen a plot that says nothing, it's this one. It seems all random. There's a simple issue underneath this: since we're starting from a randomized grid, there is no telling which spin state the system will converge to at a low temperature. Note how there's much less noise above the critical temperature as found by Onsager back in 1944, as denoted by the vertical line. This makes intuitive sense: above the critical temperature the system converges to an essentially random state, and each of those is basically equivalent.\nLet's try this again, from a cold start (all spins up):\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nenergies = []\nmagnetizations = []\nfor T in tqdm_notebook(T_range):\n    beta = 1 / (k_b * T)\n    a = np.ones(size)\n    a_mask = mask(a)\n    for i in range(iterations):\n        full_iteration(a, a_mask, beta=beta)\n    energies.append(internal_energy(a))    \n    magnetizations.append(magnetization(a))   \n\nE, dE = np.array(energies).T\nM, dM = np.array(magnetizations).T\n\nanalysis(T_range, E, dE, M, dM)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(IntProgress(value=0, max=300), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n2.322742474916388\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThat's a bit better, but not quite enough. The measurement  is still noisy. What we need to do is average the energies and magnetizations over a bunch of iterations. We'll also stick our entire logic into a function:\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \ndef simulation(iterations, size=size, T_range=T_range, k_b=k_b, plotting=True):\n    energies = []\n    magnetizations = []\n    a_mask = np.ones(size)\n    a_mask[::2, ::2] = 0\n    a_mask[1::2, 1::2] = 0\n    \n    for T in tqdm_notebook(T_range):\n        beta = 1 / (k_b * T)\n        a = np.ones(size)\n        E = np.zeros(2)\n        M = np.zeros(2)\n        for i in range(iterations):\n            E += internal_energy(a)\n            M += magnetization(a)\n            full_iteration(a, a_mask, beta=beta)\n        energies.append(E / iterations)\n        magnetizations.append(M / iterations)   \n\n    E, dE = np.array(energies).T\n    M, dM = np.array(magnetizations).T\n    return analysis(T_range, E, dE, M, dM, plotting)\nsimulation(1000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(IntProgress(value=0, max=300), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n2.32943143812709\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSo we're getting relatively good agreement with Fitzpatrick's results, but on the other hand... our critical temperature is slightly off and the peak is not as sharp as it should probably be. Perhaps this is an issue of small grid size?\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nsimulation(1000, (128, 128))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(IntProgress(value=0, max=300), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n2.3361204013377925\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOkay, and what if we go in the other direction, towards smaller sizes:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nsimulation(500, (16, 16))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nHBox(children=(IntProgress(value=0, max=300), HTML(value='')))\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n2.3896321070234112\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterestingly, while the peak's behavior is not changing, the estimated critical temperature does change a bit. However, I'm trying to write this blog in half-hour chunks, and running multiple simulations does eat into that period. In other words, while we have shown that the magnetization and internal energy qualitatively behave just as they should for these few runs, it'd be nice to find out whether we converge to the critical temperature - and we're going to need to run a whole bunch of simulations to do that. We do need to speed this up, after all!",
      "tags": "ising,numpy,python,simulation",
      "url": "https://stanczakdominik.github.io/posts/quantitative-data-analysis-of-the-2d-ising-model/"
    },
    {
      "title": "Parallelizable Numpy implementation of 2D Ising model",
      "text": "In the next few posts I'd like to discuss a fun project I've been procrastinating things with recently - a parallelizable (up to the GPU level) Python Numpy implementation of the 2D Ising model, which I won't introduce at length here because it's been covered really well in multiple places out there and I'd rather not repeat them.\nThe gist of it is that we have a grid of discrete spins represented by integers, +1 for spin up and -1 for spin down. Each spin interacts with its nearest neighbors via a sum of products of that spin's value and the neighbor's value, times minus a positive constant J. The minus is there so that spins pointing the same way decrease the total energy and spins pointing in the opposite direction increase it.\n\nLet's get to it!\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\n\nFor now, we'll run a 16x16 grid, representing spin up as black and spin down as white.\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nplt.rcParams['figure.figsize'] = [11, 6]  # for larger pictures\nplt.rcParams['image.cmap'] = 'plasma'    # well duh\nsize = (16, 16)\n\nnp.random.seed(20)\na = np.random.randint(low=0, high=2, size=size) * 2 - 1\nplt.imshow(a, cmap='binary')\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe usual Monte Carlo Markov Chain (Metropolis algorithm) implementation for this goes like this:\n\npick a spin (point on the grid) at random\ncalculate the change in energy $\\Delta E$ that would result from flipping it\nuse that change in energy to figure out how likely the flipped state is via a Boltzmann $\\exp(\\beta \\Delta E)$ factor (clearly non-negative), calculated from interactions with neighboring spins\nuse that probability with an uniformly-distributed random number to reject or accept the state with the flipped state\nrun a boatload of iterations\n\nIt's a nice algorithm, don't get me wrong - but it seems needlessly complex to parallelize if you're just picking one spin at a time. Why not try to flip every spin at a time? Let's try that!\nFirst up, for each spin, we'll calculate its interaction terms, with periodic boundary conditions. This just means that for each spin, we add up the sum of its neighbors' spins (check the math, it really works like that), reaching to the other side on the edges. numpy.roll is amazing for that:\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \ninteractions = np.roll(a, 1, 0) + np.roll(a, 1, 1) + np.roll(a, -1, 0) + np.roll(a, -1, 1)\nplt.imshow(interactions)\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'll just keep our constants \"reasonable\" (equal to 1), as simulationistas are wont to do. We'll keep writing them though, so as to keep in mind where they should go in. The full energy is just the local spin's value times its neighbors' spins (the local spin factors out of the sum), times a constant:\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nJ = 1 # a material constant defining the strength of the interaction\n\ncurrent_energy = - J * a * interactions\nplt.imshow(current_energy)\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe'd expect the low energy spins to remain as they are, and the high energy spins to flip, so as to decrease the system's energy.\nIt's also simple to calculate the change in energy: boldly keeping the interaction terms constant, we just change the sign on a, so:\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \ndeltaE = 2 * J * a * interactions # = final state - initial state = -J interactions * ( (-a) - (a) )\nplt.imshow(deltaE)\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet's now get the Boltzmann factor:\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \nbeta = 1 # inverse thermal energy 1 / (k_B*T)\nboltzmann = np.exp(-beta * deltaE)\nplt.imshow(boltzmann)\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOuch, look at that colorbar! Note that we're only comparing the Boltzmann factor (which is in the range of $[0, \\infty)$ ) with a standard (phew, almost callled it a normal) random number with a uniform distribution from the $(0, 1)$ range. I'm not going to bother paying attention to the boundaries because they're infinitely unlikely for floats anyway.\nThus, a \"better\" (though admittedly uglier) plot that shows spins that are definitely going to flip in yellow is:\n\n\n\n\n\n\nIn\u00a0[32]:\n\n    \nplt.imshow(boltzmann, vmax = 1)\nplt.colorbar();\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGiven how ugly this plot was, let's take a quick look at the distribution of these Boltzmann factors, inverstigating their arguments first:\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \nnp.unique(-beta * deltaE)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[33]:\n\n\n\n\n\narray([-8, -4,  0,  4,  8])\n\n\n\n\n\n\n\n\n\n\n\nAnd now the actual Boltzmann factors, though we'll just force each one above 1 to be 1 exactly:\n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \nnp.unique(boltzmann)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[34]:\n\n\n\n\n\narray([3.35462628e-04, 1.83156389e-02, 1.00000000e+00, 5.45981500e+01,\n       2.98095799e+03])\n\n\n\n\n\n\n\n\n\n\n\nIn other words, because of the discrete and simple ($s = \\pm1$) nature of the system, there are only a few possiblities.\nWe still need to figure out which spins will actually be flipped. That's quite simple as well.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nrandoms = np.random.random(size)\nflip_these = randoms < boltzmann\n\n_, axes = plt.subplots(ncols=2)\naxes[0].imshow(randoms);\naxes[1].imshow(flip_these.astype(int), cmap='binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote that we can now show the difference between which spins are definitely going to be flipped, and which spins are just \"randomly\" flipped:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nflip_these_for_sure = boltzmann >= 1\n_, axes = plt.subplots(ncols=2)\naxes[0].imshow(flip_these  flip_these_for_sure)\naxes[1].imshow(boltzmann, vmax = 1);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIt's not many, but it's important to take those into account! And now we flip all of them, with a \"before vs after\" picture:\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \na_new = a.copy() # I'm keeping `a` for plotting, but you could certainly do it in-place\n\na_new[flip_these] *= -1\n\n_, axes = plt.subplots(ncols=2)\naxes[0].imshow(a, cmap='binary')\naxes[1].imshow(a_new, cmap = 'binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDid that work? Well... not quite, as you may already see. We made a little assumption in there that is going to mess this up. Let me just resummarize the computational loop really quickly, and check that I did so correctly. Note how the actual code is pretty short, too.\n\n\n\n\n\n\nIn\u00a0[37]:\n\n    \ndef iteration(a, J = 1, beta = 1):\n    interactions = np.roll(a, 1, 0) + np.roll(a, 1, 1) + np.roll(a, -1, 0) + np.roll(a, -1, 1)\n    deltaE = 2 * J * a * interactions\n    boltzmann = np.exp(-beta * deltaE)\n    flip_these = np.random.random(a.shape) < boltzmann\n    new_a = a.copy()     # this could be neglected for an in-place implementation\n    new_a[flip_these] *= -1\n    return new_a\n\n_, axes = plt.subplots(ncols=2)\naxes[0].imshow(a, cmap='binary')\naxes[1].imshow(iteration(a), cmap = 'binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDo you see the problem yet? If not, this Python translation of a popular song should do it:\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \nold_boss = np.array([[1, -1],       # excuse my variable naming\n                    [-1, 1]])       # this is all part of the plan\n\n_, axes = plt.subplots(ncols=3)\naxes[0].imshow(old_boss, cmap='binary')\n\nboss = iteration(old_boss)\naxes[1].imshow(boss, cmap = 'binary');   # oh no...\n\nnew_boss = iteration(boss)\naxes[2].imshow(new_boss, cmap = 'binary');  # oh, yeaaah\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd if you haven't guessed yet:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nfrom IPython.display import YouTubeVideo\nYouTubeVideo(\"zYMD_W_r3Fg\", start=472)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n        \n        \n\n\n\n\n\n\n\n\n\n\nNote how I am merciful and spared you from having to lower your volume beforehand! You can trust me with these things.\nRemember that earlier we boldly (ctrl-f that if you don't recall!) kept the interaction terms constant. But that's a terrible mistake in terms of causality! Let's take a look at this again:\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nplt.imshow(new_boss, cmap='binary')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n<matplotlib.image.AxesImage at 0x7f77dbb2d2b0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe black spins depend on the white spins for their energy calculation and vice versa. You can't update the white spins at the same time as the black ones are changing.\nThis pattern, though, provides a way out of this conundrum. We can use old_boss as a mask! We'll take turns updating the black and white spins this way.\n\n\n\n\n\n\nIn\u00a0[39]:\n\n    \ndef better_iteration(a, mask, J = 1, beta = 1):\n    interactions = np.roll(a, 1, 0) + np.roll(a, 1, 1) + np.roll(a, -1, 0) + np.roll(a, -1, 1)\n    deltaE = 2 * J * a * interactions # = final state - initial state = interactions * ( (-a) - (a) )\n    boltzmann = np.exp(-beta * deltaE) * mask    # this has been modified!\n    flip_these = np.random.random(a.shape) < boltzmann\n    new_a = a.copy()\n    new_a[flip_these] *= -1\n    return new_a\n\n_, axes = plt.subplots(ncols=3)\naxes[0].imshow(old_boss, cmap='binary')\n\nbetter_boss = better_iteration(old_boss, mask=old_boss)\naxes[1].imshow(better_boss, cmap = 'binary');\n\nbetter_new_boss = better_iteration(better_boss, mask= 1 - old_boss) # note the negation here\naxes[2].imshow(better_boss, cmap = 'binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd to demonstrate that this doesn't get us spurious updates on the full grid:\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \na_mask = np.ones_like(a)\na_mask[::2, ::2] = 0\na_mask[1::2, 1::2] = 0\n\ndef full_iteration(a, mask, J = 1, beta = 1):\n    intermediate = better_iteration(a, mask, J, beta)\n    return better_iteration(intermediate, 1-mask, J, beta)\n\n_, axes = plt.subplots(ncols=4)\naxes[0].imshow(a_mask, cmap='binary');\naxes[1].imshow(a, cmap='binary')\naxes[2].imshow(better_iteration(a, a_mask), cmap='binary')\n\nfinal_a = full_iteration(a, a_mask)\naxes[3].imshow(final_a, cmap = 'binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd I think we've earned this:\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nYouTubeVideo(\"zYMD_W_r3Fg\", start=462) # headphone warning!\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n        \n        \n\n\n\n\n\n\n\n\n\n\nLet's do one last check:\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \na_iterated = a.copy()\nnp.random.seed(0)\nfor i in range(10):\n    a_iterated = full_iteration(a_iterated, a_mask)\nplt.imshow(a_iterated, cmap='binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWell, that's certainly physical behavior, though annoying - stable domains are a hallmark of the 2D Ising model under the critical temperature of about 2.3 (with $k_b = 1$). At high temperatures, the system behaves more randomly:\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nbeta = 1 / (1 * 10)\na_iterated = a.copy()\nnp.random.seed(0)\nfor i in range(10):\n    a_iterated = full_iteration(a_iterated, a_mask, beta = beta)\nplt.imshow(a_iterated, cmap='binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhile under the critical temperature, the long-term stable state is the single domain, all-spins-parallel state:\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \na_iterated = a.copy()\nnp.random.seed(0)\nfor i in range(1000):\n    a_iterated = full_iteration(a_iterated, a_mask)\nplt.imshow(a_iterated, cmap='binary');\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd that beautiful plot is probably a good place to finish for today! Next up, benchmarking and optimization (as in, just straight up dumping this on the GPU)!",
      "tags": "ising,numpy,python,simulation",
      "url": "https://stanczakdominik.github.io/posts/parallelizable-numpy-implementation-of-2d-ising-model/"
    },
    {
      "title": "NumPy-ish GPU computations with CuPy",
      "text": "I've recently come across the amazing CuPy library, and given that I haven't updated this blog in a while, I figured this would be a great opportunity to showcase a few of its capabilities.\nIf you haven't heard yet, CuPy is NumPy, but on the GPU, and it's amazing how close that simple description is to reality.\n\nFirst things first! Make sure you've installed it (I used Conda with Python 3.6) and that your Nvidia drivers are on. On my laptop, running an integrated Intel and dedicated Nvidia GPU, I had to simply run sudo modprobe nvidia.  Let's see if that worked:\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n!nvidia-smi\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTue Jan 22 08:08:35 2019       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 415.27       Driver Version: 415.27       CUDA Version: 10.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0 Off |                  N/A |\n| N/A   65C    P0    24W /  N/A |      0MiB /  6078MiB |      0%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n\n\n\n\n\n\n\n\n\n\n\nYup! Let's get to it. We'll compare it with NumPy, of course:\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport cupy as cp\nimport numpy as np\n\n\n    \n\n\n\n\n\n\n\nI'm mostly interested in operations on dense matrices, so let's get ourselves a sample one. I'm not using an insanely large array due to MemoryErrors, but 2**20 floats should be a reasonable benchmark.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nN = 1024\nA = np.random.random((N, N))\nA\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\narray([[0.10388936, 0.27674225, 0.09349157, ..., 0.59858586, 0.01545899,\n        0.20201765],\n       [0.81588711, 0.19722361, 0.66885061, ..., 0.83687175, 0.15600763,\n        0.6171922 ],\n       [0.73374963, 0.66466975, 0.55082473, ..., 0.68605053, 0.93384799,\n        0.84729118],\n       ...,\n       [0.76718438, 0.40130284, 0.81041205, ..., 0.42829758, 0.42465592,\n        0.67533214],\n       [0.11546777, 0.35548417, 0.645703  , ..., 0.24879487, 0.58897384,\n        0.98993676],\n       [0.96847189, 0.21391942, 0.70259718, ..., 0.32546387, 0.97123257,\n        0.99439515]])\n\n\n\n\n\n\n\n\n\n\n\nThe CuPy API is basically Numpy's API, with a few minor differences here and there:\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nB = cp.random.random((N, N))\nB\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\narray([[0.5967192 , 0.51631595, 0.49980612, ..., 0.52830527, 0.4521689 ,\n        0.27857874],\n       [0.80999042, 0.32971922, 0.74034167, ..., 0.7316576 , 0.05339145,\n        0.67494372],\n       [0.66954774, 0.08282191, 0.06237442, ..., 0.85821394, 0.33912042,\n        0.00146102],\n       ...,\n       [0.87827673, 0.58662314, 0.97428079, ..., 0.1239315 , 0.90813556,\n        0.55808706],\n       [0.59890383, 0.54480358, 0.59180028, ..., 0.03094922, 0.54241454,\n        0.45274242],\n       [0.34639887, 0.49254118, 0.28915567, ..., 0.86708966, 0.97695957,\n        0.63873008]])\n\n\n\n\n\n\n\n\n\n\n\nOne thing that can be noticed already - that displayed numbers! Right there, in Jupyter! All the memory transfer is done for you as need be, though you can also force it as needed. To me, that's pretty amazing! Let's make sure this is actually on the GPU:\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n!nvidia-smi\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTue Jan 22 08:08:36 2019       \n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 415.27       Driver Version: 415.27       CUDA Version: 10.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 106...  Off  | 00000000:01:00.0 Off |                  N/A |\n| N/A   66C    P2    24W /  N/A |     95MiB /  6078MiB |      1%      Default |\n+-------------------------------+----------------------+----------------------+\n                                                                               \n+-----------------------------------------------------------------------------+\n| Processes:                                                       GPU Memory |\n|  GPU       PID   Type   Process name                             Usage      |\n|=============================================================================|\n|    0     12081      C   ...ik/.miniconda3/envs/nbody3.6/bin/python    85MiB |\n+-----------------------------------------------------------------------------+\n\n\n\n\n\n\n\n\n\n\n\nClearly a bunch of memory is allocated.\nA few benchmarks\u00b6All right, let's get to the actual number crunching. Let's take the simple element-wise log of each element in the array (on CPU that's going to run with the MKL-accelerated Numpy on an i7):\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n%%timeit -o\nnp.log(A)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n24.4 ms \u00b1 1.53 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n<TimeitResult : 24.4 ms \u00b1 1.53 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)>\n\n\n\n\n\n\n\n\n\n\n\nRespectable, I suppose. Let's see how CuPy fares against that:\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n%%timeit -o\ncp.log(B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n453 \u00b5s \u00b1 735 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n<TimeitResult : 453 \u00b5s \u00b1 735 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)>\n\n\n\n\n\n\n\n\n\n\n\nInstantly, I noticed two things:\n\nMy laptop fan started spinning up immediately after running that command. Clearly something more intense is going on there.\nMy screen went black. Fun fact: I wrote this post out of bed, without having plugged my laptop in - and my current system configuration did not enjoy having a power-hungry GPU try to run on battery, so it just switched off instantly. Consider yourself warned!\n\nAfter rebooting and using the classic Restart and run all, a third fun fact occured to me: a different SI prefix on the GPU result!\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n__.average / _.average\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n53.877025466882685\n\n\n\n\n\n\n\n\n\n\n\nThat's a pretty okay speedup for swapping n to c in the import statement.\nLet's see how well it's going to parallelize a matrix multiplication:\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ncpu_operator = %timeit -o A @ A\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n25.2 ms \u00b1 3.19 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ngpu_operator = %timeit -o B @ B\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n18.7 ms \u00b1 48.6 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n\n\n\n\n\n\n\n\n\n\nNote how that's literally the same operation in terms of code, as we're not using Numpy's functions, rather - both of these classes define an @ operator. This is going to come up later...\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \ncpu_operator.average / gpu_operator.average\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n1.3472357440051654\n\n\n\n\n\n\n\n\n\n\n\nWell, suprisingly, this is nowhere near as large of a speedup as I would expect! My results seem to vary a bit, though:\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \ngpu_operator_saved = %timeit -o B2 = B @ B\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n18.7 ms \u00b1 4.83 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \ngpu_dot = %timeit -o cp.dot(B, B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n9.37 ms \u00b1 10.8 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \ngpu_dot_saved = %timeit -o B3 = cp.dot(B, B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n17.4 ms \u00b1 3.26 ms per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nBtarget= cp.empty_like(B)\ngpu_dot_out = %timeit -o cp.dot(B, B, Btarget)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n18.7 ms \u00b1 9.19 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n\n\n\n\n\n\n\n\n\n\n\nI think I may come back to the matrix multiplication issue in the future, because it seems like there are multiple ways to do it and it's not clear which one is the best. Weirdly, the winner seems to be .dot(B, B), but...without saving. Let's keep this post to an overview of CuPy's functionality and possibly revisit that in the future. This may have been a BLAS/cuBLAS issue that I don't quite understand yet.\nFurther functionality review\u00b6Okay, but what actually is B?\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \ntype(B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\ncupy.core.core.ndarray\n\n\n\n\n\n\n\n\n\n\n\nAll right, some internal Cupy ndarray class. It's pretty simple to turn it into something in host device memory, though:\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \ntype(cp.asnumpy(B))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\nnumpy.ndarray\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \nB[0], cp.asnumpy(B)[0]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[22]:\n\n\n\n\n\n(array([0.5967192 , 0.51631595, 0.49980612, ..., 0.52830527, 0.4521689 ,\n        0.27857874]),\n array([0.5967192 , 0.51631595, 0.49980612, ..., 0.52830527, 0.4521689 ,\n        0.27857874]))\n\n\n\n\n\n\n\n\n\n\n\nJust to make sure this is actually the same array:\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nnp.allclose(B, cp.asnumpy(B))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-23-8ff31bdd3597> in <module>\n----> 1 np.allclose(B, cp.asnumpy(B))\n\n~/.local/lib/python3.6/site-packages/numpy/core/numeric.py in allclose(a, b, rtol, atol, equal_nan)\n   2268 \n   2269     \"\"\"\n-> 2270     res = all(isclose(a, b, rtol=rtol, atol=atol, equal_nan=equal_nan))\n   2271     return bool(res)\n   2272 \n\n~/.local/lib/python3.6/site-packages/numpy/core/numeric.py in isclose(a, b, rtol, atol, equal_nan)\n   2352             return less_equal(abs(x-y), atol + rtol * abs(y))\n   2353 \n-> 2354     x = asanyarray(a)\n   2355     y = asanyarray(b)\n   2356 \n\n~/.local/lib/python3.6/site-packages/numpy/core/numeric.py in asanyarray(a, dtype, order)\n    551 \n    552     \"\"\"\n--> 553     return array(a, dtype, copy=False, order=order, subok=True)\n    554 \n    555 \n\nValueError: object __array__ method not producing an array\n\n\n\n\n\n\n\n\n\n\nClose, but no cigar! I think this may be getting out of date relatively soon, but right now NumPy doesn't know how to handle our B GPU array. Another example of this is:\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nnp.log(B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-24-31256e41f3b1> in <module>\n----> 1 np.log(B)\n\nValueError: object __array__ method not producing an array\n\n\n\n\n\n\n\n\n\n\nWhat you could do instead is compare this right on the GPU, going from GPU to host to GPU again:\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \ncp.allclose(B, cp.asarray(cp.asnumpy(B)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n---------------------------------------------------------------------------\nAttributeError                            Traceback (most recent call last)\n<ipython-input-25-159d67e41f21> in <module>\n----> 1 cp.allclose(B, cp.asarray(cp.asnumpy(B)))\n\nAttributeError: module 'cupy' has no attribute 'allclose'\n\n\n\n\n\n\n\n\n\n\nAnd this is, actually, the first time I saw cupy not implementing something in NumPy's API! It's pretty easy to get around this, in this instance:\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \ncp.all(cp.isclose(B, cp.asarray(cp.asnumpy(B))))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\narray(True)\n\n\n\n\n\n\n\n\n\n\n\nI guess that's no proof that this works correctly, but it's at least an argument :)\nHowever... Wait a minute. What's that array thing doing there? As far as I have been able to figure out, this is a single element array allocated in GPU memory that .all() reduces our boolean NxN isclose array to. It's pretty simple to convert to a normal Python bool, though:\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nbool(_)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[27]:\n\n\n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\nReshape works, as does summing along an axis:\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nB.reshape(N, N, 1).sum(axis=1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[28]:\n\n\n\n\n\narray([[504.85090841],\n       [524.895922  ],\n       [511.81485662],\n       ...,\n       [505.07597442],\n       [505.44331639],\n       [508.71877327]])\n\n\n\n\n\n\n\n\n\n\n\nSo do statistical functions:\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \nB.mean(axis=0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[29]:\n\n\n\n\n\narray([0.49501721, 0.51289292, 0.51160649, ..., 0.49777249, 0.50287185,\n       0.49873693])\n\n\n\n\n\n\n\n\n\n\n\nYou can raise stuff to powers and sum to scalars:\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \n(A**3).sum(), (B**3).sum()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[30]:\n\n\n\n\n\n(262231.4456098349, array(262330.20455528))\n\n\n\n\n\n\n\n\n\n\n\nAnd of course, once again we need to force a cast to a Python float:\n\n\n\n\n\n\nIn\u00a0[31]:\n\n    \nfloat(_[1])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[31]:\n\n\n\n\n\n262330.2045552799\n\n\n\n\n\n\n\n\n\n\n\nYou can also, if you want to, sum into previously allocated arrays (I was thinking of using this to test performance differences between cupy and numba.cuda, haven't gotten to that yet, though):\n\n\n\n\n\n\nIn\u00a0[32]:\n\n    \nAx = np.linspace(0, 1, N)\nAx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[32]:\n\n\n\n\n\narray([0.00000000e+00, 9.77517107e-04, 1.95503421e-03, ...,\n       9.98044966e-01, 9.99022483e-01, 1.00000000e+00])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \nA.shape, Ax.shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[33]:\n\n\n\n\n\n((1024, 1024), (1024,))\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \nA.sum(axis=1, out=Ax)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[34]:\n\n\n\n\n\narray([497.48857494, 510.25752741, 493.57497492, ..., 515.3009242 ,\n       499.92205554, 512.74308963])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nBx = cp.linspace(0, 1, N)\nBx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[35]:\n\n\n\n\n\narray([0.00000000e+00, 9.77517107e-04, 1.95503421e-03, ...,\n       9.98044966e-01, 9.99022483e-01, 1.00000000e+00])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \nB.shape, Bx.shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[36]:\n\n\n\n\n\n((1024, 1024), (1024,))\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[37]:\n\n    \nB.sum(axis=1, out=Bx)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[37]:\n\n\n\n\n\narray([504.85090841, 524.895922  , 511.81485662, ..., 505.07597442,\n       505.44331639, 508.71877327])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \nBx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[38]:\n\n\n\n\n\narray([504.85090841, 524.895922  , 511.81485662, ..., 505.07597442,\n       505.44331639, 508.71877327])\n\n\n\n\n\n\n\n\n\n\n\nRandom numbers start from different seeds:\n\n\n\n\n\n\nIn\u00a0[39]:\n\n    \ncp.random.seed(0)\nRgpu = cp.random.random()\nnp.random.seed(0)\nRcpu = np.random.random()\nRgpu - Rcpu\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[39]:\n\n\n\n\n\narray(0.01273565)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \ncp.random.seed(0)\nRgpu2 = cp.random.random()\nRgpu2 - Rgpu\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[40]:\n\n\n\n\n\narray(0.)\n\n\n\n\n\n\n\n\n\n\n\nIndexing works just like we know and love it from numpy:\n\n\n\n\n\n\nIn\u00a0[41]:\n\n    \nBx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[41]:\n\n\n\n\n\narray([504.85090841, 524.895922  , 511.81485662, ..., 505.07597442,\n       505.44331639, 508.71877327])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \nBx[0] = 3\nBx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[42]:\n\n\n\n\n\narray([  3.        , 524.895922  , 511.81485662, ..., 505.07597442,\n       505.44331639, 508.71877327])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[43]:\n\n    \nBx[1::2] = -1\nBx\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[43]:\n\n\n\n\n\narray([  3.        ,  -1.        , 511.81485662, ...,  -1.        ,\n       505.44331639,  -1.        ])\n\n\n\n\n\n\n\n\n\n\n\nThe amazing power tool that is einsum works as well, let's use it to compute the array's trace:\n\n\n\n\n\n\nIn\u00a0[44]:\n\n    \ncp.einsum('ii->', B), cp.sum(cp.diag(B))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[44]:\n\n\n\n\n\n(array(493.15631992), array(493.15631992))\n\n\n\n\n\n\n\n\n\n\n\nWriting CPU and GPU agnostic code\u00b6This is a concept I found in CuPy's library and absolutely fell in love.\nIn some cases, you can use array methods and operators to do what you need. This is where that A @ A and B @ B concept comes back. However, that's not always possible. For example, there isn't a .log() method.\nHOWEVER, the CuPy folks had a pretty ingenious idea for solving that! Just watch:\n\n\n\n\n\n\nIn\u00a0[45]:\n\n    \ndef agnostic_log(array):\n    xp = cp.get_array_module(array)\n    return xp.log(array)\n\nagnostic_log(A), agnostic_log(B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[45]:\n\n\n\n\n\n(array([[-2.26442884, -1.28466872, -2.36988397, ..., -0.51318531,\n         -4.16956465, -1.59940023],\n        [-0.20347928, -1.62341712, -0.40219454, ..., -0.17808444,\n         -1.85785034, -0.4825748 ],\n        [-0.30958741, -0.40846499, -0.59633861, ..., -0.37680399,\n         -0.0684416 , -0.16571087],\n        ...,\n        [-0.26502811, -0.91303893, -0.21021246, ..., -0.84793704,\n         -0.85647603, -0.39255065],\n        [-2.15876381, -1.03427455, -0.43741564, ..., -1.39112655,\n         -0.52937351, -0.01011422],\n        [-0.03203582, -1.54215589, -0.35297155, ..., -1.12250382,\n         -0.02918932, -0.00562062]]),\n array([[-0.51630862, -0.66103639, -0.69353501, ..., -0.638081  ,\n         -0.79369951, -1.27805454],\n        [-0.21073286, -1.10951384, -0.30064348, ..., -0.31244264,\n         -2.93010466, -0.39312597],\n        [-0.40115281, -2.4910626 , -2.7746    , ..., -0.15290186,\n         -1.08140002, -6.52862238],\n        ...,\n        [-0.12979355, -0.53337268, -0.02605573, ..., -2.08802627,\n         -0.09636162, -0.5832403 ],\n        [-0.51265425, -0.60732996, -0.52458607, ..., -3.47540747,\n         -0.61172474, -0.79243193],\n        [-1.06016435, -0.70817722, -1.24079009, ..., -0.1426129 ,\n         -0.02331001, -0.44827332]]))\n\n\n\n\n\n\n\n\n\n\n\nSame function handles two completely different array types!\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \ncp.get_array_module(A), cp.get_array_module(B)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[46]:\n\n\n\n\n\n(<module 'numpy' from '/home/dominik/.local/lib/python3.6/site-packages/numpy/__init__.py'>,\n <module 'cupy' from '/home/dominik/.miniconda3/envs/nbody3.6/lib/python3.6/site-packages/cupy/__init__.py'>)\n\n\n\n\n\n\n\n\n\n\n\nThis is so simple, I absolutely love it. It's not perfect (you still have to define a new function), but it's a nice workaround. It may not be necessary for a lot longer, too...\nAnd given that I'm ending on links, I'll just add Matthew Rocklin's post about prototype GPU arrays on Dask clusters.\nTo sum up: CuPy is awesome, if you've got a GPU lying around (for games, etc), you can very easily use it for your number crunching as well!",
      "tags": "benchmark,cupy,numpy,python",
      "url": "https://stanczakdominik.github.io/posts/numpy-ish-gpu-computations-with-cupy/"
    },
    {
      "title": "An introduction",
      "text": "Why start this blog?\n\n\nTo share knowledge\nKnowledge does not diminish from being shared, instead it is reinforced and gains in utility.\nI gain much utility from amazing resources on the web and elsewhere. It is only fair that I disseminate some\nof that knowledge. I have lots of projects I start and tinker with. While I try to keep them over at GitHub,\nthey might be more useful to people with actual proper documentation and descriptions.\nBesides, I think I can help some people with stuff like Python, numerics, nonlinear dynamics, quitting vim,\nsetting up and using Linux, fluid and plasma dynamics, GPU computing, machine learning... While my perspective on these may not be helpful to all, I certainly don't expect it\nto do harm.\nBecause some things just make you want to tell the world all about them\nThere's a lot of beautiful science and physics around the world and plenty of it in simulation, which is my personal area of preference. Numerical simulation is the art and science of creating\npretty plots that can also teach us something about the world or about the models we use to try and describe it. but most of us are probably in this for the plots\nLook at this animation of a hydrodynamic\n(Kelvin-Helmholtz\nor Swirly-Vortex) instability simulation I found online, thanks to Kevin\nSchaal and reposted here with permission.\nDo yourself a service and watch it in full HD.\n\nIf that doesn't strike you as beautiful, you may have no emotion. Here's a few reasons why this is awesome to me:\n\nThis kind of pattern occurs in nature. Want an example? Here's one from Biblioteca Pleyades:\n\n  \nYup. That's our very own Sun. And that's the exact same kind of pattern occurring out there.\n\n\nIt's fairly well described on relevant time and spatial scales by a mathematical model people have devised via the art of pondering science.\n\n\nOur computers have the ability to perform this series of computations and spit out a visualization of this kind of resolution. People have gone to the moon on less - and they didn't have all of our current\nfancy tools like high level programming languages, GPUs, autocompletion, documentation, debuggersbar the occasional moth and Stack Overflow.\n\n\nTo sum up... In our modern times, there is absolutely stopping you from sitting down at your computer right now and create good physics  and pretty plots using it.\nBecause writing is fun\nSeriously. If you haven't tried freeflow, stream of consciousness style writing, try it. It's done wonders for me as a way of structuring my thoughts and pointing out\nflaws in my logic. Besides, with the ease of setting up a blog like this one, the cost of sharing your thoughts with the world is marginal.\nTo make some positive impact\nSomebody wise once said,\n\nWhat are the most pressing issues in your field, and why aren't you working on them?\n\nFor the last half a century we've had a painfully underfunded technology capable of transforming energy generation\naround the globe. I am, of course, talking about nuclear fusion. \nWe are currently orbiting a large reactor that's a neat proof of concept for the principle,\nand we're beginning to harness that power using solar cells.\nIt's been amazing to see the growth of that. However, given the rising temperatures of our globe caused by us as a civilization\nrelentlessly pumping carbon dioxides into the atmosphere,\nthis post is brought to you by two open windows and a draught between them\nit doesn't seem that's going to be enough. Not as long as our wires aren't superconducting and we can't just power all the globe using\nAfrican deserts,\n and as long as our best idea for large scale energy storage is pumping water up a hill, \nwe're tied to burning hydrocarbons.\nOr are we?\nThat's the view many people take when faced with the problem, if they even acknowledge man-made global warning at all.\nIt's certainly the view of plenty of politicians all over the world. How do we know that's true?\nNow, I wish I had influence over public policy, but sadly, I don't. But what I can possibly affect, even if just a little bit,\nis public opinion. And here's hoping it propagates outwards.\nWith this blog I am going to try to present an objective view of the state and perspectives of nuclear fusion\nas a possible safe and clean alternative to hydrocarbons. Good people have been working on that for a long time and now\nwe're getting quite close - a few more steps in a long marathon - to getting that actually working.\nBecause faced with a crisis such as climate change, we're going to need all of the tools at our disposal.\nBecause that idea might save the world one day, and that seems like a pretty pressing issue.",
      "tags": "blogging,status",
      "url": "https://stanczakdominik.github.io/posts/an-introduction/"
    },
    {
      "title": "Search",
      "text": "Search results appear here.",
      "tags": "",
      "url": "https://stanczakdominik.github.io/search/"
    }
  ]
};